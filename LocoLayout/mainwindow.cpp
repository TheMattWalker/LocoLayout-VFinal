/****************************************************************************
**
** LocoLayout
**
** Copyright (C) 2015 UAHell
**
** Contact: mnw0002@uah.edu
**
** Authors: Mike Walsh, Becca Sander, Matt Walker
**
** This file is part of the LocoLayout train program.
**
** These files and all other files included in this program package
** can NOT be modified without the author's explicit authorization.
**
** This program is for demonstrations only.
**
**
****************************************************************************/


#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    this->setWindowState(Qt::WindowMaximized);  //Maximize program on startup

    setWindowTitle(tr("LocoLayout"));   //Set the title of the application window

    // Load custom QStyleSheet
    QFile File("../LocoLayout/stylesheet.qss");
    File.open(QFile::ReadOnly);
    QString StyleSheet = QLatin1String(File.readAll());
    qApp->setStyleSheet(StyleSheet);

    toolSelected = 0;   // initially set toolSelected to 0.
                        // toolSelected is used to keep track of if a user has selected to place
                        // a piece of track or not and if so what track piece.
                        // if 0, no track piece is ready to be placed and mouse actions are as normal


    //Create a temp file to save to as a backup incase of crashing, user errors etc.
    layoutFileName = "NULL";
    QString filename = "UntitledLayout.ll";
    QString sdata = " ";
    data = sdata.toUtf8();

    QFile layoutFile(filename);

    if(!layoutFile.open(QIODevice::WriteOnly))
    {
        qDebug()<<"Error -- unable to open file for output";
        return;
    }
    else
    {
        qDebug()<<"File opened for output";
    }

    if(layoutFile.write(data))
    {
        qDebug()<<"Layout saved to file: "<<filename;
    }
    else
        qDebug()<<"Error -- unable to save layout to file";

    layoutFile.close();

    //Create DS Tables
    QHeaderView* tpHHeader = new QHeaderView(Qt::Horizontal);
    QHeaderView* tpVHeader = new QHeaderView(Qt::Vertical);
    QHeaderView* cHHeader = new QHeaderView(Qt::Horizontal);
    QHeaderView* cVHeader = new QHeaderView(Qt::Vertical);
    tptable = new QTableWidget;
    tptable->setSortingEnabled(false);
    ctable = new QTableWidget;
    ctable->setSortingEnabled(false);

    tptable->setHorizontalHeader(tpHHeader);
    tptable->setVerticalHeader(tpVHeader);
    tptable->setColumnCount(dsections.size());
    tptable->setRowCount(0);
    tptable->setEditTriggers(QAbstractItemView::NoEditTriggers);

    ctable->setHorizontalHeader(cHHeader);
    ctable->setVerticalHeader(cVHeader);
    ctable->setColumnCount(3);
    ctable->setRowCount(dsections.size());
    ctable->setEditTriggers(QAbstractItemView::NoEditTriggers);

    ctable->setHorizontalHeaderItem(0, new QTableWidgetItem("Connection1(A)"));
    ctable->setHorizontalHeaderItem(1, new QTableWidgetItem("Connection2(B)"));
    ctable->setHorizontalHeaderItem(2, new QTableWidgetItem("Connection3(C)"));

    //Create status bar
    statusLabel = new QLabel("", this);
    statusBar()->addWidget(statusLabel);

    //Setup initial layouts
    h1Splitter = new QSplitter;
    h2Splitter = new QSplitter;

    QSplitter *vSplitter = new QSplitter;
    vSplitter->setOrientation(Qt::Vertical);

    vSplitter->addWidget(h1Splitter);
    vSplitter->addWidget(h2Splitter);

    //Create Graphics Viewer
    view = new View("");                //Create new graphics view
    gridscene = new GridScene;          //Create new graphics scene
    view->view()->setScene(gridscene);  //set graphics scene to graphics view
    h1Splitter->addWidget(view);        //Add graphics view to layout

    //Setup layouts above grid
     QVBoxLayout *layout = new QVBoxLayout;



    newDSBox = new QWidget;
    newDSBox->setMaximumWidth(200);


    newDSBoxLayout = new QVBoxLayout;
    newDSBox->setLayout(newDSBoxLayout);

    errorDSLabel = new QLabel;
    newDSBoxLayout->addWidget(errorDSLabel);

    newDSLineEdit = new QLineEdit;
    newDSBoxLayout->addWidget(newDSLineEdit);
    newDSPushButton = new QPushButton("New Detection Section");
    newDSBoxLayout->addWidget(newDSPushButton);

    saveDSBox = new QWidget;
    saveDSBox->setMaximumWidth(200);
    saveDSBox->setHidden(true);

    saveDSBoxLayout = new QVBoxLayout;
    saveDSBox->setLayout(saveDSBoxLayout);

    saveDSPushButton = new QPushButton("Save Detection Section");
    saveDSBoxLayout->addWidget(saveDSPushButton);

    connect(newDSPushButton,SIGNAL(clicked()),this,SLOT(newMainDS()));
    connect(saveDSPushButton,SIGNAL(clicked()),this,SLOT(saveMainDS()));


    //Straight Track Pieces

    straightToolGroupBox = new QWidget;                   //Create group box that all straight track buttons will reside in
    straightToolGroupBox->setHidden(true);                  //Initially Hide

    straightTrackLayout = new QGridLayout;                  //Create straight track layout that all straight pieces will reside in
    straightToolGroupBox->setLayout(straightTrackLayout);   //Set group box to the layout that all straight pieces are in
    straightTrackLayout->setContentsMargins(0,0,0,0);

    //Bumper Track Pieces

    bumperToolGroupBox = new QWidget;                   //Create group box
    bumperToolGroupBox->setHidden(true);                  //Initially Hide

    bumperTrackLayout = new QGridLayout;                  //Create layout that goes in group box
    bumperToolGroupBox->setLayout(bumperTrackLayout);   //Set group box to the layout
    bumperTrackLayout->setContentsMargins(0,0,0,0);

    //Curved Track Pieces
    curvedToolGroupBox = new QWidget;                   //Create group box
    curvedToolGroupBox->setHidden(true);                  //Initially Hide

    curvedTrackLayout = new QGridLayout;                  //Create layout that goes in group box
    curvedToolGroupBox->setLayout(curvedTrackLayout);   //Set group box to the layout
    curvedTrackLayout->setContentsMargins(0,0,0,0);

    //Switch Track Pieces
    switchToolGroupBox = new QWidget;                   //Create group box
    switchToolGroupBox->setHidden(true);                  //Initially Hide

    switchTrackLayout = new QGridLayout;                  //Create layout that goes in group box
    switchToolGroupBox->setLayout(switchTrackLayout);   //Set group box to the layout
    switchTrackLayout->setContentsMargins(0,0,0,0);

    //Cross Track Pieces
    crossToolGroupBox = new QWidget;                   //Create group box
    crossToolGroupBox->setHidden(true);                  //Initially Hide

    crossTrackLayout = new QGridLayout;                  //Create layout that goes in group box
    crossToolGroupBox->setLayout(crossTrackLayout);   //Set group box to the layout
    crossTrackLayout->setContentsMargins(0,0,0,0);

    //Diagonal Track Pieces
    diagonalToolGroupBox = new QWidget;                   //Create group box
    diagonalToolGroupBox->setHidden(true);                  //Initially Hide

    diagonalTrackLayout = new QGridLayout;                  //Create layout that goes in group box
    diagonalToolGroupBox->setLayout(diagonalTrackLayout);   //Set group box to the layout
    diagonalTrackLayout->setContentsMargins(0,0,0,0);

    //Cosmetic Track Pieces
    cosmeticToolGroupBox = new QWidget;                   //Create group box
    cosmeticToolGroupBox->setHidden(true);                  //Initially Hide

    cosmeticTrackLayout = new QGridLayout;                  //Create layout that goes in group box
    cosmeticToolGroupBox->setLayout(cosmeticTrackLayout);   //Set group box to the layout
    cosmeticTrackLayout->setContentsMargins(0,0,0,0);



    tpTabWidget = new QTabWidget;
    //tpTabWidget->setStyleSheet("background-color: #d6d6d6;");
    tpTabWidget->setStyleSheet("QWidget"
                               "{color: #000000;"
                               "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #4d4d4d, stop: 0.1 #646464, stop: 1 #5d5d5d);}"
                               "QWidget:focus{"
                               "border: 2px solid QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #06b6b6, stop: 1 #058686);}"
                               "QPushButton:hover{"
                               "border: 2px solid QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #06b6b6, stop: 1 #058686);}"
                               "QPushButton{"
                               "color: #b1b1b1;"
                               "color: #b1b1b1;"
                               "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #b6b6b6, stop: 1 #909090);"
                               "border-width: 1px;"
                               "border-color: #1e1e1e;"
                               "border-style: solid;"
                               "border-radius: 6;"
                               "padding: 3px;"
                               "font-size: 12px;"
                               "padding-left: 5px;"
                               "padding-right: 5px;"
                               "}");
    tpTabWidget->tabBar()->setStyleSheet("background-color: #323232;"
                                         "color: #b1b1b1;");

    tpTabWidget->addTab(straightToolGroupBox, "Straights");
    tpTabWidget->addTab(diagonalToolGroupBox, "Diagonals");
    tpTabWidget->addTab(curvedToolGroupBox, "Curves");
    tpTabWidget->addTab(switchToolGroupBox, "Switches");
    tpTabWidget->addTab(crossToolGroupBox, "Crosses");
    tpTabWidget->addTab(bumperToolGroupBox, "Bumpers");
    tpTabWidget->addTab(cosmeticToolGroupBox, "Cosmetics");

    tpTabWidget->setTabEnabled(0,false);
    tpTabWidget->setTabEnabled(1,false);
    tpTabWidget->setTabEnabled(2,false);
    tpTabWidget->setTabEnabled(3,false);
    tpTabWidget->setTabEnabled(4,false);
    tpTabWidget->setTabEnabled(5,false);
    tpTabWidget->setTabEnabled(6,true);


    DSidLabel = new QLabel("Detection Section: ");
    //DSidLabel->setMaximumWidth(150);
    DSidLabel->setAlignment(Qt::AlignLeft);
    DSidEdit = new QLineEdit("NULL",this);
    DSidEdit->setAlignment(Qt::AlignLeft);
    DSidEdit->setReadOnly(true);
    //DSidEdit->setDisabled(true);
    DSidEdit->setMaximumWidth(60);
    DSidEdit->setMaximumHeight(30);

    switchIDLabel = new QLabel("Switch: ");
    switchIDLabel->setAlignment(Qt::AlignLeft);
    switchIDEdit = new QLineEdit("NULL",this);
    switchIDEdit->setAlignment(Qt::AlignLeft);
    switchIDEdit->setReadOnly(true);
    switchIDEdit->setMaximumWidth(60);
    switchIDEdit->setMaximumHeight(30);

    QHBoxLayout *dsLabelLayout = new QHBoxLayout;
    QVBoxLayout *dsIDLabelLayout = new QVBoxLayout;
    QVBoxLayout *dsIDEditLayout = new QVBoxLayout;
    dsLabelLayout->addLayout(dsIDLabelLayout);
    dsLabelLayout->addLayout(dsIDEditLayout);


    dsIDLabelLayout->addWidget(DSidLabel);
    dsIDLabelLayout->addWidget(switchIDLabel);
    dsIDEditLayout->addWidget(DSidEdit);
    dsIDEditLayout->addWidget(switchIDEdit);

    dsLabelWidget = new QWidget;
    dsLabelWidget->setLayout(dsLabelLayout);

    dsTableWidget = new QWidget;

    QVBoxLayout* dsTableMainLayout = new QVBoxLayout;
    dsTableWidget->setLayout(dsTableMainLayout);

    QLabel* title = new QLabel("Detection Sections");
    dsTableMainLayout->addWidget(title);

    QHBoxLayout* dsButtonLayout = new QHBoxLayout;
    QPushButton* delDSPushButton = new QPushButton("Delete Detection Section");
    QPushButton* showDSPushButton = new QPushButton("Show Detection Sections");
    showDSPushButton->setCheckable(true);

    dsButtonLayout->addWidget(showDSPushButton);
    dsButtonLayout->addWidget(delDSPushButton);
    dsTableMainLayout->addLayout(dsButtonLayout);
    dsTableMainLayout->addWidget(tptable);

    QLabel* title2 = new QLabel("Detection Section Connections");
    dsTableMainLayout->addWidget(title2);
    dsTableMainLayout->addWidget(ctable);

    dsMainLayout = new QVBoxLayout;
    dsMainLayout->addWidget(newDSBox);
    dsMainLayout->addWidget(saveDSBox);
    dsMainLayout->addWidget(dsLabelWidget);
    dsMainLayout->addWidget(dsTableWidget);
    dsMainWidget = new QWidget;
    dsMainWidget->setLayout(dsMainLayout);

    dsDock = new QDockWidget("Detection Sections", parent, Qt::Tool);
    dsDock->setWidget(dsMainWidget);
    this->addDockWidget(Qt::RightDockWidgetArea, dsDock);

    tpMainLayout = new QVBoxLayout;
    tpMainLayout->addWidget(tpTabWidget);
    tpMainWidget = new QWidget;
    tpMainWidget->setLayout(tpMainLayout);

    tpTabWidget->setMinimumWidth(100);

    tpDock = new QDockWidget("Track Pieces", parent, Qt::Tool);
    tpDock->setWidget(tpMainWidget);
    this->addDockWidget(Qt::LeftDockWidgetArea, tpDock);


    //SQL Window Setup
    sqlMainLayout = new QHBoxLayout;
    QVBoxLayout* sqlEditLayout = new QVBoxLayout;
    QVBoxLayout* sqlLabelLayout = new QVBoxLayout;
    QVBoxLayout* sqlButtonLayout = new QVBoxLayout;
    QLabel* sqlHostLabel = new QLabel("Host: ");
    QLabel* sqlPortLabel = new QLabel("Port: ");
    QLabel* sqlDBNameLabel = new QLabel("Database Name: ");
    QLabel* sqlUserNameLabel = new QLabel("Username: ");
    QLabel* sqlPasswordLabel = new QLabel("Password: ");
    sqlLabelLayout->addWidget(sqlHostLabel);
    sqlLabelLayout->addWidget(sqlPortLabel);
    sqlLabelLayout->addWidget(sqlDBNameLabel);
    sqlLabelLayout->addWidget(sqlUserNameLabel);
    sqlLabelLayout->addWidget(sqlPasswordLabel);
    sqlHostEdit = new QLineEdit;
    sqlPortEdit = new QLineEdit;
    sqlDBNameEdit = new QLineEdit;
    sqlUserNameEdit = new QLineEdit;
    sqlPasswordEdit = new QLineEdit;
    sqlHostEdit->setText("pavelow.eng.uah.edu");
    sqlPortEdit->setText("33158");
    sqlDBNameEdit->setText("LocoLayout");
    sqlEditLayout->addWidget(sqlHostEdit);
    sqlEditLayout->addWidget(sqlPortEdit);
    sqlEditLayout->addWidget(sqlDBNameEdit);
    sqlEditLayout->addWidget(sqlUserNameEdit);
    sqlEditLayout->addWidget(sqlPasswordEdit);
    QPushButton* sqlUploadButton = new QPushButton("Upload Layout");
    sqlButtonLayout->addWidget(sqlUploadButton);
    sqlMainLayout->addLayout(sqlLabelLayout);
    sqlMainLayout->addLayout(sqlEditLayout);
    sqlMainLayout->addLayout(sqlButtonLayout);
    connect(sqlUploadButton,SIGNAL(clicked()),this,SLOT(uploadLayout()));

    sqlMainWidget = new QWidget;
    sqlMainWidget->setLayout(sqlMainLayout);
    sqlDock = new QDockWidget("SQL Upload", parent, Qt::Tool);
    sqlDock->setWidget(sqlMainWidget);
    this->addDockWidget(Qt::BottomDockWidgetArea, sqlDock);
    sqlDock->setVisible(false);


    //initializations
    pieceCounter = -1; //intitally set piececounter to -1;
    nullPoint.setX(0.1);
    nullPoint.setY(0.1);
    possPointA = nullPoint;
    possPointB = nullPoint;
    possPointC = nullPoint;
    possPointD = nullPoint;
    gridscene->setPossPointA(possPointA); //send possible positions to gridscene to paint those positions a new color
    gridscene->setPossPointB(possPointB);
    gridscene->setPossPointC(possPointC);
    gridscene->setPossPointD(possPointD);

    QGraphicsItem *item = new TrackOneXOne(0, -100000, -100000);
    item->setPos(-100000, -100000);
    gridscene->addItem(item);
    item = new TrackOneXOne(0, -100000, 100000);
    item->setPos(-100000, 100000);
    gridscene->addItem(item);
    item = new TrackOneXOne(0, 100000, -100000);
    item->setPos(100000, -100000);
    gridscene->addItem(item);
    item = new TrackOneXOne(0, 100000, 100000);
    item->setPos(100000, 100000);
    gridscene->addItem(item);



    // Add Main Layouts
    layout->addWidget(vSplitter);
    ui->centralWidget->setLayout(layout);


    //Main Menu Actions
    exitAction = new QAction("Exit", this);
    exitAction->setShortcut(QKeySequence::Quit);
    connect(exitAction, SIGNAL(triggered()), this, SLOT(close()));

    antiaAction = new QAction("Antialiasing", this);
    antiaAction->setCheckable(true);
    connect(antiaAction, SIGNAL(triggered(bool)), view, SLOT(toggleAntialiasing(bool)));

    aboutAction = new QAction("About LocoLayout", this);
    connect(aboutAction, SIGNAL(triggered()), this, SLOT(aboutDialog()));

    printAction = new QAction("Print", this);
    printAction->setShortcut(QKeySequence::Print);
    connect(printAction, SIGNAL(triggered()), view, SLOT(print()));

    saveLayoutAction = new QAction("Save", this);
    saveLayoutAction->setShortcut(QKeySequence::Save);
    connect(saveLayoutAction, SIGNAL(triggered()), this, SLOT(saveLayout()));

    saveAsLayoutAction = new QAction("Save As...", this);
    saveAsLayoutAction->setShortcut(QKeySequence::SaveAs);
    connect(saveAsLayoutAction, SIGNAL(triggered()), this, SLOT(saveAsLayout()));

    loadLayoutAction = new QAction("Open...", this);
    loadLayoutAction->setShortcut(QKeySequence::Open);
    connect(loadLayoutAction, SIGNAL(triggered()), this, SLOT(loadLayoutCheck()));

    fileMenu = ui->menuBar->addMenu("File");
    fileMenu->addAction(loadLayoutAction);
    fileMenu->addAction(saveLayoutAction);
    fileMenu->addAction(saveAsLayoutAction);
    fileMenu->addAction(printAction);
    fileMenu->addAction(exitAction);

    editMenu = ui->menuBar->addMenu("Edit");
    editMenu->addAction(antiaAction);

    toolsMenu = ui->menuBar->addMenu("Tools");

    tpToolAction = new QAction("Track Pieces", this);
    tpToolAction->setCheckable(true);
    tpToolAction->setChecked(true);
    dsToolAction = new QAction("Detection Sections", this);
    dsToolAction->setCheckable(true);
    dsToolAction->setChecked(true);
    sqlToolAction = new QAction("SQL Upload", this);
    sqlToolAction->setCheckable(true);
    sqlToolAction->setChecked(false);
    connect(tpToolAction, SIGNAL(triggered(bool)), tpDock, SLOT(setVisible(bool)));
    connect(dsToolAction, SIGNAL(triggered(bool)), dsDock, SLOT(setVisible(bool)));
    connect(sqlToolAction, SIGNAL(triggered(bool)), sqlDock, SLOT(setVisible(bool)));
    toolsMenu->addAction(tpToolAction);
    toolsMenu->addAction(dsToolAction);
    toolsMenu->addAction(sqlToolAction);


    helpMenu = ui->menuBar->addMenu("Help");
    helpMenu->addAction(aboutAction);


    //Creating buttons for each track piece for the UI
    /******************************************** STRAIGHT TOOLBAR *********************************************/
    Straight1ToolButton = new QPushButton(QIcon(":/1.png"), "", this);
    connect(Straight1ToolButton, SIGNAL(clicked()), this, SLOT(Straight1Slot()));
    straightTrackLayout->addWidget(Straight1ToolButton,0,0);

    Straight2ToolButton = new QPushButton(QIcon(":/2.png"), "", this);
    connect(Straight2ToolButton, SIGNAL(clicked()), this, SLOT(Straight2Slot()));
    straightTrackLayout->addWidget(Straight2ToolButton,0,1);

    /******************************************** BUMPER TOOLBAR *********************************************/
    Bumper3ToolButton = new QPushButton(QIcon(":/3.png"), "", this);
    connect(Bumper3ToolButton, SIGNAL(clicked()), this, SLOT(Bumper3Slot()));
    bumperTrackLayout->addWidget(Bumper3ToolButton,0,0);

    Bumper4ToolButton = new QPushButton(QIcon(":/4.png"), "", this);
    connect(Bumper4ToolButton, SIGNAL(clicked()), this, SLOT(Bumper4Slot()));
    bumperTrackLayout->addWidget(Bumper4ToolButton,0,1);

    Bumper5ToolButton = new QPushButton(QIcon(":/5.png"), "", this);
    connect(Bumper5ToolButton, SIGNAL(clicked()), this, SLOT(Bumper5Slot()));
    bumperTrackLayout->addWidget(Bumper5ToolButton,0,2);

    Bumper6ToolButton = new QPushButton(QIcon(":/6.png"), "", this);
    connect(Bumper6ToolButton, SIGNAL(clicked()), this, SLOT(Bumper6Slot()));
    bumperTrackLayout->addWidget(Bumper6ToolButton,0,3);

    Bumper7ToolButton = new QPushButton(QIcon(":/7.png"), "", this);
    connect(Bumper7ToolButton, SIGNAL(clicked()), this, SLOT(Bumper7Slot()));
    bumperTrackLayout->addWidget(Bumper7ToolButton,0,4);

    Bumper8ToolButton = new QPushButton(QIcon(":/8.png"), "", this);
    connect(Bumper8ToolButton, SIGNAL(clicked()), this, SLOT(Bumper8Slot()));
    bumperTrackLayout->addWidget(Bumper8ToolButton,0,5);

    Bumper9ToolButton = new QPushButton(QIcon(":/9.png"), "", this);
    connect(Bumper9ToolButton, SIGNAL(clicked()), this, SLOT(Bumper9Slot()));
    bumperTrackLayout->addWidget(Bumper9ToolButton,1,0);

    Bumper10ToolButton = new QPushButton(QIcon(":/10.png"), "", this);
    connect(Bumper10ToolButton, SIGNAL(clicked()), this, SLOT(Bumper10Slot()));
    bumperTrackLayout->addWidget(Bumper10ToolButton,1,1);


    /******************************************** CROSS TOOLBAR *********************************************/
    Cross11ToolButton = new QPushButton(QIcon(":/11.png"), "", this);
    connect(Cross11ToolButton, SIGNAL(clicked()), this, SLOT(Cross11Slot()));
    crossTrackLayout->addWidget(Cross11ToolButton,0,0);

    Cross12ToolButton = new QPushButton(QIcon(":/12.png"), "", this);
    connect(Cross12ToolButton, SIGNAL(clicked()), this, SLOT(Cross12Slot()));
    crossTrackLayout->addWidget(Cross12ToolButton,0,1);

    Cross13ToolButton = new QPushButton(QIcon(":/13.png"), "", this);
    connect(Cross13ToolButton, SIGNAL(clicked()), this, SLOT(Cross13Slot()));
    crossTrackLayout->addWidget(Cross13ToolButton,0,2);

    Cross14ToolButton = new QPushButton(QIcon(":/14"), "", this);
    connect(Cross14ToolButton, SIGNAL(clicked()), this, SLOT(Cross14Slot()));
    crossTrackLayout->addWidget(Cross14ToolButton,0,3);

    Cross15ToolButton = new QPushButton(QIcon(":/15.png"), "", this);
    connect(Cross15ToolButton, SIGNAL(clicked()), this, SLOT(Cross15Slot()));
    crossTrackLayout->addWidget(Cross15ToolButton,0,4);

    Cross16ToolButton = new QPushButton(QIcon(":/16.png"), "", this);
    connect(Cross16ToolButton, SIGNAL(clicked()), this, SLOT(Cross16Slot()));
    crossTrackLayout->addWidget(Cross16ToolButton,0,5);


    /******************************************** CURVED TOOLBAR *********************************************/
    Curve17ToolButton = new QPushButton(QIcon(":/17.png"), "", this);
    connect(Curve17ToolButton, SIGNAL(clicked()), this, SLOT(Curve17Slot()));
    curvedTrackLayout->addWidget(Curve17ToolButton,0,0);

    Curve18ToolButton = new QPushButton(QIcon(":/18.png"), "", this);
    connect(Curve18ToolButton, SIGNAL(clicked()), this, SLOT(Curve18Slot()));
    curvedTrackLayout->addWidget(Curve18ToolButton,0,1);

    Curve19ToolButton = new QPushButton(QIcon(":/19.png"), "", this);
    connect(Curve19ToolButton, SIGNAL(clicked()), this, SLOT(Curve19Slot()));
    curvedTrackLayout->addWidget(Curve19ToolButton,0,2);

    Curve20ToolButton = new QPushButton(QIcon(":/20.png"), "", this);
    connect(Curve20ToolButton, SIGNAL(clicked()), this, SLOT(Curve20Slot()));
    curvedTrackLayout->addWidget(Curve20ToolButton,0,3);

    Curve21ToolButton = new QPushButton(QIcon(":/21.png"), "", this);
    connect(Curve21ToolButton, SIGNAL(clicked()), this, SLOT(Curve21Slot()));
    curvedTrackLayout->addWidget(Curve21ToolButton,0,4);

    Curve22ToolButton = new QPushButton(QIcon(":/22.png"), "", this);
    connect(Curve22ToolButton, SIGNAL(clicked()), this, SLOT(Curve22Slot()));
    curvedTrackLayout->addWidget(Curve22ToolButton,0,5);

    Curve23ToolButton = new QPushButton(QIcon(":/23.png"), "", this);
    connect(Curve23ToolButton, SIGNAL(clicked()), this, SLOT(Curve23Slot()));
    curvedTrackLayout->addWidget(Curve23ToolButton,1,0);

    Curve24ToolButton = new QPushButton(QIcon(":/24.png"), "", this);
    connect(Curve24ToolButton, SIGNAL(clicked()), this, SLOT(Curve24Slot()));
    curvedTrackLayout->addWidget(Curve24ToolButton,1,1);


    /******************************************** DIAGONAL TOOLBAR *********************************************/
    Diagonal25ToolButton = new QPushButton(QIcon(":/25.png"), "", this);
    connect(Diagonal25ToolButton, SIGNAL(clicked()), this, SLOT(Diagonal25Slot()));
    diagonalTrackLayout->addWidget(Diagonal25ToolButton,1,2);

    Diagonal26ToolButton = new QPushButton(QIcon(":/26.png"), "", this);
    connect(Diagonal26ToolButton, SIGNAL(clicked()), this, SLOT(Diagonal26Slot()));
    diagonalTrackLayout->addWidget(Diagonal26ToolButton,1,3);


    /******************************************** SWITCH TOOLBAR *********************************************/
    Switch27ToolButton = new QPushButton(QIcon(":/27.png"), "", this);
    connect(Switch27ToolButton, SIGNAL(clicked()), this, SLOT(Switch27Slot()));
    switchTrackLayout->addWidget(Switch27ToolButton,0,0);

    Switch28ToolButton = new QPushButton(QIcon(":/28.png"), "", this);
    connect(Switch28ToolButton, SIGNAL(clicked()), this, SLOT(Switch28Slot()));
    switchTrackLayout->addWidget(Switch28ToolButton,0,1);

    Switch29ToolButton = new QPushButton(QIcon(":/29.png"), "", this);
    connect(Switch29ToolButton, SIGNAL(clicked()), this, SLOT(Switch29Slot()));
    switchTrackLayout->addWidget(Switch29ToolButton,0,2);

    Switch30ToolButton = new QPushButton(QIcon(":/30.png"), "", this);
    connect(Switch30ToolButton, SIGNAL(clicked()), this, SLOT(Switch30Slot()));
    switchTrackLayout->addWidget(Switch30ToolButton,0,3);

    Switch31ToolButton = new QPushButton(QIcon(":/31.png"), "", this);
    connect(Switch31ToolButton, SIGNAL(clicked()), this, SLOT(Switch31Slot()));
    switchTrackLayout->addWidget(Switch31ToolButton,0,4);

    Switch32ToolButton = new QPushButton(QIcon(":/32.png"), "", this);
    connect(Switch32ToolButton, SIGNAL(clicked()), this, SLOT(Switch32Slot()));
    switchTrackLayout->addWidget(Switch32ToolButton,0,5);

    Switch33ToolButton = new QPushButton(QIcon(":/33.png"), "", this);
    connect(Switch33ToolButton, SIGNAL(clicked()), this, SLOT(Switch33Slot()));
    switchTrackLayout->addWidget(Switch33ToolButton,1,0);

    Switch34ToolButton = new QPushButton(QIcon(":/34.png"), "", this);
    connect(Switch34ToolButton, SIGNAL(clicked()), this, SLOT(Switch34Slot()));
    switchTrackLayout->addWidget(Switch34ToolButton,1,1);

    Switch35ToolButton = new QPushButton(QIcon(":/35.png"), "", this);
    connect(Switch35ToolButton, SIGNAL(clicked()), this, SLOT(Switch35Slot()));
    switchTrackLayout->addWidget(Switch35ToolButton,1,2);

    Switch36ToolButton = new QPushButton(QIcon(":/36.png"), "", this);
    connect(Switch36ToolButton, SIGNAL(clicked()), this, SLOT(Switch36Slot()));
    switchTrackLayout->addWidget(Switch36ToolButton,1,3);

    Switch37ToolButton = new QPushButton(QIcon(":/37.png"), "", this);
    connect(Switch37ToolButton, SIGNAL(clicked()), this, SLOT(Switch37Slot()));
    switchTrackLayout->addWidget(Switch37ToolButton,1,4);

    Switch38ToolButton = new QPushButton(QIcon(":/38.png"), "", this);
    connect(Switch38ToolButton, SIGNAL(clicked()), this, SLOT(Switch38Slot()));
    switchTrackLayout->addWidget(Switch38ToolButton,1,5);

    Switch39ToolButton = new QPushButton(QIcon(":/39.png"), "", this);
    connect(Switch39ToolButton, SIGNAL(clicked()), this, SLOT(Switch39Slot()));
    switchTrackLayout->addWidget(Switch39ToolButton,2,0);

    Switch40ToolButton = new QPushButton(QIcon(":/40.png"), "", this);
    connect(Switch40ToolButton, SIGNAL(clicked()), this, SLOT(Switch40Slot()));
    switchTrackLayout->addWidget(Switch40ToolButton,2,1);

    Switch41ToolButton = new QPushButton(QIcon(":/41.png"), "", this);
    connect(Switch41ToolButton, SIGNAL(clicked()), this, SLOT(Switch41Slot()));
    switchTrackLayout->addWidget(Switch41ToolButton,2,2);

    Switch42ToolButton = new QPushButton(QIcon(":/42.png"), "", this);
    connect(Switch42ToolButton, SIGNAL(clicked()), this, SLOT(Switch42Slot()));
    switchTrackLayout->addWidget(Switch42ToolButton,2,3);


    /******************************************** COSMETIC TOOLBAR *********************************************/
    Cosmetic43ToolButton = new QPushButton(QIcon(":/43.png"), "", this);
    connect(Cosmetic43ToolButton, SIGNAL(clicked()), this, SLOT(Corner43Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic43ToolButton,0,0);

    Cosmetic44ToolButton = new QPushButton(QIcon(":/44.png"), "", this);
    connect(Cosmetic44ToolButton, SIGNAL(clicked()), this, SLOT(Corner44Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic44ToolButton,0,1);

    Cosmetic45ToolButton = new QPushButton(QIcon(":/45.png"), "", this);
    connect(Cosmetic45ToolButton, SIGNAL(clicked()), this, SLOT(Corner45Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic45ToolButton,0,2);

    Cosmetic46ToolButton = new QPushButton(QIcon(":/46.png"), "", this);
    connect(Cosmetic46ToolButton, SIGNAL(clicked()), this, SLOT(Corner46Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic46ToolButton,0,3);

    Cosmetic47ToolButton = new QPushButton(QIcon(":/47.png"), "", this);
    connect(Cosmetic47ToolButton, SIGNAL(clicked()), this, SLOT(Corner47Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic47ToolButton,0,4);

    Cosmetic48ToolButton = new QPushButton(QIcon(":/48.png"), "", this);
    connect(Cosmetic48ToolButton, SIGNAL(clicked()), this, SLOT(Corner48Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic48ToolButton,0,5);

    Cosmetic49ToolButton = new QPushButton(QIcon(":/49.png"), "", this);
    connect(Cosmetic49ToolButton, SIGNAL(clicked()), this, SLOT(Corner49Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic49ToolButton,1,0);

    Cosmetic50ToolButton = new QPushButton(QIcon(":/50.png"), "", this);
    connect(Cosmetic50ToolButton, SIGNAL(clicked()), this, SLOT(Corner50Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic50ToolButton,1,1);

    Cosmetic51ToolButton = new QPushButton(QIcon(":/51.png"), "", this);
    connect(Cosmetic51ToolButton, SIGNAL(clicked()), this, SLOT(Corner51Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic51ToolButton,1,2);

    Cosmetic52ToolButton = new QPushButton(QIcon(":/52.png"), "", this);
    connect(Cosmetic52ToolButton, SIGNAL(clicked()), this, SLOT(Corner52Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic52ToolButton,1,3);

    Cosmetic53ToolButton = new QPushButton(QIcon(":/53.png"), "", this);
    connect(Cosmetic53ToolButton, SIGNAL(clicked()), this, SLOT(Corner53Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic53ToolButton,1,4);

    Cosmetic54ToolButton = new QPushButton(QIcon(":/54.png"), "", this);
    connect(Cosmetic54ToolButton, SIGNAL(clicked()), this, SLOT(Corner54Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic54ToolButton,1,5);

    Cosmetic55ToolButton = new QPushButton(QIcon(":/55.png"), "", this);
    connect(Cosmetic55ToolButton, SIGNAL(clicked()), this, SLOT(Corner55Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic55ToolButton,2,0);

    Cosmetic56ToolButton = new QPushButton(QIcon(":/56.png"), "", this);
    connect(Cosmetic56ToolButton, SIGNAL(clicked()), this, SLOT(Corner56Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic56ToolButton,2,1);

    Cosmetic57ToolButton = new QPushButton(QIcon(":/57.png"), "", this);
    connect(Cosmetic57ToolButton, SIGNAL(clicked()), this, SLOT(Corner57Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic57ToolButton,2,2);

    Cosmetic58ToolButton = new QPushButton(QIcon(":/58.png"), "", this);
    connect(Cosmetic58ToolButton, SIGNAL(clicked()), this, SLOT(Corner58Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic58ToolButton,2,3);

    Cosmetic59ToolButton = new QPushButton(QIcon(":/59.png"), "", this);
    connect(Cosmetic59ToolButton, SIGNAL(clicked()), this, SLOT(Corner59Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic59ToolButton,2,4);

    Cosmetic60ToolButton = new QPushButton(QIcon(":/60.png"), "", this);
    connect(Cosmetic60ToolButton, SIGNAL(clicked()), this, SLOT(Corner60Slot()));
    cosmeticTrackLayout->addWidget(Cosmetic60ToolButton,2,5);

    //MainWindow Connection Statements
    connect(gridscene, SIGNAL(itemAdded(int,QPointF)), this, SLOT(addItem(int,QPointF)));
    connect(gridscene, SIGNAL(itemMoved(QPointF,QPointF)), this, SLOT(movedItem(QPointF,QPointF)));
    connect(gridscene, SIGNAL(itemSelected(QPointF)), this, SLOT(selectItem(QPointF)));
    connect(gridscene,SIGNAL(deletedItems(QList<QPointF>)),this, SLOT(deleteItems(QList<QPointF>)));
    connect(this, SIGNAL(loadItem(int,QPointF)), this, SLOT(loadItemOnGrid(int,QPointF)));
    connect(gridscene,SIGNAL(dsAddPiece(QPointF)),this,SLOT(addItemToDS(QPointF)));
    connect(showDSPushButton, SIGNAL(clicked(bool)),this,SLOT(showDSections(bool)));
    connect(delDSPushButton, SIGNAL(clicked()),this,SLOT(deleteDSections()));
    connect(dsDock,SIGNAL(visibilityChanged(bool)),this,SLOT(toggleDSDock(bool)));
    connect(tpDock,SIGNAL(visibilityChanged(bool)),this,SLOT(toggleTPDock(bool)));
    connect(sqlDock,SIGNAL(visibilityChanged(bool)),this,SLOT(toggleSQLDock(bool)));
    connect(gridscene,SIGNAL(itemscopied()),this,SLOT(setCopyTool()));
    connect(gridscene,SIGNAL(pasteInformation(QList<QPointF>,QPointF)),this,SLOT(pasteItems(QList<QPointF>,QPointF)));
    connect(gridscene,SIGNAL(clearToolSelected()),this,SLOT(clearToolSelected()));
}


void MainWindow::toggleDSDock(bool toggle)
{
    dsToolAction->setChecked(toggle);
}
void MainWindow::toggleTPDock(bool toggle)
{
    tpToolAction->setChecked(toggle);
}
void MainWindow::toggleSQLDock(bool toggle)
{
    sqlToolAction->setChecked(toggle);
}

void MainWindow::uploadLayout()
{
    QString host = sqlHostEdit->text();
    int port = sqlPortEdit->text().toInt();
    QString dbname = sqlDBNameEdit->text();
    QString user = sqlUserNameEdit->text();
    QString password = sqlPasswordEdit->text();

    remotedb = QSqlDatabase::addDatabase("QMYSQL", "rdb"); //creates new database connection //Used when true remote DB is available (pavelow, should work when running program on blackhawk)

    remotedb.setHostName(host);          //Remote DB connection information
    remotedb.setPort(port);
    remotedb.setDatabaseName(dbname);
    remotedb.setUserName(user);
    remotedb.setPassword(password);
    bool badConn = 0;
    if ( !remotedb.open() )                         //Connect to database
    {
        qDebug() << remotedb.lastError();
        qDebug() << "Error: Unable to connect to remote database";
        statusLabel->setText("Unable to connect to remote database");
        badConn = 1;
    }
    else
    { badConn = 0;}
    if(!badConn)
    {
        QDialog* dialog = new QDialog;
        QVBoxLayout* mainLayout = new QVBoxLayout;
        QString labelstr = "Connected to ";
        labelstr.append(dbname);
        QLabel* status = new QLabel(labelstr);
        status->setTextFormat(Qt::RichText);
        dialog->setLayout(mainLayout);
        mainLayout->addWidget(status);
        mainLayout->addSpacing(2);
        QProgressBar* progressbar = new QProgressBar;

        mainLayout->addWidget(progressbar);
        int steps = 4;
        int stepValue = 0;
        for(int i=0; i<=dsections.size()-1; i++)
        {
            steps += dsections.at(i)->getdspieces().size();
            steps+=2;
        }
        for(int i=0; i<=trackpieces.size()-1; i++)
        {
            if(trackpieces.at(i)->getSwitchID()!="NULL")
            {
                steps++;
            }
        }
        progressbar->setMinimum(0);
        progressbar->setMaximum(steps);

        dialog->setModal(true);
        dialog->show();

        QApplication::processEvents();

        int numTables = 0;
        QSqlQuery q(remotedb);
        QString qstring = "SHOW TABLES;";

        status->setText("Clearing Database...");
        QApplication::processEvents();

        q.exec(qstring);                        //Get Number of tables in database
        if ( !q.isActive() )
        {
            qDebug() << q.lastError();
            qDebug() << "Error: query failed";
        }
        else
        {
            while ( q.next() )
            {
                numTables++;
            }
        }
        stepValue++;
        progressbar->setValue(stepValue);

        if(numTables!=0)    //If database isn't empty, delete all tables
        {

            qstring =   "SET FOREIGN_KEY_CHECKS = 0;";
            qstring.append("SET @tables = NULL;");
            qstring.append("SELECT GROUP_CONCAT(table_schema, '.', table_name) INTO @tables ");
            qstring.append("FROM information_schema.tables ");
            qstring.append("WHERE table_schema = '");
            qstring.append(dbname);
            qstring.append("';");
            qstring.append("SET @tables = CONCAT('DROP TABLE ', @tables);");
            qstring.append("PREPARE stmt FROM @tables;");
            qstring.append("EXECUTE stmt;");
            qstring.append("DEALLOCATE PREPARE stmt;");
            qstring.append("SET FOREIGN_KEY_CHECKS = 1;");
            if (!q.exec(qstring))
            {
                qDebug() << q.lastError();
                qDebug() << "Error: query failed";
            }
            if (!q.exec(qstring))
            {
                qDebug() << q.lastError();
                qDebug() << "Error: query failed";
            }

        }
        stepValue++;
        progressbar->setValue(stepValue);

        status->setText("Creating Detection Section Tables...");
        QApplication::processEvents();
        if(!dsections.isEmpty())
        {
            for(int i=0; i<=dsections.size()-1; i++)
            {

                // ///////////////////////// CREATE TABLE /////////////////////////////
                qstring = "CREATE TABLE ";
                qstring.append(dsections.at(i)->getds());
                qstring.append(" (X float, Y float, TrackType int, Node text);");
                if (!q.exec(qstring))
                {
                    qDebug() << q.lastError();
                    qDebug() << "Error: query failed";
                }
                stepValue++;
                progressbar->setValue(stepValue);
                QApplication::processEvents();

                // ///////////////////////// POPULATE TABLE /////////////////////////////
                int switchCount = 0;
                int switchType = 0;
                int trackType = 0;

                for(int j=0; j<=dsections.at(i)->getdspieces().size()-1; j++)
                {
                    qstring = "INSERT INTO ";
                    qstring.append(dsections.at(i)->getds());
                    qstring.append("(X, Y, TrackType, Node) VALUES(?, ?, ?, ?)");
                    q.prepare(qstring);
                    q.addBindValue(dsections.at(i)->getdspieces().at(j).x()/50);
                    q.addBindValue(dsections.at(i)->getdspieces().at(j).y()/50);
                    if(switchCount==0)
                    {
                        for(int k=0; k<=trackpieces.size()-1; k++)
                        {

                            if(trackpieces.at(k)->getPos()==dsections.at(i)->getdspieces().at(j))
                            {
                                q.addBindValue(trackpieces.at(k)->getTrackType());

                                if((trackpieces.at(k)->getTrackType()<27))
                                {
                                    q.addBindValue("A");
                                }
                                else if((trackpieces.at(k)->getTrackType()>26)&(trackpieces.at(k)->getTrackType()<35))
                                {
                                    q.addBindValue("A");
                                    switchCount++;
                                    switchType = 1;
                                    trackType = trackpieces.at(k)->getTrackType();
                                }
                                else if((trackpieces.at(k)->getTrackType()>34)&(trackpieces.at(k)->getTrackType()<43))
                                {
                                    q.addBindValue("A");
                                    switchCount++;
                                    switchType = 2;
                                    trackType = trackpieces.at(k)->getTrackType();
                                }
                                k=trackpieces.size()+1;
                            }
                        }
                    }
                    else
                    {
                        q.addBindValue(trackType);
                        if(switchType == 1)//8
                        {
                            if(switchCount<4)
                            {
                                q.addBindValue("B");
                                switchCount++;
                            }
                            else
                            {
                                q.addBindValue("C");
                                switchCount++;
                            }
                        }
                        else//4
                        {
                            if(switchCount<2)
                            {
                                q.addBindValue("B");
                                switchCount++;
                            }
                            else
                            {
                                q.addBindValue("C");
                                switchCount++;
                            }
                        }

                    }

                    if ( !q.exec() )
                    {
                        qDebug() << q.lastError();
                        qDebug() << "Error: INSERT query failed";
                    }

                    stepValue++;
                    progressbar->setValue(stepValue);
                    QApplication::processEvents();
                }

            }


            status->setText("Creating Connectivity Table...");
            QApplication::processEvents();
            // ///////////////////////////////Create connectivity table////////////////////////////////////
            qstring = "CREATE TABLE DS_Connectivity (Current text, NumberOfConnections int, Conn1 text, Conn2 text, Conn3 text);";
            if (!q.exec(qstring))
            {
                qDebug() << q.lastError();
                qDebug() << "Error: query failed";
            }
            stepValue++;
            progressbar->setValue(stepValue);
            QApplication::processEvents();

            // ///////////////////////////////Populate connectivity table////////////////////////////////
            for(int i=0; i<=dsections.size()-1; i++)
            {
                int numConnections = 0;
                qstring = "INSERT INTO DS_Connectivity(Current, NumberOfConnections, Conn1, Conn2, Conn3) VALUES(?, ?, ?, ?, ?)";
                q.prepare(qstring);
                q.addBindValue(dsections.at(i)->getds());

                if(dsections.at(i)->getconnA()!="NULL")
                {
                    numConnections++;
                }
                if(dsections.at(i)->getconnB()!="NULL")
                {
                    numConnections++;
                }
                if(dsections.at(i)->getconnC()!="NULL")
                {
                    numConnections++;
                }
                q.addBindValue(numConnections);
                q.addBindValue(dsections.at(i)->getconnA());
                q.addBindValue(dsections.at(i)->getconnB());
                q.addBindValue(dsections.at(i)->getconnC());
                if ( !q.exec() )
                {
                    qDebug() << q.lastError();
                    qDebug() << "Error: INSERT query failed";
                }
                stepValue++;
                progressbar->setValue(stepValue);
                QApplication::processEvents();
            }


            status->setText("Creating Switch Table...");
            QApplication::processEvents();
            // ///////////////////////////////Create Switch table////////////////////////////////////
            qstring = "CREATE TABLE Switches (SW_ID text, DS text);";
            if (!q.exec(qstring))
            {
                qDebug() << q.lastError();
                qDebug() << "Error: query failed";
            }
            stepValue++;
            progressbar->setValue(stepValue);
            QApplication::processEvents();

            // ///////////////////////////////Populate Switch table/////////////////////////////////
            for(int i=0; i<=trackpieces.size()-1; i++)
            {
                if(trackpieces.at(i)->getSwitchID()!="NULL")
                {
                    qstring = "INSERT INTO Switches(SW_ID, DS) VALUES(?, ?)";
                    q.prepare(qstring);
                    q.addBindValue(trackpieces.at(i)->getSwitchID());
                    q.addBindValue(trackpieces.at(i)->getDS());
                    if ( !q.exec() )
                    {
                        qDebug() << q.lastError();
                        qDebug() << "Error: INSERT query failed";
                    }
                    stepValue++;
                    progressbar->setValue(stepValue);
                    QApplication::processEvents();
                }

            }
        }

        statusLabel->setText("Upload Complete");
        dialog->hide();
    }
}

// Used for loading a saved layout file. Reads a layout file and adds a piece of track to the grid one by one in the appropriate location
void MainWindow::populateScene(QString string)
{
    QChar qchar;
    QString items = "";

    int itemNumber = 0;
    int itemType = 0;
    int itemX = 0;
    int itemY = 0;
    QPointF pos;
    QString itemDS;
    QString itemSwitchID;
    QString itemConnA;
    QString itemConnB;
    QString itemConnC;


    int i = 0;
    qchar = string.at(0);

    //Get number of track pieces
    while(qchar.isNumber()&!(qchar.isNull()))
    {
        items.append(qchar);
        i++;
        qchar = string.at(i);
    }
    qDebug()<<"Number of Items"<<items.toInt();
    itemNumber = items.toInt();

    i++;//increment one to get past number of items delimiter
    qchar = string.at(i);
    for(int j = itemNumber; j>0 ;j--)
    {
        items.clear();

        while(qchar!=':')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemType = items.toInt();
        items.clear();

        while(qchar!=',')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemX = items.toInt();
        items.clear();

        while(qchar!='*')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemY = items.toInt();
        items.clear();

        while(qchar!='^')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemDS = items;
        items.clear();

        while(qchar!=';')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        if(j>1)//dont cause assertion error on last iteration
            i++;//Get past delimiter
        qchar = string.at(i);
        itemSwitchID = items;
        items.clear();

        qDebug()<<"Item: "<<itemType<<"("<<itemX<<","<<itemY<<")"<<" DS: "<<itemDS<<" switchID: "<<itemSwitchID;
        pos.setX(itemX);
        pos.setY(itemY);

        //Add track piece to the grid
        emit loadItem(itemType,pos);

        //Add track piece to trackpieces array
        TrackPiece *tp = new TrackPiece(itemType, pos);
        tp->setDS(itemDS);
        tp->setSwitchID(itemSwitchID);
        trackpieces.append(tp);
    }

    qDebug()<<"All Track Piece Items Loaded";
    i+=2;//Get past delimiter and ending '\n' char
    qchar = string.at(i);




    //Get number of detection sections
    while(qchar.isNumber()&!(qchar.isNull()))
    {
        items.append(qchar);
        i++;
        qchar = string.at(i);
    }
    qDebug()<<"Number of Items"<<items.toInt();
    itemNumber = items.toInt();

    i++;//increment one to get past number of items delimiter
    qchar = string.at(i);
    for(int j = itemNumber; j>0 ;j--)
    {
        items.clear();

        while(qchar!=':')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemDS = items;
        items.clear();

        //Create new detection section with ds name
        DetectionSection *ds = new DetectionSection; //Make new DS
        ds->setds(itemDS);
        ds->setdscolor(getColor(QColor(255,255,255)));
        dsections.append(ds); //Add DS to the vector of detection sections
        DetectionSection *gds = new DetectionSection; //Make new grid DS
        gds->setds(itemDS);
        gds->setdscolor(getColor(QColor(255,255,255)));
        gridscene->dsections.append(gds);
        newDSName = itemDS;
        createNewDS(); //update Table


        while(qchar!='$')
        {

            while(qchar!=',')
            {
                items.append(qchar);
                i++;
                qchar = string.at(i);
            }
            i++;//Get past delimiter
            qchar = string.at(i);
            itemX = items.toInt();
            items.clear();

            while(qchar!='@')
            {
                items.append(qchar);
                i++;
                qchar = string.at(i);
            }
            i++;//Get past delimiter
            qchar = string.at(i);
            itemY = items.toInt();
            items.clear();

            pos.setX(itemX);
            pos.setY(itemY);

            //Add piece to detection section
            dsections.at(dsections.size()-1)->appenddspieces(pos); // Add Piece to DS
            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(pos);//Add Piece to gridscene ds
            addItemToDS(pos);   //Add coordinates to table

        }
        i++;//Get past delimiter
        qchar = string.at(i);


        while(qchar!='%')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemConnA = items;
        items.clear();

        while(qchar!='&')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemConnB = items;
        items.clear();

        while(qchar!=';')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        if(j>1)//dont cause assertion error on last iteration
            i++;//Get past delimiter
        qchar = string.at(i);
        itemConnC = items;
        items.clear();

        //Add connections to detection section and update table
        dsections.at(dsections.size()-1)->setconnA(itemConnA);                      //set ds connection of current ds
        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(itemConnA));    //update table

        dsections.at(dsections.size()-1)->setconnB(itemConnB);                      //set ds connection of current ds
        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(itemConnB));    //update table

        dsections.at(dsections.size()-1)->setconnC(itemConnC);                      //set ds connection of current ds
        ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(itemConnC));    //update table

    }
    qDebug()<<"All Detection Section Items Loaded";
    i+=2;//Get past delimiter and ending '\n' char
    qchar = string.at(i);


    //Get number of connection points
    while(qchar.isNumber()&!(qchar.isNull()))
    {
        items.append(qchar);
        i++;
        qchar = string.at(i);
    }
    qDebug()<<"Number of Items"<<items.toInt();
    itemNumber = items.toInt();

    i++;//increment one to get past number of items delimiter
    qchar = string.at(i);
    for(int j = itemNumber; j>0 ;j--)
    {
        items.clear();

        while(qchar!=':')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemType = items.toInt();
        items.clear();

        while(qchar!=',')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemX = items.toInt();
        items.clear();

        while(qchar!='*')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemY = items.toInt();
        items.clear();

        while(qchar!='$')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemDS = items;
        items.clear();

        while(qchar!='%')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemConnA = items;
        items.clear();

        while(qchar!='&')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        i++;//Get past delimiter
        qchar = string.at(i);
        itemConnB = items;
        items.clear();

        while(qchar!=';')
        {
            items.append(qchar);
            i++;
            qchar = string.at(i);
        }
        if(j>1)//dont cause assertion error on last iteration
            i++;//Get past delimiter
        qchar = string.at(i);
        itemConnC = items;
        items.clear();

        qDebug()<<"Item: "<<itemType<<"("<<itemX<<","<<itemY<<")"<<" DS: "<<itemDS<<" connA: "<<itemConnA<<" connB: "<<itemConnB<<" connC: "<<itemConnC;
        pos.setX(itemX);
        pos.setY(itemY);


        //Add connection points to connPoints array
        TrackPiece *tp = new TrackPiece(itemType, pos);
        tp->setDS(itemDS);
        tp->setconnA(itemConnA);
        tp->setconnB(itemConnB);
        tp->setconnC(itemConnC);
        connPoints.append(tp);
        gridscene->connPoints.append(pos);
    }

    qDebug()<<"All Connection Point Items Loaded";

}

// This is the pop up window that comes up when user clicks on about in the main menu
void MainWindow::aboutDialog()
{
    QDialog* dialog = new QDialog;
    dialog->setStyleSheet("QWidget"
                          "{color: #000000;"
                          "background-color: #d6d6d6;}"
                          "QPushButton:hover{"
                          "border: 2px solid QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #06b6b6, stop: 1 #058686);}"
                          "QPushButton{"
                          "color: #b1b1b1;"
                          "color: #b1b1b1;"
                          "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);"
                          "border-width: 1px;"
                          "border-color: #1e1e1e;"
                          "border-style: solid;"
                          "border-radius: 6;"
                          "padding: 3px;"
                          "font-size: 12px;"
                          "padding-left: 5px;"
                          "padding-right: 5px;"
                          "}");
    QHBoxLayout* mainLayout = new QHBoxLayout;
    mainLayout->setSizeConstraint(QLayout::SetFixedSize);
    QVBoxLayout* logoLayout = new QVBoxLayout;
    QVBoxLayout* textLayout = new QVBoxLayout;
    mainLayout->addLayout(logoLayout);
    mainLayout->addLayout(textLayout);
    QLabel* logoLabel = new QLabel;
    //logoLabel->setStyleSheet("background: #d6d6d6;");
    logoLabel->setPixmap(QPixmap(":/logomed.png"));
    logoLabel->setMaximumWidth(150);
    logoLabel->setMaximumHeight(150);
    logoLayout->addWidget(logoLabel);
    QLabel* aboutTitle = new QLabel("<b>LocoLayout 1.0.002</b>");
    //aboutTitle->setStyleSheet("background: #d6d6d6; color: #000000;");
    aboutTitle->setTextFormat(Qt::RichText);
    QLabel* aboutCreated = new QLabel("Created by Mike Walsh, Becca Sander, Matt Walker");
    //aboutCreated->setStyleSheet("background: #d6d6d6; color: #000000;");
    QLabel* aboutCopyright = new QLabel("Copyright 2015 UAHell. All rights reserved.");
    //aboutCopyright->setStyleSheet("background: #d6d6d6; color: #000000;");

    QPushButton* closePushButton = new QPushButton("Close");

    dialog->setLayout(mainLayout);
    textLayout->addWidget(aboutTitle);
    textLayout->addSpacing(2);
    textLayout->addWidget(aboutCreated);
    textLayout->addWidget(aboutCopyright);
    textLayout->addWidget(closePushButton);
    connect(closePushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
    dialog->exec();

}

//These functions are not currently used, I added them for testing at early stages and have kept them until I know for sure I won't need them anymore.
int MainWindow::getToolSelected()
{
    return toolSelected;
}
void MainWindow::setToolSelected(int toolNumber)
{
    toolSelected = toolNumber;
}

// Used for the Debug Button. It displays the coordinates of the last clicked track piece in the status bar
// I also have it sending array information to the console temp for some debug purposes.
void MainWindow::lastItemPosActionSlot()
{
    //QPointF pos;
    QString string;
    //int x = 0;
    //int y = 0;
    //Where last item was initially placed
    //pos = gridscene->getItemPos();
    //x = pos.x();
    //y = pos.y();

    //Where last item was last located
    /*if(!gridscene->selectedItems().isEmpty())
    {
        pos = gridscene->selectedItems().back()->pos();
        x = pos.x();
        y = pos.y();

        string = "(";
        string.append(QString::number(x));
        string.append(", ");
        string.append(QString::number(y));
        string.append(")");
        statusLabel->setText(string);
    }
    else
    {
        string = "(";
        string.append("X");
        string.append(", ");
        string.append("Y");
        string.append(")");
        statusLabel->setText(string);
    }*/

    string="";
    for(int i = 0; i <= trackpieces.size()-1; i++)
    {
        if(trackpieces.at(i)->getTrackType()<47)
        {
        string.append(QString::number(trackpieces.at(i)->getTrackType()));
        string.append(" (");
        string.append(QString::number(trackpieces.at(i)->getPos().x()/50));
        string.append(",");
        string.append(QString::number(trackpieces.at(i)->getPos().y()/50));
        string.append(")\n");
        }
    }
    qDebug()<<string;

    //qDebug()<<trackpieces;
    //qDebug()<<gridscene->items();
}

void MainWindow::showDSections(bool clicked)
{
    if(clicked)
    {
        gridscene->showDSColors = 1;
    }
    else
    {
        gridscene->showDSColors = 0;
    }
}

void MainWindow::deleteDSections()
{
    if(pieceCounter==-1)
    {
        QString dsID;
        QDialog* dialog = new QDialog;
        QVBoxLayout* mainLayout = new QVBoxLayout;
        QPushButton* closePushButton = new QPushButton("Delete");
        QLabel* delDSTitle = new QLabel("Detection Section:");
        delDSTitle->setTextFormat(Qt::RichText);
        QLineEdit* delDSLineEdit = new QLineEdit;

        dialog->setLayout(mainLayout);
        mainLayout->addWidget(delDSTitle);
        mainLayout->addSpacing(2);
        mainLayout->addWidget(delDSLineEdit);
        mainLayout->addWidget(closePushButton);
        //connect(switchLineEdit, SIGNAL(textChanged(QString)),this,SLOT(setSwitchID(QString)));
        connect(closePushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
        dialog->exec();
        dsID = delDSLineEdit->text();
        if(!dsID.isEmpty())
        {
            for(int i=0; i<=dsections.size()-1; i++)
            {
                if(dsections.at(i)->getds()==dsID)
                {

                    for(int j=0; j<=trackpieces.size()-1; j++)
                    {
                        if(trackpieces.at(j)->getDS()==dsID)
                        {
                            //remove graphics of track piece
                            gridscene->removeItem(gridscene->itemAt(trackpieces.at(j)->getPos().x(),trackpieces.at(j)->getPos().y(),QTransform()));
                            //remove track piece from array
                            trackpieces.remove(j);
                            j--;
                        }
                    }

                    for(int j=0; j<=connPoints.size()-1; j++)
                    {
                        if(connPoints.at(j)->getDS()==dsID)
                        {
                            //remove graphics of connection point
                            gridscene->connPoints.remove(j);
                            //remove connection point from array
                            connPoints.remove(j);
                            j--;
                        }
                    }

                    // /////////////////////// If there were any connections, re create the connection points for the connected ds /////////////////////////////
                    if(dsections.at(i)->getconnA()!="NULL")
                    {
                        if(dsections.at(i)->getconnA().at(0)!='(')
                        {
                            for(int j=0; j<=dsections.size()-1; j++)
                            {
                                if(dsections.at(j)->getds() == dsections.at(i)->getconnA())
                                {


                                    if(dsections.at(j)->getconnC()==dsections.at(i)->getds())
                                    {
                                        for(int k=dsections.at(j)->getdspieces().size()-1; k>=0; k--)
                                        {
                                            for(int m=0; m<=trackpieces.size()-1; m++)
                                            {
                                                if(trackpieces.at(m)->getPos() == dsections.at(j)->getdspieces().at(k))
                                                {
                                                    isEndConn = 1;
                                                    getPossPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType());
                                                    setDSConnPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType(),j);
                                                    m=trackpieces.size()+1;
                                                    k=-1;
                                                    qDebug()<<"Remake Connection A - Point C";
                                                }
                                            }
                                        }
                                    }

                                    if(dsections.at(j)->getconnB()==dsections.at(i)->getds())
                                    {
                                        for(int k=dsections.at(j)->getdspieces().size()-1; k>=0; k--)
                                        {
                                            for(int m=0; m<=trackpieces.size()-1; m++)
                                            {
                                                if(trackpieces.at(m)->getPos() == dsections.at(j)->getdspieces().at(k))
                                                {
                                                    isEndConn = 1;
                                                    getPossPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType());
                                                    setDSConnPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType(),j);
                                                    m=trackpieces.size()+1;
                                                    k=-1;
                                                    qDebug()<<"Remake Connection A - Point B";
                                                }
                                            }
                                        }
                                    }
                                    if(dsections.at(j)->getconnA() == dsections.at(i)->getds())
                                    {
                                        for(int k=0; k<=dsections.at(j)->getdspieces().size()-1; k++)
                                        {
                                            for(int m=0; m<=trackpieces.size()-1; m++)
                                            {
                                                if(trackpieces.at(m)->getPos() == dsections.at(j)->getdspieces().at(k))
                                                {
                                                    isEndConn = 2;
                                                    getPossPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType());
                                                    setDSConnPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType(),j);
                                                    m=trackpieces.size()+1;
                                                    k=dsections.at(j)->getdspieces().size()+1;
                                                    qDebug()<<"Remake Connection A - Point A";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if(dsections.at(i)->getconnB()!="NULL")
                    {
                        if(dsections.at(i)->getconnB().at(0)!='(')
                        {
                            for(int j=0; j<=dsections.size()-1; j++)
                            {
                                if(dsections.at(j)->getds() == dsections.at(i)->getconnB())
                                {


                                    if(dsections.at(j)->getconnC()==dsections.at(i)->getds())
                                    {
                                        for(int k=dsections.at(j)->getdspieces().size()-1; k>=0; k--)
                                        {
                                            for(int m=0; m<=trackpieces.size()-1; m++)
                                            {
                                                if(trackpieces.at(m)->getPos() == dsections.at(j)->getdspieces().at(k))
                                                {
                                                    isEndConn = 1;
                                                    getPossPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType());
                                                    setDSConnPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType(),j);
                                                    m=trackpieces.size()+1;
                                                    k=-1;
                                                    qDebug()<<"Remake Connection B - Point C";
                                                }
                                            }
                                        }
                                    }

                                    if(dsections.at(j)->getconnB()==dsections.at(i)->getds())
                                    {
                                        for(int k=dsections.at(j)->getdspieces().size()-1; k>=0; k--)
                                        {
                                            for(int m=0; m<=trackpieces.size()-1; m++)
                                            {
                                                if(trackpieces.at(m)->getPos() == dsections.at(j)->getdspieces().at(k))
                                                {
                                                    isEndConn = 1;
                                                    getPossPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType());
                                                    setDSConnPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType(),j);
                                                    m=trackpieces.size()+1;
                                                    k=-1;
                                                    qDebug()<<"Remake Connection B - Point B";
                                                }
                                            }
                                        }
                                    }
                                    if(dsections.at(j)->getconnA() == dsections.at(i)->getds())
                                    {
                                        for(int k=0; k<=dsections.at(j)->getdspieces().size()-1; k++)
                                        {
                                            for(int m=0; m<=trackpieces.size()-1; m++)
                                            {
                                                if(trackpieces.at(m)->getPos() == dsections.at(j)->getdspieces().at(k))
                                                {
                                                    isEndConn = 2;
                                                    getPossPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType());
                                                    setDSConnPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType(),j);
                                                    m=trackpieces.size()+1;
                                                    k=dsections.at(j)->getdspieces().size()+1;
                                                    qDebug()<<"Remake Connection B - Point A";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }


                    if(dsections.at(i)->getconnC()!="NULL")
                    {
                        if(dsections.at(i)->getconnC().at(0)!='(')
                        {
                            for(int j=0; j<=dsections.size()-1; j++)
                            {
                                if(dsections.at(j)->getds() == dsections.at(i)->getconnC())
                                {


                                    if(dsections.at(j)->getconnC()==dsections.at(i)->getds())
                                    {
                                        for(int k=dsections.at(j)->getdspieces().size()-1; k>=0; k--)
                                        {
                                            for(int m=0; m<=trackpieces.size()-1; m++)
                                            {
                                                if(trackpieces.at(m)->getPos() == dsections.at(j)->getdspieces().at(k))
                                                {
                                                    isEndConn = 1;
                                                    getPossPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType());
                                                    setDSConnPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType(),j);
                                                    m=trackpieces.size()+1;
                                                    k=-1;
                                                    qDebug()<<"Remake Connection C - Point C";
                                                }
                                            }
                                        }
                                    }

                                    if(dsections.at(j)->getconnB()==dsections.at(i)->getds())
                                    {
                                        for(int k=dsections.at(j)->getdspieces().size()-1; k>=0; k--)
                                        {
                                            for(int m=0; m<=trackpieces.size()-1; m++)
                                            {
                                                if(trackpieces.at(m)->getPos() == dsections.at(j)->getdspieces().at(k))
                                                {
                                                    isEndConn = 1;
                                                    getPossPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType());
                                                    setDSConnPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType(),j);
                                                    m=trackpieces.size()+1;
                                                    k=-1;
                                                    qDebug()<<"Remake Connection C - Point B";
                                                }
                                            }
                                        }
                                    }
                                    if(dsections.at(j)->getconnA() == dsections.at(i)->getds())
                                    {
                                        for(int k=0; k<=dsections.at(j)->getdspieces().size()-1; k++)
                                        {
                                            for(int m=0; m<=trackpieces.size()-1; m++)
                                            {
                                                if(trackpieces.at(m)->getPos() == dsections.at(j)->getdspieces().at(k))
                                                {
                                                    isEndConn = 2;
                                                    getPossPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType());
                                                    setDSConnPoints(trackpieces.at(m)->getPos(),trackpieces.at(m)->getTrackType(),j);
                                                    m=trackpieces.size()+1;
                                                    k=dsections.at(j)->getdspieces().size()+1;
                                                    qDebug()<<"Remake Connection C - Point A";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



                    //remove graphics of detection section
                    gridscene->dsections.remove(i);
                    //remove detection section from tables
                    tptable->removeColumn((dsections.size()-1)-i);
                    ctable->removeRow(i);
                    //remove detection section from array
                    dsections.remove(i);
                    //exit for loop
                    i = dsections.size()+1;
                }
            }
        }

    }
}

void MainWindow::newMainDS()
{   dsExists = 0;

    if(!newDSLineEdit->text().isEmpty())
    {
        if(!dsections.isEmpty())
        {
            for(int i=0; i<=dsections.size()-1; i++)
            {
                if(newDSLineEdit->text()==dsections.at(i)->getds())
                {
                    dsExists = 1;
                }
            }
        }
        QChar qchar = newDSLineEdit->text().at(0);
        if(qchar=='(')
            errorDSLabel->setText("Cannot start DS with a '('");
        else if(dsExists)
            errorDSLabel->setText(newDSLineEdit->text()+" Already Exists");
        else
        {
            dsAddedCross = 0;
            dsCrossPos = nullPoint;
            clearToolSelected();
            errorDSLabel->clear();
            newDSName =  newDSLineEdit->text();
            newDSLineEdit->clear();

            newDSBox->setVisible(false);
            saveDSBox->setVisible(true);

            DetectionSection *ds = new DetectionSection; //Make new DS
            ds->setds(newDSName);
            ds->setdscolor(getColor(QColor(255,255,255)));
            dsections.append(ds); //Add DS to the vector of detection sections
            DetectionSection *gds = new DetectionSection; //Make new grid DS
            gds->setds(newDSName);
            gds->setdscolor(getColor(QColor(255,255,255)));
            gridscene->dsections.append(gds);

            createNewDS(); //update Table

            pieceCounter = 0;
            isEndConn = 0;

            tpDock->setHidden(false);

            tpTabWidget->setTabEnabled(0,true);
            tpTabWidget->setTabEnabled(1,true);
            tpTabWidget->setTabEnabled(2,true);
            tpTabWidget->setTabEnabled(3,true);
            tpTabWidget->setTabEnabled(4,true);
            tpTabWidget->setTabEnabled(5,true);
            tpTabWidget->setTabEnabled(6,false);

            /******************************************** STRAIGHT TOOLBAR *********************************************/
            Straight1ToolButton->setHidden(false);
            Straight2ToolButton->setHidden(false);

            /******************************************** BUMPER TOOLBAR *********************************************/
            Bumper3ToolButton->setHidden(false);
            Bumper4ToolButton->setHidden(false);
            Bumper5ToolButton->setHidden(false);
            Bumper6ToolButton->setHidden(false);
            Bumper8ToolButton->setHidden(false);
            Bumper7ToolButton->setHidden(false);
            Bumper10ToolButton->setHidden(false);
            Bumper9ToolButton->setHidden(false);

            /******************************************** CROSS TOOLBAR *********************************************/
            Cross11ToolButton->setHidden(false);
            Cross12ToolButton->setHidden(false);
            Cross13ToolButton->setHidden(false);
            Cross14ToolButton->setHidden(false);
            Cross15ToolButton->setHidden(false);
            Cross16ToolButton->setHidden(false);

            /******************************************** CURVED TOOLBAR *********************************************/
            Curve17ToolButton->setHidden(false);
            Curve18ToolButton->setHidden(false);
            Curve19ToolButton->setHidden(false);
            Curve20ToolButton->setHidden(false);
            Curve21ToolButton->setHidden(false);
            Curve22ToolButton->setHidden(false);
            Curve23ToolButton->setHidden(false);
            Curve24ToolButton->setHidden(false);

            /******************************************** DIAGONAL TOOLBAR *********************************************/
            Diagonal25ToolButton->setHidden(false);
            Diagonal26ToolButton->setHidden(false);

            /******************************************** SWITCH TOOLBAR *********************************************/
            Switch27ToolButton->setHidden(false);
            Switch28ToolButton->setHidden(false);
            Switch29ToolButton->setHidden(false);
            Switch30ToolButton->setHidden(false);
            Switch31ToolButton->setHidden(false);
            Switch32ToolButton->setHidden(false);
            Switch33ToolButton->setHidden(false);
            Switch34ToolButton->setHidden(false);
            Switch35ToolButton->setHidden(false);
            Switch36ToolButton->setHidden(false);
            Switch37ToolButton->setHidden(false);
            Switch38ToolButton->setHidden(false);
            Switch39ToolButton->setHidden(false);
            Switch40ToolButton->setHidden(false);
            Switch41ToolButton->setHidden(false);
            Switch42ToolButton->setHidden(false);

            DSidEdit->clearFocus();
        }
    }


}

void MainWindow::saveMainDS()
{
    if(pieceCounter>1) //makes sure ds can only be saved if there are two pieces or more in the ds
    {
        saveDSBox->setVisible(false);
        newDSBox->setVisible(true);

        tpTabWidget->setTabEnabled(0,false);
        tpTabWidget->setTabEnabled(1,false);
        tpTabWidget->setTabEnabled(2,false);
        tpTabWidget->setTabEnabled(3,false);
        tpTabWidget->setTabEnabled(4,false);
        tpTabWidget->setTabEnabled(5,false);
        tpTabWidget->setTabEnabled(6,true);

        if(prevConn==2)
        {
            if(addCross)
            {
                isEndConn = 0;
                getPossPoints(crossPosition, crossType);
                setDSConnPoints(currentPos, crossType, dsections.size()-1);
            }
            else
            {
                isEndConn = 1;
                setDSConnPoints(currentPos, firstPieceType, dsections.size()-1);
            }
        }

    }
    else if(pieceCounter==-2)//starting ds with switch
    {
        saveDSBox->setVisible(false);
        newDSBox->setVisible(true);

        tpTabWidget->setTabEnabled(0,false);
        tpTabWidget->setTabEnabled(1,false);
        tpTabWidget->setTabEnabled(2,false);
        tpTabWidget->setTabEnabled(3,false);
        tpTabWidget->setTabEnabled(4,false);
        tpTabWidget->setTabEnabled(5,false);
        tpTabWidget->setTabEnabled(6,true);

        isEndConn = 0;
        setDSConnPoints(lastPos, firstPieceType, dsections.size()-1);

    }
    else if(pieceCounter==-3)//ending ds with switch
    {
        saveDSBox->setVisible(false);
        newDSBox->setVisible(true);

        tpTabWidget->setTabEnabled(0,false);
        tpTabWidget->setTabEnabled(1,false);
        tpTabWidget->setTabEnabled(2,false);
        tpTabWidget->setTabEnabled(3,false);
        tpTabWidget->setTabEnabled(4,false);
        tpTabWidget->setTabEnabled(5,false);
        tpTabWidget->setTabEnabled(6,true);

        setDSConnPoints(lastPos, firstPieceType, dsections.size()-1);

    }


    if((pieceCounter>1)|(pieceCounter==-2)|(pieceCounter==-3))
    {
        DSidEdit->clearFocus();
        pieceCounter = -1;
        possPointA = nullPoint;
        possPointB = nullPoint;
        possPointC = nullPoint;
        possPointD = nullPoint;
        gridscene->setPossPointA(possPointA); //send possible positions to gridscene to paint those positions a new color
        gridscene->setPossPointB(possPointB);
        gridscene->setPossPointC(possPointC);
        gridscene->setPossPointD(possPointD);


        // //////////////////////////////// SAVE CURRENT PROGRESS TO TEMP FILE /////////////////////////////

        QString sdata;
        //QByteArray data;

        // //////////////////////// SAVE TRACKPIECES //////////////////////////

        sdata = QString::number(trackpieces.size());
        sdata.append("#");
         for(int i = 0; i <= trackpieces.size()-1; i++)
         {
             sdata.append(QString::number(trackpieces.at(i)->getTrackType()));
             sdata.append(":");
             sdata.append(QString::number(trackpieces.at(i)->getPos().x()));
             sdata.append(",");
             sdata.append(QString::number(trackpieces.at(i)->getPos().y()));
             sdata.append("*");
             sdata.append(trackpieces.at(i)->getDS());
             sdata.append("^");
             sdata.append(trackpieces.at(i)->getSwitchID());
             sdata.append(";");
         }
         sdata.append('\n');


          // //////////////////////// SAVE DSECTIONS //////////////////////////

          sdata.append(QString::number(dsections.size()));
          sdata.append("#");

           for(int i = 0; i <= dsections.size()-1; i++)
           {
               sdata.append(dsections.at(i)->getds());
               sdata.append(":");

               for(int j=0; j<=dsections.at(i)->getdspieces().size()-1; j++)
               {
                   sdata.append(QString::number(dsections.at(i)->getdspieces().at(j).x()));
                   sdata.append(",");
                   sdata.append(QString::number(dsections.at(i)->getdspieces().at(j).y()));
                   sdata.append("@");
               }
               sdata.append("$");
               sdata.append(dsections.at(i)->getconnA());
               sdata.append("%");
               sdata.append(dsections.at(i)->getconnB());
               sdata.append("&");
               sdata.append(dsections.at(i)->getconnC());
               sdata.append(";");
           }
           sdata.append('\n');

           // //////////////////////// SAVE CONNPOINTS //////////////////////////

           sdata.append(QString::number(connPoints.size()));
           sdata.append("#");

            for(int i = 0; i <= connPoints.size()-1; i++)
            {
                sdata.append(QString::number(connPoints.at(i)->getTrackType()));
                sdata.append(":");
                sdata.append(QString::number(connPoints.at(i)->getPos().x()));
                sdata.append(",");
                sdata.append(QString::number(connPoints.at(i)->getPos().y()));
                sdata.append("*");
                sdata.append(connPoints.at(i)->getDS());
                sdata.append("$");
                sdata.append(connPoints.at(i)->getconnA());
                sdata.append("%");
                sdata.append(connPoints.at(i)->getconnB());
                sdata.append("&");
                sdata.append(connPoints.at(i)->getconnC());
                sdata.append(";");
            }
            sdata.append('\n');


         data = sdata.toUtf8();

         qDebug()<<"Saving layout now";

             QString filename = "UntitledLayout.ll";

             QFile layoutFile(filename);

             if(!layoutFile.open(QIODevice::WriteOnly))
             {
                 qDebug()<<"Error -- unable to open file for output";
                 return;
             }
             else
             {
                 qDebug()<<"File opened for output";
             }

             if(layoutFile.write(data))
             {
                 qDebug()<<"Layout saved to file: "<<filename;
                 statusLabel->setText(filename);
                 view->setLayoutName(filename);
             }
             else
                 qDebug()<<"Error -- unable to save layout to file";

             layoutFile.close();
    }

}

QColor MainWindow::getColor(QColor mix)
{
    //the random device that will seed the generator
    std::random_device seeder;
    //then make a mersenne twister engine
    std::mt19937 engine(seeder());
    //then the easy part... the distribution
    //std::uniform_int_distribution<int> dist(0, 255); //(inclusive, inclusive)
    std::uniform_int<int> dist(0, 255);
    //then just generate the integer like this:
    int red = dist(engine);
    int green = dist(engine);
    int blue = dist(engine);

        // mix the color
        if (mix.isValid())
        {
            red = (red + mix.red()) / 2;
            green = (green + mix.green()) / 2;
            blue = (blue + mix.blue()) / 2;
        }

        QColor color;
        color.setRed(red);
        color.setGreen(green);
        color.setBlue(blue);
        return color;
}

void MainWindow::hitACross(QPointF prevPos, QPointF crossPos, int trackType)
{

    switch(trackType)
    {
    case 11:
                if((prevPos.x() == crossPos.x()-50)&(prevPos.y() == crossPos.y()-50))
                {
                    possPointB.setX(crossPos.x()+50);
                    possPointB.setY(crossPos.y()+50);
                }
                if((prevPos.x() == crossPos.x()+50)&(prevPos.y() == crossPos.y()+50))
                {
                    possPointA.setX(crossPos.x()-50);
                    possPointA.setY(crossPos.y()-50);
                }
                if((prevPos.x() == crossPos.x()-50)&(prevPos.y() == crossPos.y()+50))
                {
                    possPointD.setX(crossPos.x()+50);
                    possPointD.setY(crossPos.y()-50);
                }
                if((prevPos.x() == crossPos.x()+50)&(prevPos.y() == crossPos.y()-50))
                {
                    possPointC.setX(crossPos.x()-50);
                    possPointC.setY(crossPos.y()+50);
                }

                break;
            case 12:
                if((prevPos.x() == crossPos.x()-50)&(prevPos.y() == crossPos.y()-50))
                {
                    possPointA.setX(crossPos.x()+50);
                    possPointA.setY(crossPos.y()+50);
                }
                if((prevPos.x() == crossPos.x()+50)&(prevPos.y() == crossPos.y()+50))
                {
                    possPointC.setX(crossPos.x()-50);
                    possPointC.setY(crossPos.y()-50);
                }
                if((prevPos.x() == crossPos.x()-50)&(prevPos.y() == crossPos.y()))
                {
                    possPointB.setX(crossPos.x()+50);
                    possPointB.setY(crossPos.y());
                }
                if((prevPos.x() == crossPos.x()+50)&(prevPos.y() == crossPos.y()))
                {
                    possPointD.setX(crossPos.x()-50);
                    possPointD.setY(crossPos.y());
                }

            break;
            case 13:
                if((prevPos.x() == crossPos.x()+50)&(prevPos.y() == crossPos.y()-50))
                {
                    possPointA.setX(crossPos.x()-50);
                    possPointA.setY(crossPos.y()+50);
                }
                if((prevPos.x() == crossPos.x()-50)&(prevPos.y() == crossPos.y()+50))
                {
                    possPointC.setX(crossPos.x()+50);
                    possPointC.setY(crossPos.y()-50);
                }
                if((prevPos.x() == crossPos.x()-50)&(prevPos.y() == crossPos.y()))
                {
                    possPointB.setX(crossPos.x()+50);
                    possPointB.setY(crossPos.y());
                }
                if((prevPos.x() == crossPos.x()+50)&(prevPos.y() == crossPos.y()))
                {
                    possPointD.setX(crossPos.x()-50);
                    possPointD.setY(crossPos.y());
                }

            break;
            case 14:
                if((prevPos.x() == crossPos.x()-50)&(prevPos.y() == crossPos.y()-50))
                {
                    possPointA.setX(crossPos.x()+50);
                    possPointA.setY(crossPos.y()+50);
                }
                if((prevPos.x() == crossPos.x()+50)&(prevPos.y() == crossPos.y()+50))
                {
                    possPointC.setX(crossPos.x()-50);
                    possPointC.setY(crossPos.y()-50);
                }
                if((prevPos.x() == crossPos.x())&(prevPos.y() == crossPos.y()-50))
                {
                    possPointB.setX(crossPos.x());
                    possPointB.setY(crossPos.y()+50);
                }
                if((prevPos.x() == crossPos.x())&(prevPos.y() == crossPos.y()+50))
                {
                    possPointD.setX(crossPos.x());
                    possPointD.setY(crossPos.y()-50);
                }

            break;
            case 15:
                if((prevPos.x() == crossPos.x())&(prevPos.y() == crossPos.y()-50))
                {
                    possPointA.setX(crossPos.x());
                    possPointA.setY(crossPos.y()+50);
                }
                if((prevPos.x() == crossPos.x())&(prevPos.y() == crossPos.y()+50))
                {
                    possPointC.setX(crossPos.x());
                    possPointC.setY(crossPos.y()-50);
                }
                if((prevPos.x() == crossPos.x()+50)&(prevPos.y() == crossPos.y()-50))
                {
                    possPointB.setX(crossPos.x()-50);
                    possPointB.setY(crossPos.y()+50);
                }
                if((prevPos.x() == crossPos.x()-50)&(prevPos.y() == crossPos.y()+50))
                {
                    possPointD.setX(crossPos.x()+50);
                    possPointD.setY(crossPos.y()-50);
                }

            break;
            case 16:
                if((prevPos.x() == crossPos.x())&(prevPos.y() == crossPos.y()-50))
                {
                    possPointA.setX(crossPos.x());
                    possPointA.setY(crossPos.y()+50);
                }
                if((prevPos.x() == crossPos.x())&(prevPos.y() == crossPos.y()+50))
                {
                    possPointC.setX(crossPos.x());
                    possPointC.setY(crossPos.y()-50);
                }
                if((prevPos.x() == crossPos.x()+50)&(prevPos.y() == crossPos.y()))
                {
                    possPointB.setX(crossPos.x()-50);
                    possPointB.setY(crossPos.y());
                }
                if((prevPos.x() == crossPos.x()-50)&(prevPos.y() == crossPos.y()))
                {
                    possPointD.setX(crossPos.x()+50);
                    possPointD.setY(crossPos.y());
                }
            break;
        default:
            break;
    }
}

void MainWindow::editDS()
{

    toolSelected = 6969;
    gridscene->setToolSelected(6969);


    QDialog* dialog = new QDialog(this);
    dialog->setModal(false);
    QVBoxLayout* mainLayout = new QVBoxLayout;

    QLabel* title = new QLabel("Detection Sections");
    mainLayout->addWidget(title);

    QHBoxLayout* dsButtonLayout = new QHBoxLayout;
    QPushButton* saveDSPushButton = new QPushButton("Save Detection Section");
    QPushButton* newDSPushButton = new QPushButton("New Detection Section");
    QPushButton* delDSPushButton = new QPushButton("Delete Detection Section");
    dsButtonLayout->addWidget(saveDSPushButton);
    dsButtonLayout->addWidget(newDSPushButton);
    dsButtonLayout->addWidget(delDSPushButton);
    mainLayout->addLayout(dsButtonLayout);
    mainLayout->addWidget(tptable);

    QLabel* title2 = new QLabel("Detection Section Connections");
    mainLayout->addWidget(title2);

    QHBoxLayout* conButtonLayout = new QHBoxLayout;
    QPushButton* editConPushButton = new QPushButton("Edit DS Connection");
    conButtonLayout->addWidget(editConPushButton);
    mainLayout->addLayout(conButtonLayout);
    mainLayout->addWidget(ctable);

    QHBoxLayout* buttonLayout = new QHBoxLayout;
    QPushButton* closePushButton = new QPushButton("Close");
    buttonLayout->addWidget(closePushButton);
    mainLayout->addLayout(buttonLayout);

    dialog->setLayout(mainLayout);


    // Used for when importing detections sections from file
    if(!dsections.isEmpty())
    {
        QString cstring;
        tptable->setColumnCount(dsections.size());

        for(int i=0; i<= dsections.size()-1; i++)
        {
            tptable->setHorizontalHeaderItem(i, new QTableWidgetItem(dsections.at(i)->getds()));
            ctable->setRowCount(tptable->columnCount());
            ctable->setVerticalHeaderItem(i, new QTableWidgetItem(dsections.at(i)->getds()));
            ctable->setItem(i,0, new QTableWidgetItem(dsections.at(i)->getconnA()));
            ctable->setItem(i,1, new QTableWidgetItem(dsections.at(i)->getconnB()));
            ctable->setItem(i,2, new QTableWidgetItem(dsections.at(i)->getconnC()));


            if(!dsections.at(i)->getdspieces().isEmpty())
            {
                if(tptable->rowCount()<dsections.at(i)->getdspieces().size())
                {
                    tptable->setRowCount(dsections.at(i)->getdspieces().size());
                }

                for(int j=0; j<= dsections.at(i)->getdspieces().size()-1; j++)
                {
                    cstring = "(";
                    cstring.append(QString::number(dsections.at(i)->getdspieces().at(j).x()/50));
                    cstring.append(",");
                    cstring.append(QString::number(dsections.at(i)->getdspieces().at(j).y()/50));
                    cstring.append(")");
                    tptable->setItem(i,j, new QTableWidgetItem(cstring));
                }
            }
        }
    }

    connect(dialog,SIGNAL(finished(int)),this,SLOT(clearToolSelected()));
    connect(closePushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
    connect(newDSPushButton,SIGNAL(clicked()), this, SLOT(newDSWindow()));
    connect(saveDSPushButton,SIGNAL(clicked()),this,SLOT(saveDS()));
    dialog->show();

}

void MainWindow::addItemToDS(QPointF pos)
{
    QString spos;
    spos = " (";
    spos.append(QString::number(pos.x()/50));
    spos.append(",");
    spos.append(QString::number(pos.y()/50));
    spos.append(")");
    if(!dsections.isEmpty())//if((!dsections.isEmpty())&(!DSsaved))
    {
        if(tptable->selectedItems().isEmpty())  //if no selection in table, add piece to end of column
        {
            if(tptable->rowCount()==0)  //if empty DS
            {
                tptable->setRowCount(1);
                tptable->setItem(0,0, new QTableWidgetItem(spos));      //update table
                //dsections.at(dsections.size()-1)->appenddspieces(pos);  //update DS vector

                for(int i=0; i<=trackpieces.size()-1; i++)              //update track piece
                {
                    if(trackpieces.at(i)->getPos()==pos)
                    {
                        trackpieces.at(i)->setDS(tptable->horizontalHeaderItem(0)->text());

                    }
                }


            }
            else    //if DS is not empty
            {
                if(tptable->rowCount()<=dsections.at(dsections.size()-1)->getdspieces().size()-1) //if not enough rows add one
                {
                    tptable->insertRow(tptable->rowCount());
                }

                int dssize;
                for(int i=0; i<=dsections.size()-1; i++)    //get the index of the last piece in the DS
                {
                    if(dsections.at(i)->getds()==tptable->horizontalHeaderItem(0)->text())
                    {
                        dssize = dsections.at(i)->getdspieces().size();
                    }
                }

                tptable->setItem(dssize-1,0, new QTableWidgetItem(spos));    //update table
                //dsections.at(dsections.size()-1)->appenddspieces(pos);     //update DS vector

                for(int i=0; i<=trackpieces.size()-1; i++)              //update track piece
                {
                    if(trackpieces.at(i)->getPos()==pos)
                    {
                        trackpieces.at(i)->setDS(tptable->horizontalHeaderItem(0)->text());

                    }
                }


            }

        }
        else    //if selection in table, update selected
        {
            dsections.at(dsections.size()-1)->setdspiece(pos,tptable->selectedItems().at(0)->row());    //update DS vector
            tptable->selectedItems().at(0)->setText(spos);      //update table

            for(int i=0; i<=trackpieces.size()-1; i++)              //update track piece
            {
                if(trackpieces.at(i)->getPos()==pos)
                {
                    trackpieces.at(i)->setDS(tptable->horizontalHeaderItem(0)->text());

                }
            }


        }
    }
}

void MainWindow::newDSWindow()
{
    QDialog* dialog = new QDialog;
    QVBoxLayout* mainLayout = new QVBoxLayout;
    QPushButton* closePushButton = new QPushButton("Set Name");
    QLabel* aboutTitle = new QLabel("Detection Section Name:");
    aboutTitle->setTextFormat(Qt::RichText);
    QLineEdit* dsNameLineEdit = new QLineEdit;

    dialog->setLayout(mainLayout);
    mainLayout->addWidget(aboutTitle);
    mainLayout->addSpacing(2);
    mainLayout->addWidget(dsNameLineEdit);
    mainLayout->addWidget(closePushButton);
    connect(dsNameLineEdit, SIGNAL(textChanged(QString)),this,SLOT(setDSName(QString)));
    connect(closePushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
    connect(closePushButton, SIGNAL(clicked()), this, SLOT(createNewDS()));
    dialog->exec();
}

void MainWindow::setDSName(QString dsName)
{
    newDSName = dsName;
}

void MainWindow::setSwitchID(QString switchName)
{
    switchID = switchName;
}

void MainWindow::saveDS()
{
    if(!dsections.isEmpty())
    {
        int dssize;
        for(int i=0; i<=dsections.size()-1; i++)
        {
            if(dsections.at(i)->getds()==tptable->horizontalHeaderItem(0)->text())
            {
                dssize = dsections.at(i)->getdspieces().size();
            }
        }
        for(int i=0; i<=dssize-1; i++)
        {
            Qt::ItemFlags eFlags = tptable->item(i,0)->flags();
            eFlags &= ~Qt::ItemIsEditable;
            eFlags &= ~Qt::ItemIsSelectable;
            tptable->item(i,0)->setFlags(eFlags);
        }
    }
    //DSsaved = 1;
}

void MainWindow::createNewDS()
{
    //DSsaved = 0;
    //DetectionSection *ds = new DetectionSection; //Make new DS
    //ds->setds(newDSName); //Set name of DS to user input

    //dsections.append(ds); //Add DS to the vector of detection sections

    if(tptable->columnCount()==0)
    {
        tptable->setColumnCount(1);
        tptable->setHorizontalHeaderItem(0, new QTableWidgetItem(newDSName));

        ctable->setRowCount(1);
        ctable->setVerticalHeaderItem(0, new QTableWidgetItem(dsections.at(0)->getds()));
        ctable->setItem(0,0, new QTableWidgetItem(dsections.at(0)->getconnA()));
        ctable->setItem(0,1, new QTableWidgetItem(dsections.at(0)->getconnB()));
        ctable->setItem(0,2, new QTableWidgetItem(dsections.at(0)->getconnC()));
    }
    else
    {
        tptable->insertColumn(0);
        tptable->setHorizontalHeaderItem(0, new QTableWidgetItem(newDSName));


        /*int dssize;
        for(int i=0; i<=dsections.size()-1; i++)
        {
            if(dsections.at(i)->getds()==tptable->horizontalHeaderItem(1)->text())
            {
                dssize = dsections.at(i)->getdspieces().size();
            }
        }

        for(int i=0; i<=dssize-1; i++)
        {
            Qt::ItemFlags eFlags = tptable->item(i,1)->flags();
            eFlags &= ~Qt::ItemIsEditable;
            eFlags &= ~Qt::ItemIsSelectable;
            tptable->item(i,1)->setFlags(eFlags);
        }*/


        ctable->setRowCount(tptable->columnCount());
        ctable->setVerticalHeaderItem(dsections.size()-1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
        ctable->setItem(dsections.size()-1,0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getconnA()));
        ctable->setItem(dsections.size()-1,1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getconnB()));
        ctable->setItem(dsections.size()-1,2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getconnC()));


    }

   //endDSDialog();

}

void MainWindow::endDSDialog()
{
    //Pop up dialogs for Start/End A/B/C information
    /*QDialog* dialog = new QDialog;
    dialog->setModal(false);
    QVBoxLayout* mainLayout = new QVBoxLayout;
    QPushButton* closePushButton = new QPushButton("Set End");
    QLabel* aboutTitle = new QLabel("End Branches of Detection Section:");
    aboutTitle->setTextFormat(Qt::RichText);
    //QRadioButton*

    dialog->setLayout(mainLayout);
    mainLayout->addWidget(aboutTitle);
    mainLayout->addSpacing(2);
    mainLayout->addWidget(dsNameLineEdit);
    mainLayout->addWidget(closePushButton);
    connect(dsNameLineEdit, SIGNAL(textChanged(QString)),this,SLOT(setDSName(QString)));
    connect(closePushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
    connect(closePushButton, SIGNAL(clicked()), this, SLOT(createNewDS()));
    dialog->exec();*/

}

void MainWindow::startDSDialog()
{

}

// Used for saving a layout file. It takes all track pieces stored in the array that holds the current track pieces on the grid
// and breaks up the information contained in each object one by one
// and stores that information to a file.


void MainWindow::saveAsLayout()
{
    if(pieceCounter==-1)
    {
        if(!trackpieces.isEmpty())
        {

            // //////////////////////////////// SAVE CURRENT PROGRESS TO TEMP FILE /////////////////////////////

            QString sdata;
            //QByteArray data;

            // //////////////////////// SAVE TRACKPIECES //////////////////////////

            sdata = QString::number(trackpieces.size());
            sdata.append("#");
             for(int i = 0; i <= trackpieces.size()-1; i++)
             {
                 sdata.append(QString::number(trackpieces.at(i)->getTrackType()));
                 sdata.append(":");
                 sdata.append(QString::number(trackpieces.at(i)->getPos().x()));
                 sdata.append(",");
                 sdata.append(QString::number(trackpieces.at(i)->getPos().y()));
                 sdata.append("*");
                 sdata.append(trackpieces.at(i)->getDS());
                 sdata.append("^");
                 sdata.append(trackpieces.at(i)->getSwitchID());
                 sdata.append(";");
             }
             sdata.append('\n');


              // //////////////////////// SAVE DSECTIONS //////////////////////////

              sdata.append(QString::number(dsections.size()));
              sdata.append("#");

               for(int i = 0; i <= dsections.size()-1; i++)
               {
                   sdata.append(dsections.at(i)->getds());
                   sdata.append(":");

                   for(int j=0; j<=dsections.at(i)->getdspieces().size()-1; j++)
                   {
                       sdata.append(QString::number(dsections.at(i)->getdspieces().at(j).x()));
                       sdata.append(",");
                       sdata.append(QString::number(dsections.at(i)->getdspieces().at(j).y()));
                       sdata.append("@");
                   }
                   sdata.append("$");
                   sdata.append(dsections.at(i)->getconnA());
                   sdata.append("%");
                   sdata.append(dsections.at(i)->getconnB());
                   sdata.append("&");
                   sdata.append(dsections.at(i)->getconnC());
                   sdata.append(";");
               }
               sdata.append('\n');

               // //////////////////////// SAVE CONNPOINTS //////////////////////////

               sdata.append(QString::number(connPoints.size()));
               sdata.append("#");

                for(int i = 0; i <= connPoints.size()-1; i++)
                {
                    sdata.append(QString::number(connPoints.at(i)->getTrackType()));
                    sdata.append(":");
                    sdata.append(QString::number(connPoints.at(i)->getPos().x()));
                    sdata.append(",");
                    sdata.append(QString::number(connPoints.at(i)->getPos().y()));
                    sdata.append("*");
                    sdata.append(connPoints.at(i)->getDS());
                    sdata.append("$");
                    sdata.append(connPoints.at(i)->getconnA());
                    sdata.append("%");
                    sdata.append(connPoints.at(i)->getconnB());
                    sdata.append("&");
                    sdata.append(connPoints.at(i)->getconnC());
                    sdata.append(";");
                }
                sdata.append('\n');

             data = sdata.toUtf8();


            QString filename = QFileDialog::getSaveFileName(this,tr("Save File"),"/",tr("LocoLayout (*.ll)"),0,QFileDialog::DontUseNativeDialog);

             QFile layoutFile(filename);

             if(layoutFile.exists())
             {
                 qDebug()<<"Error -- file already exists";
                 return;
             }
             else if(!layoutFile.open(QIODevice::WriteOnly))
             {
                 qDebug()<<"Error -- unable to open file for output";
                 return;
             }
             else
             {
                 qDebug()<<"File opened for output";
                 layoutFileName = filename;
             }

             if(layoutFile.write(data))
             {
                 qDebug()<<"Layout saved to file: "<<filename;
                 statusLabel->setText(filename);
                 view->setLayoutName(filename);
             }
             else
                 qDebug()<<"Error -- unable to save layout to file";

             layoutFile.close();


         }
         else
            statusLabel->setText("Empty Grid, No Layout to Save.");
    }
    else
        statusLabel->setText("Save Detection Section Before Saving Layout.");
}

void MainWindow::saveLayout()
{
    if(pieceCounter==-1)
    {
        if(!trackpieces.isEmpty())
        {
            // //////////////////////////////// SAVE CURRENT PROGRESS TO TEMP FILE /////////////////////////////

            QString sdata;
            //QByteArray data;

            // //////////////////////// SAVE TRACKPIECES //////////////////////////

            sdata = QString::number(trackpieces.size());
            sdata.append("#");
             for(int i = 0; i <= trackpieces.size()-1; i++)
             {
                 sdata.append(QString::number(trackpieces.at(i)->getTrackType()));
                 sdata.append(":");
                 sdata.append(QString::number(trackpieces.at(i)->getPos().x()));
                 sdata.append(",");
                 sdata.append(QString::number(trackpieces.at(i)->getPos().y()));
                 sdata.append("*");
                 sdata.append(trackpieces.at(i)->getDS());
                 sdata.append("^");
                 sdata.append(trackpieces.at(i)->getSwitchID());
                 sdata.append(";");
             }
             sdata.append('\n');


              // //////////////////////// SAVE DSECTIONS //////////////////////////

              sdata.append(QString::number(dsections.size()));
              sdata.append("#");

               for(int i = 0; i <= dsections.size()-1; i++)
               {
                   sdata.append(dsections.at(i)->getds());
                   sdata.append(":");

                   for(int j=0; j<=dsections.at(i)->getdspieces().size()-1; j++)
                   {
                       sdata.append(QString::number(dsections.at(i)->getdspieces().at(j).x()));
                       sdata.append(",");
                       sdata.append(QString::number(dsections.at(i)->getdspieces().at(j).y()));
                       sdata.append("@");
                   }
                   sdata.append("$");
                   sdata.append(dsections.at(i)->getconnA());
                   sdata.append("%");
                   sdata.append(dsections.at(i)->getconnB());
                   sdata.append("&");
                   sdata.append(dsections.at(i)->getconnC());
                   sdata.append(";");
               }
               sdata.append('\n');

               // //////////////////////// SAVE CONNPOINTS //////////////////////////

               sdata.append(QString::number(connPoints.size()));
               sdata.append("#");

                for(int i = 0; i <= connPoints.size()-1; i++)
                {
                    sdata.append(QString::number(connPoints.at(i)->getTrackType()));
                    sdata.append(":");
                    sdata.append(QString::number(connPoints.at(i)->getPos().x()));
                    sdata.append(",");
                    sdata.append(QString::number(connPoints.at(i)->getPos().y()));
                    sdata.append("*");
                    sdata.append(connPoints.at(i)->getDS());
                    sdata.append("$");
                    sdata.append(connPoints.at(i)->getconnA());
                    sdata.append("%");
                    sdata.append(connPoints.at(i)->getconnB());
                    sdata.append("&");
                    sdata.append(connPoints.at(i)->getconnC());
                    sdata.append(";");
                }
                sdata.append('\n');


             data = sdata.toUtf8();


             if(layoutFileName=="NULL")
             {
                 QString filename = QFileDialog::getSaveFileName(this,tr("Save File"),"/",tr("LocoLayout (*.ll)"),0,QFileDialog::DontUseNativeDialog);

                QFile layoutFile(filename);

                 if(layoutFile.exists())
                 {
                     qDebug()<<"Error -- file already exists";
                     return;
                 }
                 else if(!layoutFile.open(QIODevice::WriteOnly))
                 {
                     qDebug()<<"Error -- unable to open file for output";
                     return;
                 }
                 else
                 {
                     qDebug()<<"File opened for output - Setting layoutFileName";
                     layoutFileName = filename;
                 }

                 if(layoutFile.write(data))
                 {
                     qDebug()<<"Layout saved to file: "<<filename;
                     statusLabel->setText(filename);
                     view->setLayoutName(filename);
                 }
                 else
                     qDebug()<<"Error -- unable to save layout to file";

                 layoutFile.close();
             }
             else
             {
                 QString filename = layoutFileName;

                 QFile layoutFile(filename);

                 if(!layoutFile.open(QIODevice::WriteOnly))
                 {
                     qDebug()<<"Error -- unable to open file for output";
                     return;
                 }
                 else
                 {
                     qDebug()<<"File opened for output";
                 }

                 if(layoutFile.write(data))
                 {
                     qDebug()<<"Layout saved to file: "<<filename;
                     statusLabel->setText(filename);
                     view->setLayoutName(filename);
                 }
                 else
                     qDebug()<<"Error -- unable to save layout to file";

                 layoutFile.close();
             }


         }
         else
            statusLabel->setText("Empty Grid, No Layout to Save.");
    }
    else
        statusLabel->setText("Save Detection Section Before Saving Layout.");

}


// Creates dialog to confirm opening new layout
void MainWindow::loadLayoutCheck()
{
    if(pieceCounter==-1)
    {
        if(gridscene->items().size()>4)
        {
            QDialog* dialog = new QDialog;
            QVBoxLayout* mainLayout = new QVBoxLayout;
            QLabel* loadLayout = new QLabel("Overwrite layout? Current progress will be lost.");
            QPushButton* yesPushButton = new QPushButton("Yes");
            QPushButton* noPushButton = new QPushButton("No");
            QHBoxLayout* buttonLayout = new QHBoxLayout;
            yesPushButton->setMaximumWidth(100);
            noPushButton->setMaximumWidth(100);
            dialog->setLayout(mainLayout);
            mainLayout->addSpacing(10);
            mainLayout->addWidget(loadLayout);
            mainLayout->addSpacing(20);
            buttonLayout->addWidget(yesPushButton);
            buttonLayout->addWidget(noPushButton);
            mainLayout->addLayout(buttonLayout);
            connect(noPushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
            connect(yesPushButton, SIGNAL(clicked()), this, SLOT(loadLayout()));
            connect(yesPushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
            dialog->exec();
        }
        else
        {
            loadLayout();
        }
    }
    else
        statusLabel->setText("Save Detection Section Before Opening Layout.");
}

// Used for loading a layout file. This is what prompts the user to select a file to be read which is then passed to the populateScene function.
void MainWindow::loadLayout()
{


    qDebug()<<"Loading layout now";

    QString filename = QFileDialog::getOpenFileName(this,tr("Open File"),"/",tr("LocoLayout (*.ll)"),0,QFileDialog::DontUseNativeDialog);

    QFile layoutFile(filename);

    if(!layoutFile.exists())
    {
        qDebug()<<"Error -- file does not exist";
        return;
    }
    else if(!layoutFile.open(QIODevice::ReadOnly))
    {
        qDebug()<<"Error -- unable to open file for input";
        return;
    }
    else
    {
        qDebug()<<"File opened for input";
    }

    gridscene->clear(); //delete all graphical components of track pieces
    gridscene->dsections.clear(); //delete all detection sections that hold colors
    gridscene->connPoints.clear();

    trackpieces.clear(); //delete all track pieces
    connPoints.clear(); //delete all connection points
    dsections.clear(); //delete all detection sections


    statusLabel->setText(filename);
    view->setLayoutName(filename);
    QByteArray ba = layoutFile.readAll();
    layoutFile.close();
    QString str(ba);
    populateScene(str);

}

void MainWindow::loadItemOnGrid(int tracktype, QPointF pos)
{
    int x = pos.x();
    int y = pos.y();

    if((tracktype>26)&(tracktype<31))                              //Switches 2x4
    {
        QGraphicsItem *item = new TrackTwoXFour(tracktype, x, y);
        item->setPos(x, y);
        gridscene->addItem(item);
    }
    else if((tracktype>30)&(tracktype<35))                        //Switches 4x2
    {
        QGraphicsItem *item = new TrackFourXTwo(tracktype, x, y);
        item->setPos(x, y);
        gridscene->addItem(item);
    }
    else if((tracktype>34)&(tracktype<43))                        //Switches 2x2
    {
        QGraphicsItem *item = new TrackTwoXTwo(tracktype, x, y);
        item->setPos(x, y);
        gridscene->addItem(item);
    }
    else                                                                //1x1 pieces
    {
        QGraphicsItem *item = new TrackOneXOne(tracktype, x, y);
        item->setPos(x, y);
        gridscene->addItem(item);
    }
}

// Used any time a track piece is added to the grid whether its from user using a tool to place a track piece, pasting track pieces, or loading a layout file.
void MainWindow::addItem(int tracktype, QPointF pos)
{
    int x;
    int y;
    x = pos.x();
    y = pos.y();

    toolSelected = tracktype;
    curConnPointType = 0;
    addCross = 0;

     //If no item at that position already
    if(gridscene->itemAt(pos,QTransform())==0)
    {
        if(pieceCounter==0)
        {
                getPossPoints(pos, toolSelected); // update possible points for piece placed on grid
                //for this piece type, check the possible points to see if they are a previous DS connection point

                //2- no connection pos
                //1- connection pos and pieces match
                //0- connection pos and pieces do not match
                prevConn = isDSConnection(pos, toolSelected);

                if(prevConn==2)
                {
                    badPosFlag = 0;
                    addCross = 0;
                    currentPos = pos;
                }
                else if(prevConn==0)
                {
                    //set bad possition flag to ignore placing piece
                    badPosFlag = 1;
                }
                else if(prevConn==1)
                {
                    addCross = 0;
                }

                if((possPointA!=nullPoint) & ((prevConn==2)))//|(prevConn==1)))
                {
                    if(gridscene->itemAt(possPointA,QTransform())) //if piece is in the possPoint
                    {
                        /*for(int i=0;i<=trackpieces.size()-1;i++)
                        {
                            if(trackpieces.at(i)->getPos()==possPointA)
                            {

                                switch(trackpieces.at(i)->getTrackType())
                                {
                                    case 11:
                                        crossPosition = possPointA;
                                        crossType = 11;
                                        if(curConnPointType!=11)
                                        {
                                            hitACross(pos,possPointA, 11);
                                            addCross = 1;
                                            dsCrossPos = possPointA;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 12:
                                        crossPosition = possPointA;
                                        crossType = 12;
                                        if(curConnPointType!=12)
                                        {
                                            hitACross(pos,possPointA, 12);
                                            addCross = 1;
                                            dsCrossPos = possPointA;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 13:
                                        crossPosition = possPointA;
                                        crossType = 13;
                                        if(curConnPointType!=13)
                                        {
                                            hitACross(pos,possPointA, 13);
                                            addCross = 1;
                                            dsCrossPos = possPointA;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 14:
                                        crossPosition = possPointA;
                                        crossType = 14;
                                        if(curConnPointType!=14)
                                        {
                                            hitACross(pos,possPointA, 14);
                                            addCross = 1;
                                            dsCrossPos = possPointA;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 15:
                                        crossPosition = possPointA;
                                        crossType = 15;
                                        if(curConnPointType!=15)
                                        {
                                            hitACross(pos,possPointA, 15);
                                            addCross = 1;
                                            dsCrossPos = possPointA;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 16:
                                        crossPosition = possPointA;
                                        crossType = 16;
                                        if(curConnPointType!=16)
                                        {
                                            hitACross(pos,possPointA, 16);
                                            addCross = 1;
                                            dsCrossPos = possPointA;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    default:
                                        if(prevConn==2)
                                            badPosFlag = 1;
                                        break;
                                }

                            }
                        }*/badPosFlag = 1;
                    }
                }
                if((possPointB!=nullPoint) & ((prevConn==2)))//|(prevConn==1)))
                {
                    if(gridscene->itemAt(possPointB,QTransform())) //if piece is in the possPoint
                    {
                        /*for(int i=0;i<=trackpieces.size()-1;i++)
                        {
                            if(trackpieces.at(i)->getPos()==possPointB)
                            {
                                switch(trackpieces.at(i)->getTrackType())
                                {
                                    case 11:
                                        crossPosition = possPointB;
                                        crossType = 11;
                                        if(curConnPointType!=11)
                                        {
                                            hitACross(pos,possPointB, 11);
                                            addCross = 1;
                                            dsCrossPos = possPointB;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 12:
                                        crossPosition = possPointB;
                                        crossType = 12;
                                        if(curConnPointType!=12)
                                        {
                                            hitACross(pos,possPointB, 12);
                                            addCross = 1;
                                            dsCrossPos = possPointB;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                    break;
                                        break;
                                    case 13:
                                        crossPosition = possPointB;
                                        crossType = 13;
                                        if(curConnPointType!=13)
                                        {
                                            hitACross(pos,possPointB, 13);
                                            addCross = 1;
                                            dsCrossPos = possPointB;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 14:
                                        crossPosition = possPointB;
                                        crossType = 14;
                                        if(curConnPointType!=14)
                                        {
                                            hitACross(pos,possPointB, 14);
                                            addCross = 1;
                                            dsCrossPos = possPointB;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 15:
                                        crossPosition = possPointB;
                                        crossType = 15;
                                        if(curConnPointType!=15)
                                        {
                                            hitACross(pos,possPointB, 15);
                                            addCross = 1;
                                            dsCrossPos = possPointB;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 16:
                                        crossPosition = possPointB;
                                        crossType = 16;
                                        if(curConnPointType!=16)
                                        {
                                            hitACross(pos,possPointB, 16);
                                            addCross = 1;
                                            dsCrossPos = possPointB;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    default:
                                        if(prevConn==2)
                                            badPosFlag = 1;
                                        break;
                                }
                            }
                        }*/badPosFlag = 1;
                    }
                }
                if((possPointC!=nullPoint) & ((prevConn==2)))//|(prevConn==1)))
                {
                    if(gridscene->itemAt(possPointC,QTransform())) //if piece is in the possPoint
                    {
                        /*for(int i=0;i<=trackpieces.size()-1;i++)
                        {
                            if(trackpieces.at(i)->getPos()==possPointC)
                            {
                                switch(trackpieces.at(i)->getTrackType())
                                {
                                    case 11:
                                        crossPosition = possPointC;
                                        crossType = 11;
                                        if(curConnPointType!=11)
                                        {
                                            hitACross(pos,possPointC, 11);
                                            addCross = 1;
                                            dsCrossPos = possPointC;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 12:
                                        crossPosition = possPointC;
                                        crossType = 12;
                                        if(curConnPointType!=12)
                                        {
                                            hitACross(pos,possPointC, 12);
                                            addCross = 1;
                                            dsCrossPos = possPointC;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                    break;
                                        break;
                                    case 13:
                                        crossPosition = possPointC;
                                        crossType = 13;
                                        if(curConnPointType!=13)
                                        {
                                            hitACross(pos,possPointC, 13);
                                            addCross = 1;
                                            dsCrossPos = possPointC;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 14:
                                        crossPosition = possPointC;
                                        crossType = 14;
                                        if(curConnPointType!=14)
                                        {
                                            hitACross(pos,possPointC, 14);
                                            addCross = 1;
                                            dsCrossPos = possPointC;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 15:
                                        crossPosition = possPointC;
                                        crossType = 15;
                                        if(curConnPointType!=15)
                                        {
                                            hitACross(pos,possPointC, 15);
                                            addCross = 1;
                                            dsCrossPos = possPointC;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 16:
                                        crossPosition = possPointC;
                                        crossType = 16;
                                        if(curConnPointType!=16)
                                        {
                                            hitACross(pos,possPointC, 16);
                                            addCross = 1;
                                            dsCrossPos = possPointC;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    default:
                                        if(prevConn==2)
                                            badPosFlag = 1;
                                        break;
                                }
                            }
                        }*/badPosFlag = 1;
                    }
                }
                if((possPointD!=nullPoint) & ((prevConn==2)))//|(prevConn==1)))
                {
                    if(gridscene->itemAt(possPointD,QTransform())) //if piece is in the possPoint
                    {
                        /*for(int i=0;i<=trackpieces.size()-1;i++)
                        {
                            if(trackpieces.at(i)->getPos()==possPointD)
                            {
                                switch(trackpieces.at(i)->getTrackType())
                                {
                                    case 11:
                                        crossPosition = possPointD;
                                        crossType = 11;
                                        if(curConnPointType!=11)
                                        {
                                            hitACross(pos,possPointD, 11);
                                            addCross = 1;
                                            dsCrossPos = possPointD;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 12:
                                        crossPosition = possPointD;
                                        crossType = 12;
                                        if(curConnPointType!=12)
                                        {
                                            hitACross(pos,possPointD, 12);
                                            addCross = 1;
                                            dsCrossPos = possPointD;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                    break;
                                        break;
                                    case 13:
                                        crossPosition = possPointD;
                                        crossType = 13;
                                        if(curConnPointType!=13)
                                        {
                                            hitACross(pos,possPointD, 13);
                                            addCross = 1;
                                            dsCrossPos = possPointD;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 14:
                                        crossPosition = possPointD;
                                        crossType = 14;
                                        if(curConnPointType!=14)
                                        {
                                            hitACross(pos,possPointD, 14);
                                            addCross = 1;
                                            dsCrossPos = possPointD;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 15:
                                        crossPosition = possPointD;
                                        crossType = 15;
                                        if(curConnPointType!=15)
                                        {
                                            hitACross(pos,possPointD, 15);
                                            addCross = 1;
                                            dsCrossPos = possPointD;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    case 16:
                                        crossPosition = possPointD;
                                        crossType = 16;
                                        if(curConnPointType!=16)
                                        {
                                            hitACross(pos,possPointD, 16);
                                            addCross = 1;
                                            dsCrossPos = possPointD;
                                        }
                                        i=trackpieces.size();
                                        badPosFlag = 0;
                                        break;
                                    default:
                                        if(prevConn==2)
                                            badPosFlag = 1;
                                        break;
                                }
                            }
                        }*/badPosFlag = 1;
                    }
                }

            if(!badPosFlag) //if all possPos is good, add the piece
            {
                if((toolSelected>26)&(toolSelected<31))                              //Switches 2x4
                {
                    QGraphicsItem *item = new TrackTwoXFour(toolSelected, x, y);
                    item->setPos(x, y);
                    gridscene->addItem(item);

                    dsections.at(dsections.size()-1)->appenddspieces(pos); // Add Piece to DS
                    gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(pos);//Add Piece to gridscene ds
                    addItemToDS(pos);   //Add coordinates to table

                    QPointF tempPos;
                    TrackPiece *tp = new TrackPiece(tracktype, pos);
                    tp->setDS(newDSName);

                    switch(toolSelected)
                    {
                        case 27:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-100);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-150);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y());
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()-100);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()-150);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;
                        case 28:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+100);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+150);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y());
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()+100);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()+150);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;
                        case 29:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-100);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-150);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y());
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()-100);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()-150);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;
                        case 30:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+100);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+150);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y());
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()+100);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()+150);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;

                        default:
                            break;
                    }

                    // /////////////////Get Switch ID/////////////////////

                    switchID = "NULL";
                    QDialog* dialog = new QDialog;
                    QVBoxLayout* mainLayout = new QVBoxLayout;
                    QPushButton* closePushButton = new QPushButton("Confirm");
                    QLabel* switchTitle = new QLabel("Switch ID:");
                    switchTitle->setTextFormat(Qt::RichText);
                    QLineEdit* switchLineEdit = new QLineEdit;

                    dialog->setLayout(mainLayout);
                    mainLayout->addWidget(switchTitle);
                    mainLayout->addSpacing(2);
                    mainLayout->addWidget(switchLineEdit);
                    mainLayout->addWidget(closePushButton);
                    connect(switchLineEdit, SIGNAL(textChanged(QString)),this,SLOT(setSwitchID(QString)));
                    connect(closePushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
                    dialog->exec();

                    tp->setSwitchID(switchID);

                    // //////////////////////////////////////////////////

                    trackpieces.append(tp);                

                    setPossPieces(toolSelected); //Set the possible pieces for the next piece
                    lastPos = pos;
                    pieceCounter=-2;
                    firstPieceType = toolSelected;
                    gridscene->setPossPointA(possPointA); //send possible positions to gridscene to paint those positions a new color
                    gridscene->setPossPointB(possPointB);
                    gridscene->setPossPointC(possPointC);
                    gridscene->setPossPointD(possPointD);
                    saveMainDS();
                }
                else if((toolSelected>30)&(toolSelected<35))                        //Switches 4x2
                {
                    QGraphicsItem *item = new TrackFourXTwo(toolSelected, x, y);
                    item->setPos(x, y);
                    gridscene->addItem(item);
                    dsections.at(dsections.size()-1)->appenddspieces(pos); // Add Piece to DS
                    gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(pos);//Add Piece to gridscene ds
                    addItemToDS(pos);   //Add coordinates to table

                    QPointF tempPos;
                    TrackPiece *tp = new TrackPiece(tracktype, pos);
                    tp->setDS(newDSName);

                    switch(toolSelected)
                    {

                        case 31:
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y());
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+100);
                            tempPos.setY(pos.y());
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+150);
                            tempPos.setY(pos.y());
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+100);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+150);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;
                        case 32:
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y());
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-100);
                            tempPos.setY(pos.y());
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-150);
                            tempPos.setY(pos.y());
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-100);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-150);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;
                        case 33:
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y());
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+100);
                            tempPos.setY(pos.y());
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+150);
                            tempPos.setY(pos.y());
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+100);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+150);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;
                        case 34:
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y());
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-100);
                            tempPos.setY(pos.y());
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-150);
                            tempPos.setY(pos.y());
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-100);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-150);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;
                        default:
                            break;
                    }

                    // /////////////////Get Switch ID/////////////////////

                    switchID = "NULL";
                    QDialog* dialog = new QDialog;
                    QVBoxLayout* mainLayout = new QVBoxLayout;
                    QPushButton* closePushButton = new QPushButton("Confirm");
                    QLabel* switchTitle = new QLabel("Switch ID:");
                    switchTitle->setTextFormat(Qt::RichText);
                    QLineEdit* switchLineEdit = new QLineEdit;

                    dialog->setLayout(mainLayout);
                    mainLayout->addWidget(switchTitle);
                    mainLayout->addSpacing(2);
                    mainLayout->addWidget(switchLineEdit);
                    mainLayout->addWidget(closePushButton);
                    connect(switchLineEdit, SIGNAL(textChanged(QString)),this,SLOT(setSwitchID(QString)));
                    connect(closePushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
                    dialog->exec();

                    tp->setSwitchID(switchID);

                    // //////////////////////////////////////////////////


                    trackpieces.append(tp);

                    setPossPieces(toolSelected); //Set the possible pieces for the next piece
                    lastPos = pos;
                    pieceCounter=-2;
                    firstPieceType = toolSelected;
                    gridscene->setPossPointA(possPointA); //send possible positions to gridscene to paint those positions a new color
                    gridscene->setPossPointB(possPointB);
                    gridscene->setPossPointC(possPointC);
                    gridscene->setPossPointD(possPointD);
                    saveMainDS();
                }
                else if((toolSelected>34)&(toolSelected<43))                        //Switches 2x2
                {
                    QGraphicsItem *item = new TrackTwoXTwo(toolSelected, x, y);
                    item->setPos(x, y);
                    gridscene->addItem(item);

                    dsections.at(dsections.size()-1)->appenddspieces(pos); // Add Piece to DS
                    gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(pos);//Add Piece to gridscene ds
                    addItemToDS(pos);   //Add coordinates to table

                    QPointF tempPos;
                    TrackPiece *tp = new TrackPiece(tracktype, pos);
                    tp->setDS(newDSName);

                    switch(toolSelected)
                    {
                        case 35:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y());
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table

                            break;
                        case 36:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y());
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table

                            break;
                        case 37:
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y());
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table

                            break;
                        case 38:
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y());
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table

                            break;
                        case 39:
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y());
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table

                            break;
                        case 40:
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y());
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table

                            break;
                        case 41:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y());
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table

                            break;
                        case 42:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y());
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table

                            break;

                        default:
                            break;
                    }

                    // /////////////////Get Switch ID/////////////////////

                    switchID = "NULL";
                    QDialog* dialog = new QDialog;
                    QVBoxLayout* mainLayout = new QVBoxLayout;
                    QPushButton* closePushButton = new QPushButton("Confirm");
                    QLabel* switchTitle = new QLabel("Switch ID:");
                    switchTitle->setTextFormat(Qt::RichText);
                    QLineEdit* switchLineEdit = new QLineEdit;

                    dialog->setLayout(mainLayout);
                    mainLayout->addWidget(switchTitle);
                    mainLayout->addSpacing(2);
                    mainLayout->addWidget(switchLineEdit);
                    mainLayout->addWidget(closePushButton);
                    connect(switchLineEdit, SIGNAL(textChanged(QString)),this,SLOT(setSwitchID(QString)));
                    connect(closePushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
                    dialog->exec();

                    tp->setSwitchID(switchID);

                    // //////////////////////////////////////////////////


                    trackpieces.append(tp);

                    setPossPieces(toolSelected); //Set the possible pieces for the next piece
                    lastPos = pos;
                    pieceCounter=-2;
                    firstPieceType = toolSelected;
                    gridscene->setPossPointA(possPointA); //send possible positions to gridscene to paint those positions a new color
                    gridscene->setPossPointB(possPointB);
                    gridscene->setPossPointC(possPointC);
                    gridscene->setPossPointD(possPointD);
                    saveMainDS();
                }
                else                                                                //1x1 pieces
                {
                    QGraphicsItem *item = new TrackOneXOne(toolSelected, x, y);
                    item->setPos(x, y);
                    gridscene->addItem(item);
                    TrackPiece *tp = new TrackPiece(tracktype, pos);
                    tp->setDS(newDSName);
                    tp->setconnA("1");
                    trackpieces.append(tp);

                    dsections.at(dsections.size()-1)->appenddspieces(pos); // Add Piece to DS
                    gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(pos);//Add Piece to gridscene ds
                    addItemToDS(pos);   //Add coordinates to table
                    lastPos = pos; //used for acquiring direction in getPossPoints() when piece is a cross
                    firstPieceType = toolSelected;

                    if(addCross)
                    {
                        TrackPiece *ctp = new TrackPiece(crossType, crossPosition);
                        trackpieces.append(ctp);

                        dsections.at(dsections.size()-1)->appenddspieces(crossPosition); // Add Piece to DS
                        gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(crossPosition);//Add Piece to gridscene ds
                        addItemToDS(crossPosition);   //Add coordinates to table
                        lastPos = crossPosition; //used for acquiring direction in getPossPoints() when piece is a cross
                        firstPieceType = crossType;
                        dsAddedCross = 1;
                    }

                    setPossPieces(toolSelected); //Set the possible pieces for the next piece
                    pieceCounter++;
                    gridscene->setPossPointA(possPointA); //send possible positions to gridscene to paint those positions a new color
                    gridscene->setPossPointB(possPointB);
                    gridscene->setPossPointC(possPointC);
                    gridscene->setPossPointD(possPointD);
                }
            }

            badPosFlag = 0;
        }

        if(((pos == possPointA) | (pos == possPointB) | (pos == possPointC) | (pos == possPointD)) & (pieceCounter>0))
        {
            addCross = 0;
            currentPos = pos;
                if((pieceCounter==1)&(prevConn==2)) //if this is second piece being placed and there was not a previous DS connection point,
                                                    //add corresponding possible points as ds connection points
                {
                    if(dsAddedCross == 1)
                    {
                        qDebug()<<"dsCrossPos:"<<dsCrossPos<<"firstTrackType:"<<firstPieceType;
                        setDSConnPoints(dsCrossPos, firstPieceType, dsections.size()-1);
                    }
                    else
                        setDSConnPoints(pos, firstPieceType, dsections.size()-1);
                    isEndConn = 1;
                }
                else if((pieceCounter==1)&(prevConn==1))
                {
                    isEndConn = 1;
                }
                //2- no connection pos
                //1- connection pos and pieces match
                //0- connection pos and pieces do not match
                prevConn = isDSConnection(pos, toolSelected);
                if(prevConn==2)
                {
                    getPossPoints(pos, toolSelected); // update possible points for piece placed on grid
                    badPosFlag = 0;
                }
                else if(prevConn==0)
                {
                    //set bad possition flag to ignore placing piece
                    badPosFlag = 1;
                }
                else if(prevConn==1)
                {
                    getPossPoints(pos, toolSelected); // update possible points for piece placed on grid
                }

                if((possPointA!=nullPoint) & (prevConn==2) & (possPointA!=lastPos))
                {
                    if(gridscene->itemAt(possPointA,QTransform())) //if piece is in the possPoint
                    {
                        for(int i=0;i<=trackpieces.size()-1;i++)
                        {
                            if(trackpieces.at(i)->getPos()==possPointA)
                            {
                                switch(trackpieces.at(i)->getTrackType())
                                {
                                    case 11:
                                        crossPosition = possPointA;
                                        crossType = 11;
                                        addCross = 1;
                                        hitACross(pos,possPointA, 11);
                                        i=trackpieces.size();
                                        break;
                                    case 12:
                                        crossPosition = possPointA;
                                        crossType = 12;
                                        addCross = 1;
                                        hitACross(pos,possPointA, 12);
                                        i=trackpieces.size();
                                    break;
                                        break;
                                    case 13:
                                        crossPosition = possPointA;
                                        crossType = 13;
                                        addCross = 1;
                                        hitACross(pos,possPointA, 13);
                                        i=trackpieces.size();
                                        break;
                                    case 14:
                                        crossPosition = possPointA;
                                        crossType = 14;
                                        addCross = 1;
                                        hitACross(pos,possPointA, 14);
                                        i=trackpieces.size();
                                        break;
                                    case 15:
                                        crossPosition = possPointA;
                                        crossType = 15;
                                        addCross = 1;
                                        hitACross(pos,possPointA, 15);
                                        i=trackpieces.size();
                                        break;
                                    case 16:
                                        crossPosition = possPointA;
                                        crossType = 16;
                                        addCross = 1;
                                        hitACross(pos,possPointA, 16);
                                        i=trackpieces.size();
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }
                if((possPointB!=nullPoint) & (prevConn==2) & (possPointB!=lastPos))
                {
                    if(gridscene->itemAt(possPointB,QTransform())) //if piece is in the possPoint
                    {
                        for(int i=0;i<=trackpieces.size()-1;i++)
                        {
                            if(trackpieces.at(i)->getPos()==possPointB)
                            {
                                switch(trackpieces.at(i)->getTrackType())
                                {
                                    case 11:
                                        crossPosition = possPointB;
                                        crossType = 11;
                                        addCross = 1;
                                        hitACross(pos,possPointB, 11);
                                        i=trackpieces.size();
                                        break;
                                    case 12:
                                        crossPosition = possPointB;
                                        crossType = 12;
                                        addCross = 1;
                                        hitACross(pos,possPointB, 12);
                                        i=trackpieces.size();
                                    break;
                                        break;
                                    case 13:
                                        crossPosition = possPointB;
                                        crossType = 13;
                                        addCross = 1;
                                        hitACross(pos,possPointB, 13);
                                        i=trackpieces.size();
                                        break;
                                    case 14:
                                        crossPosition = possPointB;
                                        crossType = 14;
                                        addCross = 1;
                                        hitACross(pos,possPointB, 14);
                                        i=trackpieces.size();
                                        break;
                                    case 15:
                                        crossPosition = possPointB;
                                        crossType = 15;
                                        addCross = 1;
                                        hitACross(pos,possPointB, 15);
                                        i=trackpieces.size();
                                        break;
                                    case 16:
                                        crossPosition = possPointB;
                                        crossType = 16;
                                        addCross = 1;
                                        hitACross(pos,possPointB, 16);
                                        i=trackpieces.size();
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }
                if((possPointC!=nullPoint) & (prevConn==2) & (possPointC!=lastPos))
                {
                    if(gridscene->itemAt(possPointC,QTransform())) //if piece is in the possPoint
                    {
                        for(int i=0;i<=trackpieces.size()-1;i++)
                        {
                            if(trackpieces.at(i)->getPos()==possPointC)
                            {
                                switch(trackpieces.at(i)->getTrackType())
                                {
                                    case 11:
                                        crossPosition = possPointC;
                                        crossType = 11;
                                        addCross = 1;
                                        hitACross(pos,possPointC, 11);
                                        i=trackpieces.size();
                                        break;
                                    case 12:
                                        crossPosition = possPointC;
                                        crossType = 12;
                                        addCross = 1;
                                        hitACross(pos,possPointC, 12);
                                        i=trackpieces.size();
                                    break;
                                        break;
                                    case 13:
                                        crossPosition = possPointC;
                                        crossType = 13;
                                        addCross = 1;
                                        hitACross(pos,possPointC, 13);
                                        i=trackpieces.size();
                                        break;
                                    case 14:
                                        crossPosition = possPointC;
                                        crossType = 14;
                                        addCross = 1;
                                        hitACross(pos,possPointC, 14);
                                        i=trackpieces.size();
                                        break;
                                    case 15:
                                        crossPosition = possPointC;
                                        crossType = 15;
                                        addCross = 1;
                                        hitACross(pos,possPointC, 15);
                                        i=trackpieces.size();
                                        break;
                                    case 16:
                                        crossPosition = possPointC;
                                        crossType = 16;
                                        addCross = 1;
                                        hitACross(pos,possPointC, 16);
                                        i=trackpieces.size();
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }
                if((possPointD!=nullPoint) & (prevConn==2) & (possPointD!=lastPos))
                {
                    if(gridscene->itemAt(possPointD,QTransform())) //if piece is in the possPoint
                    {
                        for(int i=0;i<=trackpieces.size()-1;i++)
                        {
                            if(trackpieces.at(i)->getPos()==possPointD)
                            {
                                switch(trackpieces.at(i)->getTrackType())
                                {
                                    case 11:
                                        crossPosition = possPointD;
                                        crossType = 11;
                                        addCross = 1;
                                        hitACross(pos,possPointD, 11);
                                        i=trackpieces.size();
                                        break;
                                    case 12:
                                        crossPosition = possPointD;
                                        crossType = 12;
                                        addCross = 1;
                                        hitACross(pos,possPointD, 12);
                                        i=trackpieces.size();
                                    break;
                                        break;
                                    case 13:
                                        crossPosition = possPointD;
                                        crossType = 13;
                                        addCross = 1;
                                        hitACross(pos,possPointD, 13);
                                        i=trackpieces.size();
                                        break;
                                    case 14:
                                        crossPosition = possPointD;
                                        crossType = 14;
                                        addCross = 1;
                                        hitACross(pos,possPointD, 14);
                                        i=trackpieces.size();
                                        break;
                                    case 15:
                                        crossPosition = possPointD;
                                        crossType = 15;
                                        addCross = 1;
                                        hitACross(pos,possPointD, 15);
                                        i=trackpieces.size();
                                        break;
                                    case 16:
                                        crossPosition = possPointD;
                                        crossType = 16;
                                        addCross = 1;
                                        hitACross(pos,possPointD, 16);
                                        i=trackpieces.size();
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }


                if((toolSelected>26)&(toolSelected<31))                              //Switches 2x4
                {
                    if(!badPosFlag) //if all possPos is good, add the piece
                    {
                        QGraphicsItem *item = new TrackTwoXFour(toolSelected, x, y);
                        item->setPos(x, y);
                        gridscene->addItem(item);

                        dsections.at(dsections.size()-1)->appenddspieces(pos); // Add Piece to DS
                        gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(pos);//Add Piece to gridscene ds
                        addItemToDS(pos);   //Add coordinates to table

                        QPointF tempPos;
                        TrackPiece *tp = new TrackPiece(tracktype, pos);
                        tp->setDS(newDSName);

                        switch(toolSelected)
                        {
                        case 27:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-100);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-150);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y());
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()-100);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()-150);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;
                        case 28:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+100);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+150);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y());
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()+100);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()+50);
                            tempPos.setY(pos.y()+150);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;
                        case 29:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-100);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()-150);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y());
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()-50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()-100);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()-150);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;
                        case 30:
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos2(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+100);
                            tp->setSwPos3(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x());
                            tempPos.setY(pos.y()+150);
                            tp->setSwPos4(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y());
                            tp->setSwPos5(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()+50);
                            tp->setSwPos6(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()+100);
                            tp->setSwPos7(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            tempPos.setX(pos.x()-50);
                            tempPos.setY(pos.y()+150);
                            tp->setSwPos8(tempPos);
                            dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                            addItemToDS(tempPos);   //Add coordinates to table
                            break;

                            default:
                                break;
                        }

                        // /////////////////Get Switch ID/////////////////////

                        switchID = "NULL";
                        QDialog* dialog = new QDialog;
                        QVBoxLayout* mainLayout = new QVBoxLayout;
                        QPushButton* closePushButton = new QPushButton("Confirm");
                        QLabel* switchTitle = new QLabel("Switch ID:");
                        switchTitle->setTextFormat(Qt::RichText);
                        QLineEdit* switchLineEdit = new QLineEdit;

                        dialog->setLayout(mainLayout);
                        mainLayout->addWidget(switchTitle);
                        mainLayout->addSpacing(2);
                        mainLayout->addWidget(switchLineEdit);
                        mainLayout->addWidget(closePushButton);
                        connect(switchLineEdit, SIGNAL(textChanged(QString)),this,SLOT(setSwitchID(QString)));
                        connect(closePushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
                        dialog->exec();

                        tp->setSwitchID(switchID);

                        // //////////////////////////////////////////////////


                        trackpieces.append(tp);

                        setPossPieces(toolSelected); //Set the possible pieces for the next piece
                        lastPos = pos; //used for acquiring direction in getPossPoints() when piece is a cross
                        pieceCounter = -3;
                        isEndConn = 1;
                        firstPieceType = toolSelected;
                        gridscene->setPossPointA(possPointA); //send possible positions to gridscene to paint those positions a new color
                        gridscene->setPossPointB(possPointB);
                        gridscene->setPossPointC(possPointC);
                        gridscene->setPossPointD(possPointD);
                        saveMainDS();

                    }
                }
                else if((toolSelected>30)&(toolSelected<35))                        //Switches 4x2
                {
                    if(!badPosFlag) //if all possPos is good, add the piece
                    {
                        QGraphicsItem *item = new TrackFourXTwo(toolSelected, x, y);
                        item->setPos(x, y);
                        gridscene->addItem(item);

                        dsections.at(dsections.size()-1)->appenddspieces(pos); // Add Piece to DS
                        gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(pos);//Add Piece to gridscene ds
                        addItemToDS(pos);   //Add coordinates to table

                        QPointF tempPos;
                        TrackPiece *tp = new TrackPiece(tracktype, pos);
                        tp->setDS(newDSName);

                        switch(toolSelected)
                        {
                            case 31:
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y());
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+100);
                                tempPos.setY(pos.y());
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+150);
                                tempPos.setY(pos.y());
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos5(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos6(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+100);
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos7(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+150);
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos8(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                break;
                            case 32:
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y());
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-100);
                                tempPos.setY(pos.y());
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-150);
                                tempPos.setY(pos.y());
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos5(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos6(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-100);
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos7(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-150);
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos8(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                break;
                            case 33:
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y());
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+100);
                                tempPos.setY(pos.y());
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+150);
                                tempPos.setY(pos.y());
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos5(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos6(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+100);
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos7(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+150);
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos8(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                break;
                            case 34:
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y());
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-100);
                                tempPos.setY(pos.y());
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-150);
                                tempPos.setY(pos.y());
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos5(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos6(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-100);
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos7(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-150);
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos8(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                break;
                            default:
                                break;
                        }

                        // /////////////////Get Switch ID/////////////////////

                        switchID = "NULL";
                        QDialog* dialog = new QDialog;
                        QVBoxLayout* mainLayout = new QVBoxLayout;
                        QPushButton* closePushButton = new QPushButton("Confirm");
                        QLabel* switchTitle = new QLabel("Switch ID:");
                        switchTitle->setTextFormat(Qt::RichText);
                        QLineEdit* switchLineEdit = new QLineEdit;

                        dialog->setLayout(mainLayout);
                        mainLayout->addWidget(switchTitle);
                        mainLayout->addSpacing(2);
                        mainLayout->addWidget(switchLineEdit);
                        mainLayout->addWidget(closePushButton);
                        connect(switchLineEdit, SIGNAL(textChanged(QString)),this,SLOT(setSwitchID(QString)));
                        connect(closePushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
                        dialog->exec();

                        tp->setSwitchID(switchID);

                        // //////////////////////////////////////////////////


                        trackpieces.append(tp);

                        setPossPieces(toolSelected); //Set the possible pieces for the next piece
                        lastPos = pos; //used for acquiring direction in getPossPoints() when piece is a cross
                        pieceCounter = -3;
                        isEndConn = 1;
                        firstPieceType = toolSelected;
                        gridscene->setPossPointA(possPointA); //send possible positions to gridscene to paint those positions a new color
                        gridscene->setPossPointB(possPointB);
                        gridscene->setPossPointC(possPointC);
                        gridscene->setPossPointD(possPointD);
                        saveMainDS();
                    }
                }
                else if((toolSelected>34)&(toolSelected<43))                        //Switches 2x2
                {
                    if(!badPosFlag) //if all possPos is good, add the piece
                    {
                        QGraphicsItem *item = new TrackTwoXTwo(toolSelected, x, y);
                        item->setPos(x, y);
                        gridscene->addItem(item);

                        dsections.at(dsections.size()-1)->appenddspieces(pos); // Add Piece to DS
                        gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(pos);//Add Piece to gridscene ds
                        addItemToDS(pos);   //Add coordinates to table

                        QPointF tempPos;
                        TrackPiece *tp = new TrackPiece(tracktype, pos);
                        tp->setDS(newDSName);

                        switch(toolSelected)
                        {
                            case 35:
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y());
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table

                                break;
                            case 36:
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y());
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table

                                break;
                            case 37:
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y());
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table

                                break;
                            case 38:
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y());
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y()-50);
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table

                                break;
                            case 39:
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y());
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table

                                break;
                            case 40:
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y());
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table

                                break;
                            case 41:
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y());
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()-50);
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table

                                break;
                            case 42:
                                tempPos.setX(pos.x());
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos2(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y());
                                tp->setSwPos3(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table
                                tempPos.setX(pos.x()+50);
                                tempPos.setY(pos.y()+50);
                                tp->setSwPos4(tempPos);
                                dsections.at(dsections.size()-1)->appenddspieces(tempPos); // Add Piece to DS
                                gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(tempPos);//Add Piece to gridscene ds
                                addItemToDS(tempPos);   //Add coordinates to table

                                break;

                            default:
                                break;
                        }

                        // /////////////////Get Switch ID/////////////////////

                        switchID = "NULL";
                        QDialog* dialog = new QDialog;
                        QVBoxLayout* mainLayout = new QVBoxLayout;
                        QPushButton* closePushButton = new QPushButton("Confirm");
                        QLabel* switchTitle = new QLabel("Switch ID:");
                        switchTitle->setTextFormat(Qt::RichText);
                        QLineEdit* switchLineEdit = new QLineEdit;

                        dialog->setLayout(mainLayout);
                        mainLayout->addWidget(switchTitle);
                        mainLayout->addSpacing(2);
                        mainLayout->addWidget(switchLineEdit);
                        mainLayout->addWidget(closePushButton);
                        connect(switchLineEdit, SIGNAL(textChanged(QString)),this,SLOT(setSwitchID(QString)));
                        connect(closePushButton, SIGNAL(clicked()), dialog, SLOT(accept()));
                        dialog->exec();

                        tp->setSwitchID(switchID);

                        // //////////////////////////////////////////////////


                        trackpieces.append(tp);

                        setPossPieces(toolSelected); //Set the possible pieces for the next piece
                        lastPos = pos; //used for acquiring direction in getPossPoints() when piece is a cross
                        pieceCounter = -3;
                        isEndConn = 1;
                        firstPieceType = toolSelected;
                        gridscene->setPossPointA(possPointA); //send possible positions to gridscene to paint those positions a new color
                        gridscene->setPossPointB(possPointB);
                        gridscene->setPossPointC(possPointC);
                        gridscene->setPossPointD(possPointD);
                        saveMainDS();
                    }
                }
                else                                                                //1x1 pieces
                {
                    if(!badPosFlag) //if all possPos is good, add the piece
                    {
                        QGraphicsItem *item = new TrackOneXOne(toolSelected, x, y);
                        item->setPos(x, y);
                        gridscene->addItem(item);
                        TrackPiece *tp = new TrackPiece(tracktype, pos);
                        tp->setDS(newDSName);
                        trackpieces.append(tp);

                        dsections.at(dsections.size()-1)->appenddspieces(pos); // Add Piece to DS
                        gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(pos);//Add Piece to gridscene ds
                        addItemToDS(pos);   //Add coordinates to table
                        lastPos = pos; //used for acquiring direction in getPossPoints() when piece is a cross
                        firstPieceType = toolSelected;
                        if(addCross)
                        {
                            TrackPiece *ctp = new TrackPiece(crossType, crossPosition);
                            trackpieces.append(ctp);

                            dsections.at(dsections.size()-1)->appenddspieces(crossPosition); // Add Piece to DS
                            gridscene->dsections.at(gridscene->dsections.size()-1)->appenddspieces(crossPosition);//Add Piece to gridscene ds
                            addItemToDS(crossPosition);   //Add coordinates to table
                            lastPos = crossPosition; //used for acquiring direction in getPossPoints() when piece is a cross
                            firstPieceType = crossType;
                            dsAddedCross = 1;
                        }
                        setPossPieces(toolSelected); //Set the possible pieces for the next piece
                        pieceCounter++;                      
                        gridscene->setPossPointA(possPointA); //send possible positions to gridscene to paint those positions a new color
                        gridscene->setPossPointB(possPointB);
                        gridscene->setPossPointC(possPointC);
                        gridscene->setPossPointD(possPointD);
                    }
                }

                if(prevConn==1)
                {
                    currentPos = pos;
                    saveMainDS();
                }

            badPosFlag = 0;
        }

        if(pieceCounter==-1)//allow cosmetics
        {
            if((toolSelected>42)&(toolSelected<61))
            {
                if((toolSelected>57)&(toolSelected<61))
                {
                    QGraphicsItem *item = new TrackTwoXTwo(toolSelected, x, y);
                    item->setPos(x, y);
                    gridscene->addItem(item);
                    TrackPiece *tp = new TrackPiece(tracktype, pos);
                    trackpieces.append(tp);
                }
                else
                {
                    QGraphicsItem *item = new TrackOneXOne(toolSelected, x, y);
                    item->setPos(x, y);
                    gridscene->addItem(item);
                    TrackPiece *tp = new TrackPiece(tracktype, pos);
                    trackpieces.append(tp);
                }
            }
        }

        if((toolSelected==1)|(toolSelected==2)|(toolSelected==25)|(toolSelected==26)|((toolSelected>42)&(toolSelected<61)))
        {
        }
        else
        {
            clearToolSelected();
        }
    }
}

//this gets the possible positions for the next piece to be placed
void MainWindow::getPossPoints(QPointF pos, int trackType)
{

    switch(trackType)
        {
            case 1:
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y());
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y());
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
            case 2:
                possPointC.setX(pos.x());
                possPointC.setY(pos.y()+50);
                possPointD.setX(pos.x());
                possPointD.setY(pos.y()-50);
                possPointA = QPointF(0.1,0.1);
                possPointB = QPointF(0.1,0.1);
                break;
            case 3:
                possPointC.setX(pos.x());
                possPointC.setY(pos.y()+50);
                possPointA = QPointF(0.1,0.1);
                possPointB = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 4:
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y());
                possPointB = QPointF(0.1,0.1);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 5:
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y());
                possPointA = QPointF(0.1,0.1);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 6:
                possPointD.setX(pos.x());
                possPointD.setY(pos.y()-50);
                possPointA = QPointF(0.1,0.1);
                possPointB = QPointF(0.1,0.1);
                possPointC = QPointF(0.1,0.1);
                break;
           case 7:
                possPointC.setX(pos.x()-50);
                possPointC.setY(pos.y()+50);
                possPointA = QPointF(0.1,0.1);
                possPointB = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 8:
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y()+50);
                possPointA = QPointF(0.1,0.1);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 9:
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y()-50);
                possPointB = QPointF(0.1,0.1);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 10:
                possPointD.setX(pos.x()+50);
                possPointD.setY(pos.y()-50);
                possPointA = QPointF(0.1,0.1);
                possPointB = QPointF(0.1,0.1);
                possPointC = QPointF(0.1,0.1);
                break;
           case 11:
            if (((lastPos.x() == pos.x()+50) & (lastPos.y() ==pos.y()+50)) | ((lastPos.x() == pos.x()-50) & (lastPos.y() ==pos.y()-50)))
            {
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y()-50);
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y()+50);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
            }
            else if (((lastPos.x() == pos.x()+50) & (lastPos.y() ==pos.y()-50)) | ((lastPos.x() == pos.x()-50) & (lastPos.y() ==pos.y()+50)))
            {
                possPointD.setX(pos.x()+50);
                possPointD.setY(pos.y()-50);
                possPointC.setX(pos.x()-50);
                possPointC.setY(pos.y()+50);
                possPointA = QPointF(0.1,0.1);
                possPointB = QPointF(0.1,0.1);
            }
            else
            {
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y()-50);
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y()+50);
                possPointD.setX(pos.x()+50);
                possPointD.setY(pos.y()-50);
                possPointC.setX(pos.x()-50);
                possPointC.setY(pos.y()+50);
            }

                break;
           case 12:
            if (((lastPos.x() == pos.x()+50) & (lastPos.y() ==pos.y()+50)) | ((lastPos.x() == pos.x()-50) & (lastPos.y() ==pos.y()-50)))
            {
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y()-50);
                possPointB = QPointF(0.1,0.1);
                possPointC.setX(pos.x()+50);
                possPointC.setY(pos.y()+50);
                possPointD = QPointF(0.1,0.1);
            }
            else if (((lastPos.x() == pos.x()-50) & (lastPos.y() ==pos.y())) | ((lastPos.x() == pos.x()+50) & (lastPos.y() ==pos.y())))
            {
                possPointB.setX(pos.x()-50);
                possPointB.setY(pos.y());
                possPointD.setX(pos.x()+50);
                possPointD.setY(pos.y());
                possPointA = QPointF(0.1,0.1);
                possPointC = QPointF(0.1,0.1);
            }
            else
            {
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y()-50);
                possPointC.setX(pos.x()+50);
                possPointC.setY(pos.y()+50);
                possPointB.setX(pos.x()-50);
                possPointB.setY(pos.y());
                possPointD.setX(pos.x()+50);
                possPointD.setY(pos.y());
            }

                break;
           case 13:
            if (((lastPos.x() == pos.x()-50) & (lastPos.y() ==pos.y()+50)) | ((lastPos.x() == pos.x()+50) & (lastPos.y() ==pos.y()-50)))
            {
                possPointA.setX(pos.x()+50);
                possPointA.setY(pos.y()-50);
                possPointB = QPointF(0.1,0.1);
                possPointC.setX(pos.x()-50);
                possPointC.setY(pos.y()+50);
                possPointD = QPointF(0.1,0.1);
            }
            else if (((lastPos.x() == pos.x()-50) & (lastPos.y() ==pos.y())) | ((lastPos.x() == pos.x()+50) & (lastPos.y() ==pos.y())))
            {
                possPointB.setX(pos.x()-50);
                possPointB.setY(pos.y());
                possPointD.setX(pos.x()+50);
                possPointD.setY(pos.y());
                possPointA = QPointF(0.1,0.1);
                possPointC = QPointF(0.1,0.1);
            }
            else
            {
                possPointA.setX(pos.x()+50);
                possPointA.setY(pos.y()-50);
                possPointC.setX(pos.x()-50);
                possPointC.setY(pos.y()+50);
                possPointB.setX(pos.x()-50);
                possPointB.setY(pos.y());
                possPointD.setX(pos.x()+50);
                possPointD.setY(pos.y());
            }
                break;
           case 14:
            if (((lastPos.x() == pos.x()+50) & (lastPos.y() ==pos.y()+50)) | ((lastPos.x() == pos.x()-50) & (lastPos.y() ==pos.y()-50)))
            {
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y()-50);
                possPointB = QPointF(0.1,0.1);
                possPointC.setX(pos.x()+50);
                possPointC.setY(pos.y()+50);
                possPointD = QPointF(0.1,0.1);
            }
            else if (((lastPos.x() == pos.x()) & (lastPos.y() ==pos.y()+50)) | ((lastPos.x() == pos.x()) & (lastPos.y() ==pos.y()-50)))
            {
                possPointB.setX(pos.x());
                possPointB.setY(pos.y()+50);
                possPointD.setX(pos.x());
                possPointD.setY(pos.y()-50);
                possPointA = QPointF(0.1,0.1);
                possPointC = QPointF(0.1,0.1);
            }
            else
            {
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y()-50);
                possPointC.setX(pos.x()+50);
                possPointC.setY(pos.y()+50);
                possPointB.setX(pos.x());
                possPointB.setY(pos.y()+50);
                possPointD.setX(pos.x());
                possPointD.setY(pos.y()-50);
            }
                break;
           case 15:
            if (((lastPos.x() == pos.x()) & (lastPos.y() ==pos.y()+50)) | ((lastPos.x() == pos.x()) & (lastPos.y() ==pos.y()-50)))
            {
                possPointA.setX(pos.x());
                possPointA.setY(pos.y()-50);
                possPointB = QPointF(0.1,0.1);
                possPointC.setX(pos.x());
                possPointC.setY(pos.y()+50);
                possPointD = QPointF(0.1,0.1);
            }
            else if (((lastPos.x() == pos.x()-50) & (lastPos.y() ==pos.y()+50)) | ((lastPos.x() == pos.x()+50) & (lastPos.y() ==pos.y()-50)))
            {
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y()-50);
                possPointD.setX(pos.x()-50);
                possPointD.setY(pos.y()+50);
                possPointA = QPointF(0.1,0.1);
                possPointC = QPointF(0.1,0.1);
            }
            else
            {
                possPointA.setX(pos.x());
                possPointA.setY(pos.y()-50);
                possPointC.setX(pos.x());
                possPointC.setY(pos.y()+50);
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y()-50);
                possPointD.setX(pos.x()-50);
                possPointD.setY(pos.y()+50);
            }
                break;
           case 16:
            if (((lastPos.x() == pos.x()) & (lastPos.y() ==pos.y()+50)) | ((lastPos.x() == pos.x()) & (lastPos.y() ==pos.y()-50)))
            {
                possPointA.setX(pos.x());
                possPointA.setY(pos.y()-50);
                possPointB = QPointF(0.1,0.1);
                possPointC.setX(pos.x());
                possPointC.setY(pos.y()+50);
                possPointD = QPointF(0.1,0.1);
            }
            else if (((lastPos.x() == pos.x()-50) & (lastPos.y() ==pos.y())) | ((lastPos.x() == pos.x()+50) & (lastPos.y() ==pos.y())))
            {
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y());
                possPointD.setX(pos.x()-50);
                possPointD.setY(pos.y());
                possPointA = QPointF(0.1,0.1);
                possPointC = QPointF(0.1,0.1);
            }
            else
            {
                possPointA.setX(pos.x());
                possPointA.setY(pos.y()-50);
                possPointC.setX(pos.x());
                possPointC.setY(pos.y()+50);
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y());
                possPointD.setX(pos.x()-50);
                possPointD.setY(pos.y());
            }
                break;
           case 17:
                possPointA.setX(pos.x()+50);
                possPointA.setY(pos.y());
                possPointB.setX(pos.x()-50);
                possPointB.setY(pos.y()+50);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 18:
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y());
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y()+50);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 19:
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y()-50);
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y());
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 20:
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y());
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y()-50);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 21:
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y()+50);
                possPointB.setX(pos.x());
                possPointB.setY(pos.y()-50);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 22:
                possPointA.setX(pos.x());
                possPointA.setY(pos.y()-50);
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y()+50);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 23:
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y()-50);
                possPointB.setX(pos.x());
                possPointB.setY(pos.y()+50);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 24:
                possPointA.setX(pos.x()+50);
                possPointA.setY(pos.y()-50);
                possPointB.setX(pos.x());
                possPointB.setY(pos.y()+50);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 25:
                possPointA.setX(pos.x()-50);
                possPointA.setY(pos.y()-50);
                possPointB.setX(pos.x()+50);
                possPointB.setY(pos.y()+50);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
           case 26:
                possPointA.setX(pos.x()+50);
                possPointA.setY(pos.y()-50);
                possPointB.setX(pos.x()-50);
                possPointB.setY(pos.y()+50);
                possPointC = QPointF(0.1,0.1);
                possPointD = QPointF(0.1,0.1);
                break;
            case 27:
                 possPointA.setX(pos.x());
                 possPointA.setY(pos.y()+50);
                 possPointB.setX(pos.x());
                 possPointB.setY(pos.y()-200);
                 possPointC.setX(pos.x()+50);
                 possPointC.setY(pos.y()-200);
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 28:
                 possPointA.setX(pos.x());
                 possPointA.setY(pos.y()-50);
                 possPointB.setX(pos.x());
                 possPointB.setY(pos.y()+200);
                 possPointC.setX(pos.x()+50);
                 possPointC.setY(pos.y()+200);
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 29:
                 possPointA.setX(pos.x());
                 possPointA.setY(pos.y()+50);
                 possPointB.setX(pos.x());
                 possPointB.setY(pos.y()-200);
                 possPointC.setX(pos.x()-50);
                 possPointC.setY(pos.y()-200);
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 30:
                 possPointA.setX(pos.x());
                 possPointA.setY(pos.y()-50);
                 possPointB.setX(pos.x());
                 possPointB.setY(pos.y()+200);
                 possPointC.setX(pos.x()-50);
                 possPointC.setY(pos.y()+200);
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 31:
                 possPointA.setX(pos.x()-50);
                 possPointA.setY(pos.y());
                 possPointB.setX(pos.x()+200);
                 possPointB.setY(pos.y());
                 possPointC.setX(pos.x()+200);
                 possPointC.setY(pos.y()+50);
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 32:
                 possPointA.setX(pos.x()+50);
                 possPointA.setY(pos.y());
                 possPointB.setX(pos.x()-200);
                 possPointB.setY(pos.y());
                 possPointC.setX(pos.x()-200);
                 possPointC.setY(pos.y()+50);
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 33:
                 possPointA.setX(pos.x()-50);
                 possPointA.setY(pos.y());
                 possPointB.setX(pos.x()+200);
                 possPointB.setY(pos.y());
                 possPointC.setX(pos.x()+200);
                 possPointC.setY(pos.y()-50);
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 34:
                 possPointA.setX(pos.x()+50);
                 possPointA.setY(pos.y());
                 possPointB.setX(pos.x()-200);
                 possPointB.setY(pos.y());
                 possPointC.setX(pos.x()-200);
                 possPointC.setY(pos.y()-50);
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 35:
                 possPointA.setX(pos.x()+50);
                 possPointA.setY(pos.y()+50);
                 possPointB.setX(pos.x());
                 possPointB.setY(pos.y()-100);
                 possPointC.setX(pos.x()-100);
                 possPointC.setY(pos.y()-100);
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 36:
                 possPointA.setX(pos.x()-50);
                 possPointA.setY(pos.y()+50);
                 possPointB.setX(pos.x());
                 possPointB.setY(pos.y()-100);
                 possPointC.setX(pos.x()+100);
                 possPointC.setY(pos.y()-100);
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 37:
                 possPointA.setX(pos.x()+50);
                 possPointA.setY(pos.y()+50);
                 possPointB.setX(pos.x()-100);
                 possPointB.setY(pos.y()-100);
                 possPointC.setX(pos.x()-100);
                 possPointC.setY(pos.y());
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 38:
                 possPointA.setX(pos.x()-50);
                 possPointA.setY(pos.y()+50);
                 possPointB.setX(pos.x()+100);
                 possPointB.setY(pos.y()-100);
                 possPointC.setX(pos.x()+100);
                 possPointC.setY(pos.y());
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 39:
                 possPointA.setX(pos.x()+50);
                 possPointA.setY(pos.y()-50);
                 possPointB.setX(pos.x()-100);
                 possPointB.setY(pos.y()+100);
                 possPointC.setX(pos.x()-100);
                 possPointC.setY(pos.y());
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 40:
                 possPointA.setX(pos.x()-50);
                 possPointA.setY(pos.y()-50);
                 possPointB.setX(pos.x()+100);
                 possPointB.setY(pos.y()+100);
                 possPointC.setX(pos.x()+100);
                 possPointC.setY(pos.y());
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 41:
                 possPointA.setX(pos.x()+50);
                 possPointA.setY(pos.y()-50);
                 possPointB.setX(pos.x());
                 possPointB.setY(pos.y()+100);
                 possPointC.setX(pos.x()-100);
                 possPointC.setY(pos.y()+100);
                 possPointD = QPointF(0.1,0.1);
                 break;
            case 42:
                 possPointA.setX(pos.x()-50);
                 possPointA.setY(pos.y()-50);
                 possPointB.setX(pos.x());
                 possPointB.setY(pos.y()+100);
                 possPointC.setX(pos.x()+100);
                 possPointC.setY(pos.y()+100);
                 possPointD = QPointF(0.1,0.1);
                 break;
            default:
                break;

        }

}

//this enables and disables possible track pieces to use relative to the previous placed piece
void MainWindow::setPossPieces(int trackType)
{
    /******************************************** STRAIGHT TOOLBAR *********************************************/
    Straight1ToolButton->setHidden(true);
    Straight2ToolButton->setHidden(true);

    /******************************************** BUMPER TOOLBAR *********************************************/
    Bumper3ToolButton->setHidden(true);
    Bumper4ToolButton->setHidden(true);
    Bumper5ToolButton->setHidden(true);
    Bumper6ToolButton->setHidden(true);
    Bumper8ToolButton->setHidden(true);
    Bumper7ToolButton->setHidden(true);
    Bumper10ToolButton->setHidden(true);
    Bumper9ToolButton->setHidden(true);

    /******************************************** CROSS TOOLBAR *********************************************/
    Cross11ToolButton->setHidden(true);
    Cross12ToolButton->setHidden(true);
    Cross13ToolButton->setHidden(true);
    Cross14ToolButton->setHidden(true);
    Cross15ToolButton->setHidden(true);
    Cross16ToolButton->setHidden(true);

    /******************************************** CURVED TOOLBAR *********************************************/
    Curve17ToolButton->setHidden(true);
    Curve18ToolButton->setHidden(true);
    Curve19ToolButton->setHidden(true);
    Curve20ToolButton->setHidden(true);
    Curve21ToolButton->setHidden(true);
    Curve22ToolButton->setHidden(true);
    Curve23ToolButton->setHidden(true);
    Curve24ToolButton->setHidden(true);

    /******************************************** DIAGONAL TOOLBAR *********************************************/
    Diagonal25ToolButton->setHidden(true);
    Diagonal26ToolButton->setHidden(true);

    /******************************************** SWITCH TOOLBAR *********************************************/
    Switch27ToolButton->setHidden(true);
    Switch28ToolButton->setHidden(true);
    Switch29ToolButton->setHidden(true);
    Switch30ToolButton->setHidden(true);
    Switch31ToolButton->setHidden(true);
    Switch32ToolButton->setHidden(true);
    Switch33ToolButton->setHidden(true);
    Switch34ToolButton->setHidden(true);
    Switch35ToolButton->setHidden(true);
    Switch36ToolButton->setHidden(true);
    Switch37ToolButton->setHidden(true);
    Switch38ToolButton->setHidden(true);
    Switch39ToolButton->setHidden(true);
    Switch40ToolButton->setHidden(true);
    Switch41ToolButton->setHidden(true);
    Switch42ToolButton->setHidden(true);

    //trackType is type of previous piece
    switch(trackType)
       {
           case 1:
               if(!gridscene->itemAt(possPointA,QTransform()))
               {
                   Straight1ToolButton->setHidden(false);
                   Bumper5ToolButton->setHidden(false);
                   Curve17ToolButton->setHidden(false);
                   Curve19ToolButton->setHidden(false);
                   Cross12ToolButton->setHidden(false);
                   Cross13ToolButton->setHidden(false);
                   Cross16ToolButton->setHidden(false);
                   Switch32ToolButton->setHidden(false);
                   Switch34ToolButton->setHidden(false);
               }
               if(!gridscene->itemAt(possPointB,QTransform()))
               {
                    Straight1ToolButton->setHidden(false);
                    Bumper4ToolButton->setHidden(false);
                    Curve18ToolButton->setHidden(false);
                    Curve20ToolButton->setHidden(false);
                    Cross12ToolButton->setHidden(false);
                    Cross13ToolButton->setHidden(false);
                    Cross16ToolButton->setHidden(false);
                    Switch31ToolButton->setHidden(false);
                    Switch33ToolButton->setHidden(false);
               }

               break;
           case 2:
               if(!gridscene->itemAt(possPointD,QTransform()))
               {
                   Straight2ToolButton->setHidden(false);
                   Bumper3ToolButton->setHidden(false);
                   Cross14ToolButton->setHidden(false);
                   Cross15ToolButton->setHidden(false);
                   Cross16ToolButton->setHidden(false);
                   Curve23ToolButton->setHidden(false);
                   Curve24ToolButton->setHidden(false);
                   Switch27ToolButton->setHidden(false);
                   Switch29ToolButton->setHidden(false);
               }
               if(!gridscene->itemAt(possPointC,QTransform()))
               {
                   Straight2ToolButton->setHidden(false);
                   Bumper6ToolButton->setHidden(false);
                   Cross14ToolButton->setHidden(false);
                   Cross15ToolButton->setHidden(false);
                   Cross16ToolButton->setHidden(false);
                   Curve21ToolButton->setHidden(false);
                   Curve22ToolButton->setHidden(false);
                   Switch28ToolButton->setHidden(false);
                   Switch30ToolButton->setHidden(false);
               }

               break;
           case 3:
               if(!gridscene->itemAt(possPointC,QTransform()))
               {
                   Straight2ToolButton->setHidden(false);
                   Cross14ToolButton->setHidden(false);
                   Cross15ToolButton->setHidden(false);
                   Cross16ToolButton->setHidden(false);
                   Curve21ToolButton->setHidden(false);
                   Curve22ToolButton->setHidden(false);

               }
               break;
           case 4:
              if(!gridscene->itemAt(possPointA,QTransform()))
              {
               Straight1ToolButton->setHidden(false);
               Cross12ToolButton->setHidden(false);
               Cross13ToolButton->setHidden(false);
               Cross16ToolButton->setHidden(false);
               Curve17ToolButton->setHidden(false);
               Curve19ToolButton->setHidden(false);

              }
              break;
           case 5:
             if(!gridscene->itemAt(possPointB,QTransform()))
             {
               Straight1ToolButton->setHidden(false);
               Cross12ToolButton->setHidden(false);
               Cross13ToolButton->setHidden(false);
               Cross16ToolButton->setHidden(false);
               Curve18ToolButton->setHidden(false);
               Curve20ToolButton->setHidden(false);

             }
             break;
           case 6:
             if(!gridscene->itemAt(possPointD,QTransform()))
             {
               Straight2ToolButton->setHidden(false);
               Cross14ToolButton->setHidden(false);
               Cross15ToolButton->setHidden(false);
               Cross16ToolButton->setHidden(false);
               Curve23ToolButton->setHidden(false);
               Curve24ToolButton->setHidden(false);
             }
             break;
           case 7:
             if(!gridscene->itemAt(possPointC,QTransform()))
             {
               Cross13ToolButton->setHidden(false);
               Cross15ToolButton->setHidden(false);
               Diagonal26ToolButton->setHidden(false);
             }
             break;
           case 8:
             if(!gridscene->itemAt(possPointB,QTransform()))
             {
               Cross12ToolButton->setHidden(false);
               Cross14ToolButton->setHidden(false);
               Diagonal25ToolButton->setHidden(false);
             }
             break;
           case 9:
             if(!gridscene->itemAt(possPointA,QTransform()))
             {
               Cross12ToolButton->setHidden(false);
               Cross14ToolButton->setHidden(false);
               Diagonal25ToolButton->setHidden(false);
             }
             break;
           case 10:
             if(!gridscene->itemAt(possPointD,QTransform()))
             {
               Cross13ToolButton->setHidden(false);
               Cross15ToolButton->setHidden(false);
               Diagonal26ToolButton->setHidden(false);
             }
             break;
          case 11:
            if(gridscene->itemAt(possPointB,QTransform()))
            {
               Bumper8ToolButton->setHidden(false);
               Curve18ToolButton->setHidden(false);
               Curve22ToolButton->setHidden(false);
               Diagonal25ToolButton->setHidden(false);
            }
            else if(gridscene->itemAt(possPointA,QTransform()))
            {
               Bumper9ToolButton->setHidden(false);
               Curve19ToolButton->setHidden(false);
               Curve23ToolButton->setHidden(false);
               Diagonal25ToolButton->setHidden(false);
            }
            else if(gridscene->itemAt(possPointD,QTransform()))
            {
               Bumper10ToolButton->setHidden(false);
               Curve20ToolButton->setHidden(false);
               Curve24ToolButton->setHidden(false);
               Diagonal26ToolButton->setHidden(false);
            }
            else if(gridscene->itemAt(possPointC,QTransform()))
            {
               Bumper7ToolButton->setHidden(false);
               Curve17ToolButton->setHidden(false);
               Curve21ToolButton->setHidden(false);
               Diagonal26ToolButton->setHidden(false);
            }
            else
            {
               Bumper7ToolButton->setHidden(false);
               Bumper8ToolButton->setHidden(false);
               Bumper9ToolButton->setHidden(false);
               Bumper10ToolButton->setHidden(false);
               Curve17ToolButton->setHidden(false);
               Curve18ToolButton->setHidden(false);
               Curve19ToolButton->setHidden(false);
               Curve20ToolButton->setHidden(false);
               Curve21ToolButton->setHidden(false);
               Curve22ToolButton->setHidden(false);
               Curve23ToolButton->setHidden(false);
               Curve24ToolButton->setHidden(false);
               Diagonal25ToolButton->setHidden(false);
               Diagonal26ToolButton->setHidden(false);
            }
            break;
         case 12:

           if(gridscene->itemAt(possPointC,QTransform()))
           {
             Bumper8ToolButton->setHidden(false);
             Curve18ToolButton->setHidden(false);
             Curve22ToolButton->setHidden(false);
             Diagonal25ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointB,QTransform()))
           {
             Straight1ToolButton->setHidden(false);
             Bumper4ToolButton->setHidden(false);
             Curve18ToolButton->setHidden(false);
             Curve20ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointA,QTransform()))
           {
             Bumper9ToolButton->setHidden(false);
             Curve19ToolButton->setHidden(false);
             Curve23ToolButton->setHidden(false);
             Diagonal25ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointD,QTransform()))
           {
             Straight1ToolButton->setHidden(false);
             Bumper5ToolButton->setHidden(false);
             Curve17ToolButton->setHidden(false);
             Curve19ToolButton->setHidden(false);
           }
           else
           {
               Straight1ToolButton->setHidden(false);
               Bumper4ToolButton->setHidden(false);
               Bumper5ToolButton->setHidden(false);
               Bumper8ToolButton->setHidden(false);
               Bumper9ToolButton->setHidden(false);
               Curve17ToolButton->setHidden(false);
               Curve18ToolButton->setHidden(false);
               Curve19ToolButton->setHidden(false);
               Curve20ToolButton->setHidden(false);
               Curve22ToolButton->setHidden(false);
               Curve23ToolButton->setHidden(false);
               Diagonal25ToolButton->setHidden(false);
           }
           break;
         case 13:
           if(gridscene->itemAt(possPointC,QTransform()))
           {
             Bumper7ToolButton->setHidden(false);
             Curve17ToolButton->setHidden(false);
             Curve21ToolButton->setHidden(false);
             Diagonal26ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointB,QTransform()))
           {
             Straight1ToolButton->setHidden(false);
             Bumper4ToolButton->setHidden(false);
             Curve18ToolButton->setHidden(false);
             Curve20ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointA,QTransform()))
           {
             Bumper10ToolButton->setHidden(false);
             Curve20ToolButton->setHidden(false);
             Curve24ToolButton->setHidden(false);
             Diagonal26ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointD,QTransform()))
           {
             Straight1ToolButton->setHidden(false);
             Bumper5ToolButton->setHidden(false);
             Curve17ToolButton->setHidden(false);
             Curve19ToolButton->setHidden(false);
           }
           else
           {
             Straight1ToolButton->setHidden(false);
             Bumper4ToolButton->setHidden(false);
             Bumper5ToolButton->setHidden(false);
             Bumper7ToolButton->setHidden(false);
             Bumper10ToolButton->setHidden(false);
             Curve17ToolButton->setHidden(false);
             Curve18ToolButton->setHidden(false);
             Curve19ToolButton->setHidden(false);
             Curve20ToolButton->setHidden(false);
             Curve21ToolButton->setHidden(false);
             Curve24ToolButton->setHidden(false);
             Diagonal26ToolButton->setHidden(false);
           }
           break;
         case 14:
           if(gridscene->itemAt(possPointC,QTransform()))
           {
             Bumper8ToolButton->setHidden(false);
             Curve18ToolButton->setHidden(false);
             Curve22ToolButton->setHidden(false);
             Diagonal25ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointB,QTransform()))
           {
             Straight2ToolButton->setHidden(false);
             Bumper3ToolButton->setHidden(false);
             Curve23ToolButton->setHidden(false);
             Curve24ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointA,QTransform()))
           {
             Bumper9ToolButton->setHidden(false);
             Curve19ToolButton->setHidden(false);
             Curve23ToolButton->setHidden(false);
             Diagonal25ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointD,QTransform()))
           {
             Straight2ToolButton->setHidden(false);
             Bumper6ToolButton->setHidden(false);
             Curve21ToolButton->setHidden(false);
             Curve22ToolButton->setHidden(false);
           }
           else
           {
             Straight2ToolButton->setHidden(false);
             Bumper3ToolButton->setHidden(false);
             Bumper6ToolButton->setHidden(false);
             Bumper8ToolButton->setHidden(false);
             Bumper9ToolButton->setHidden(false);
             Curve18ToolButton->setHidden(false);
             Curve19ToolButton->setHidden(false);
             Curve21ToolButton->setHidden(false);
             Curve22ToolButton->setHidden(false);
             Curve23ToolButton->setHidden(false);
             Curve24ToolButton->setHidden(false);
             Diagonal25ToolButton->setHidden(false);
           }
           break;
         case 15:
           if(gridscene->itemAt(possPointC,QTransform()))
           {
             Straight2ToolButton->setHidden(false);
             Bumper3ToolButton->setHidden(false);
             Curve23ToolButton->setHidden(false);
             Curve24ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointD,QTransform()))
           {
             Bumper7ToolButton->setHidden(false);
             Curve17ToolButton->setHidden(false);
             Curve21ToolButton->setHidden(false);
             Diagonal26ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointA,QTransform()))
           {
             Straight2ToolButton->setHidden(false);
             Bumper6ToolButton->setHidden(false);
             Curve21ToolButton->setHidden(false);
             Curve22ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointB,QTransform()))
           {
             Bumper10ToolButton->setHidden(false);
             Curve20ToolButton->setHidden(false);
             Curve24ToolButton->setHidden(false);
             Diagonal26ToolButton->setHidden(false);
           }
           else
           {
             Straight2ToolButton->setHidden(false);
             Bumper3ToolButton->setHidden(false);
             Bumper6ToolButton->setHidden(false);
             Bumper7ToolButton->setHidden(false);
             Bumper10ToolButton->setHidden(false);
             Curve17ToolButton->setHidden(false);
             Curve20ToolButton->setHidden(false);
             Curve21ToolButton->setHidden(false);
             Curve22ToolButton->setHidden(false);
             Curve23ToolButton->setHidden(false);
             Curve24ToolButton->setHidden(false);
             Diagonal26ToolButton->setHidden(false);
           }
           break;
         case 16:
           if(gridscene->itemAt(possPointC,QTransform()))
           {
             Straight2ToolButton->setHidden(false);
             Bumper3ToolButton->setHidden(false);
             Curve23ToolButton->setHidden(false);
             Curve24ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointD,QTransform()))
           {
             Straight1ToolButton->setHidden(false);
             Bumper4ToolButton->setHidden(false);
             Curve18ToolButton->setHidden(false);
             Curve20ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointA,QTransform()))
           {
             Straight2ToolButton->setHidden(false);
             Bumper6ToolButton->setHidden(false);
             Curve21ToolButton->setHidden(false);
             Curve22ToolButton->setHidden(false);
           }
           else if(gridscene->itemAt(possPointB,QTransform()))
           {
             Straight1ToolButton->setHidden(false);
             Bumper5ToolButton->setHidden(false);
             Curve17ToolButton->setHidden(false);
             Curve19ToolButton->setHidden(false);
           }
           else
           {
             Straight1ToolButton->setHidden(false);
             Straight2ToolButton->setHidden(false);
             Bumper3ToolButton->setHidden(false);
             Bumper4ToolButton->setHidden(false);
             Bumper5ToolButton->setHidden(false);
             Bumper6ToolButton->setHidden(false);
             Curve17ToolButton->setHidden(false);
             Curve18ToolButton->setHidden(false);
             Curve19ToolButton->setHidden(false);
             Curve20ToolButton->setHidden(false);
             Curve21ToolButton->setHidden(false);
             Curve22ToolButton->setHidden(false);
             Curve23ToolButton->setHidden(false);
             Curve24ToolButton->setHidden(false);
           }
           break;
         case 17:
           if(!gridscene->itemAt(possPointA, QTransform()))
           {
             Straight1ToolButton->setHidden(false);
             Bumper4ToolButton->setHidden(false);
             Cross12ToolButton->setHidden(false);
             Cross13ToolButton->setHidden(false);
             Cross16ToolButton->setHidden(false);
             Curve18ToolButton->setHidden(false);
             Curve20ToolButton->setHidden(false);
             Switch31ToolButton->setHidden(false);
             Switch33ToolButton->setHidden(false);
           }
           if(!gridscene->itemAt(possPointB, QTransform()))
           {
             Bumper10ToolButton->setHidden(false);
             Cross11ToolButton->setHidden(false);
             Cross13ToolButton->setHidden(false);
             Cross15ToolButton->setHidden(false);
             Curve20ToolButton->setHidden(false);
             Curve24ToolButton->setHidden(false);
             Diagonal26ToolButton->setHidden(false);
             Switch39ToolButton->setHidden(false);
             Switch41ToolButton->setHidden(false);
           }
           break;
       case 18:
         if(!gridscene->itemAt(possPointA, QTransform()))
         {
           Straight1ToolButton->setHidden(false);
           Bumper5ToolButton->setHidden(false);
           Cross12ToolButton->setHidden(false);
           Cross13ToolButton->setHidden(false);
           Cross16ToolButton->setHidden(false);
           Curve17ToolButton->setHidden(false);
           Curve19ToolButton->setHidden(false);
           Switch32ToolButton->setHidden(false);
           Switch34ToolButton->setHidden(false);
         }
         if(!gridscene->itemAt(possPointB, QTransform()))
         {
           Bumper9ToolButton->setHidden(false);
           Cross11ToolButton->setHidden(false);
           Cross12ToolButton->setHidden(false);
           Cross14ToolButton->setHidden(false);
           Curve19ToolButton->setHidden(false);
           Curve23ToolButton->setHidden(false);
           Diagonal25ToolButton->setHidden(false);
           Switch40ToolButton->setHidden(false);
           Switch42ToolButton->setHidden(false);
         }
         break;
       case 19:
         if(!gridscene->itemAt(possPointA, QTransform()))
         {
           Bumper8ToolButton->setHidden(false);
           Cross11ToolButton->setHidden(false);
           Cross12ToolButton->setHidden(false);
           Cross14ToolButton->setHidden(false);
           Curve18ToolButton->setHidden(false);
           Curve22ToolButton->setHidden(false);
           Diagonal25ToolButton->setHidden(false);
           Switch40ToolButton->setHidden(false);
           Switch42ToolButton->setHidden(false);
         }
         if(!gridscene->itemAt(possPointB, QTransform()))
         {
           Straight1ToolButton->setHidden(false);
           Bumper4ToolButton->setHidden(false);
           Cross12ToolButton->setHidden(false);
           Cross13ToolButton->setHidden(false);
           Cross16ToolButton->setHidden(false);
           Curve18ToolButton->setHidden(false);
           Curve20ToolButton->setHidden(false);
           Switch31ToolButton->setHidden(false);
           Switch33ToolButton->setHidden(false);
         }
         if((!!gridscene->itemAt(possPointB, QTransform()))&(!!gridscene->itemAt(possPointA, QTransform())))
         {
                      Diagonal25ToolButton->setHidden(false);
         }
         break;
       case 20:
         if(!gridscene->itemAt(possPointA, QTransform()))
         {
           Straight1ToolButton->setHidden(false);
           Bumper5ToolButton->setHidden(false);
           Cross12ToolButton->setHidden(false);
           Cross13ToolButton->setHidden(false);
           Cross16ToolButton->setHidden(false);
           Curve17ToolButton->setHidden(false);
           Curve19ToolButton->setHidden(false);
           Switch32ToolButton->setHidden(false);
           Switch34ToolButton->setHidden(false);
         }
         if(!gridscene->itemAt(possPointB, QTransform()))
         {
           Bumper7ToolButton->setHidden(false);
           Cross11ToolButton->setHidden(false);
           Cross13ToolButton->setHidden(false);
           Cross15ToolButton->setHidden(false);
           Curve17ToolButton->setHidden(false);
           Curve21ToolButton->setHidden(false);
           Diagonal26ToolButton->setHidden(false);
           Switch36ToolButton->setHidden(false);
           Switch38ToolButton->setHidden(false);
         }
         if((!!gridscene->itemAt(possPointB, QTransform()))&(!!gridscene->itemAt(possPointA, QTransform())))
         {
                      Diagonal26ToolButton->setHidden(false);
         }
         break;
       case 21:
         if(!gridscene->itemAt(possPointA, QTransform()))
         {
           Bumper10ToolButton->setHidden(false);
           Cross11ToolButton->setHidden(false);
           Cross13ToolButton->setHidden(false);
           Cross15ToolButton->setHidden(false);
           Curve20ToolButton->setHidden(false);
           Curve24ToolButton->setHidden(false);
           Diagonal26ToolButton->setHidden(false);
           Switch39ToolButton->setHidden(false);
           Switch41ToolButton->setHidden(false);
         }
         if(!gridscene->itemAt(possPointB, QTransform()))
         {
           Straight2ToolButton->setHidden(false);
           Bumper3ToolButton->setHidden(false);
           Cross14ToolButton->setHidden(false);
           Cross15ToolButton->setHidden(false);
           Cross16ToolButton->setHidden(false);
           Curve23ToolButton->setHidden(false);
           Curve24ToolButton->setHidden(false);
           Switch27ToolButton->setHidden(false);
           Switch29ToolButton->setHidden(false);
         }
         break;
       case 22:
         if(!gridscene->itemAt(possPointA, QTransform()))
         {
           Straight2ToolButton->setHidden(false);
           Bumper3ToolButton->setHidden(false);
           Cross14ToolButton->setHidden(false);
           Cross15ToolButton->setHidden(false);
           Cross16ToolButton->setHidden(false);
           Curve23ToolButton->setHidden(false);
           Curve24ToolButton->setHidden(false);
           Switch27ToolButton->setHidden(false);
           Switch29ToolButton->setHidden(false);
         }
         if(!gridscene->itemAt(possPointB, QTransform()))
         {
           Bumper9ToolButton->setHidden(false);
           Cross11ToolButton->setHidden(false);
           Cross12ToolButton->setHidden(false);
           Cross14ToolButton->setHidden(false);
           Curve19ToolButton->setHidden(false);
           Curve23ToolButton->setHidden(false);
           Diagonal25ToolButton->setHidden(false);
           Switch40ToolButton->setHidden(false);
           Switch42ToolButton->setHidden(false);
         }
         break;
       case 23:
         if(!gridscene->itemAt(possPointA, QTransform()))
         {
           Bumper8ToolButton->setHidden(false);
           Cross11ToolButton->setHidden(false);
           Cross12ToolButton->setHidden(false);
           Cross14ToolButton->setHidden(false);
           Curve18ToolButton->setHidden(false);
           Curve22ToolButton->setHidden(false);
           Diagonal25ToolButton->setHidden(false);
           Switch40ToolButton->setHidden(false);
           Switch42ToolButton->setHidden(false);
         }
         if(!gridscene->itemAt(possPointB, QTransform()))
         {
           Straight2ToolButton->setHidden(false);
           Bumper6ToolButton->setHidden(false);
           Cross14ToolButton->setHidden(false);
           Cross15ToolButton->setHidden(false);
           Cross16ToolButton->setHidden(false);
           Curve21ToolButton->setHidden(false);
           Curve22ToolButton->setHidden(false);
           Switch28ToolButton->setHidden(false);
           Switch30ToolButton->setHidden(false);
         }
         break;
       case 24:
         if(!gridscene->itemAt(possPointA, QTransform()))
         {
           Bumper7ToolButton->setHidden(false);
           Cross11ToolButton->setHidden(false);
           Cross13ToolButton->setHidden(false);
           Cross15ToolButton->setHidden(false);
           Curve17ToolButton->setHidden(false);
           Curve21ToolButton->setHidden(false);
           Diagonal26ToolButton->setHidden(false);
           Switch36ToolButton->setHidden(false);
           Switch38ToolButton->setHidden(false);
         }
         if(!gridscene->itemAt(possPointB, QTransform()))
         {
           Straight2ToolButton->setHidden(false);
           Bumper6ToolButton->setHidden(false);
           Cross14ToolButton->setHidden(false);
           Cross15ToolButton->setHidden(false);
           Cross16ToolButton->setHidden(false);
           Curve21ToolButton->setHidden(false);
           Curve22ToolButton->setHidden(false);
           Switch28ToolButton->setHidden(false);
           Switch30ToolButton->setHidden(false);
         }
         break;
       case 25:
         if(!gridscene->itemAt(possPointA, QTransform()))
         {
           Bumper8ToolButton->setHidden(false);
           Cross11ToolButton->setHidden(false);
           Cross12ToolButton->setHidden(false);
           Cross14ToolButton->setHidden(false);
           Curve18ToolButton->setHidden(false);
           Curve22ToolButton->setHidden(false);
           Diagonal25ToolButton->setHidden(false);
           Switch35ToolButton->setHidden(false);
           Switch37ToolButton->setHidden(false);
         }
         if(!gridscene->itemAt(possPointB, QTransform()))
         {
           Bumper9ToolButton->setHidden(false);
           Cross11ToolButton->setHidden(false);
           Cross12ToolButton->setHidden(false);
           Cross14ToolButton->setHidden(false);
           Curve19ToolButton->setHidden(false);
           Curve23ToolButton->setHidden(false);
           Diagonal25ToolButton->setHidden(false);
           Switch40ToolButton->setHidden(false);
           Switch42ToolButton->setHidden(false);
         }
         if((!!gridscene->itemAt(possPointB, QTransform()))&(!!gridscene->itemAt(possPointA, QTransform())))
         {
                      Diagonal25ToolButton->setHidden(false);
         }
         break;
       case 26:
         if(!gridscene->itemAt(possPointA, QTransform()))
         {
           Bumper7ToolButton->setHidden(false);
           Cross11ToolButton->setHidden(false);
           Cross13ToolButton->setHidden(false);
           Cross15ToolButton->setHidden(false);
           Curve17ToolButton->setHidden(false);
           Curve21ToolButton->setHidden(false);
           Diagonal26ToolButton->setHidden(false);
           Switch36ToolButton->setHidden(false);
           Switch38ToolButton->setHidden(false);
         }
         if(!gridscene->itemAt(possPointB, QTransform()))
         {
           Bumper10ToolButton->setHidden(false);
           Cross11ToolButton->setHidden(false);
           Cross13ToolButton->setHidden(false);
           Cross15ToolButton->setHidden(false);
           Curve20ToolButton->setHidden(false);
           Curve24ToolButton->setHidden(false);
           Diagonal26ToolButton->setHidden(false);
           Switch39ToolButton->setHidden(false);
           Switch41ToolButton->setHidden(false);
         }
         if((!!gridscene->itemAt(possPointB, QTransform()))&(!!gridscene->itemAt(possPointA, QTransform())))
         {
                      Diagonal26ToolButton->setHidden(false);
         }
         break;
           default:
               break;
       }
}

int MainWindow::isDSConnection(QPointF pos, int trackType)
{
    switchConnA = 0;
    switchConnB = 0;
    switchConnC = 0;
    for(int i=0;i<=connPoints.size()-1;i++)
    {
        if(trackType<27) // /////////////////////////////If track pice being placed is Not switches//////////////////////////////////////
        {
            if(pos == connPoints.at(i)->getPos())
            {
                switch(connPoints.at(i)->getTrackType())
                                {
                                    //trackType of piece being placed must be compatible with the piece of the connPoint (connPoints.at(i)->getTrackType())
                                    //to make a successful connection between DSs

                                    case 1: //Case # is the piece type of the end of the DS
                                        if((trackType==1)|(trackType==12)|(trackType==13) | (trackType==16) | (trackType==17) |(trackType==18)| (trackType==19) | (trackType==20)|(trackType==31)|(trackType==32)|(trackType==33)|(trackType==34)|(trackType==37)|(trackType==38)|(trackType==39)|(trackType==40))
                                        {
                                            if(!isEndConn)
                                            {
                                                if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                                {
                                                    // UPDATE current ds connA
                                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connA
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                                else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                                {

                                                    // UPDATE current ds connA
                                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connB
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                            }
                                            else
                                            {
                                                if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                                {
                                                    // UPDATE current ds connB
                                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connA
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                                else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                                {
                                                    // UPDATE current ds connB
                                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connB
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                            }
                                        }
                                        else
                                            return 0;
                                        break;
                                    case 2:
                                    if((trackType==2) |(trackType==14)|(trackType==15)|(trackType==16)|(trackType==21) |(trackType==22)|(trackType==23)|(trackType==24)|(trackType==27) |(trackType==28)|(trackType==29)|(trackType==30)|(trackType==35) |(trackType==36)|(trackType==41)|(trackType==42))
                                    {
                                        if(!isEndConn)
                                        {
                                            if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                            {
                                                // UPDATE current ds connA
                                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connA
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                            {
                                                // UPDATE current ds connA
                                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connB
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                        }
                                        else
                                        {
                                            if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                            {
                                                // UPDATE current ds connB
                                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connA
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                            {
                                                // UPDATE current ds connB
                                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connb
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                        }
                                    }
                                    else
                                        return 0;
                                        break;
                                case 11:
                                if((trackType==17) |(trackType==18)|(trackType==19)|(trackType==20)|(trackType==21) |(trackType==22)|(trackType==23)|(trackType==24)|(trackType==25) |(trackType==26))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 12:
                                if((trackType==1) |(trackType==17)|(trackType==18)|(trackType==19)|(trackType==20)|(trackType==22) |(trackType==23)|(trackType==25))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 13:
                                if((trackType==1) |(trackType==17)|(trackType==18)|(trackType==19)|(trackType==20) |(trackType==21)|(trackType==24)|(trackType==26))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 14:
                                if((trackType==2) |(trackType==18)|(trackType==19)|(trackType==21)|(trackType==22) |(trackType==23)|(trackType==24)|(trackType==25))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 15:
                                if((trackType==2) |(trackType==17)|(trackType==20)|(trackType==21)|(trackType==22) |(trackType==23)|(trackType==24)|(trackType==26))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 16:
                                if((trackType==1) |(trackType==2)|(trackType==17)|(trackType==18)|(trackType==19) |(trackType==20)|(trackType==21)|(trackType==22)|(trackType==23)|(trackType==24))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            curConnPointType = connPoints.at(i)->getTrackType();
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 17:
                                        if((trackType==1) |(trackType==11)|(trackType==12)|(trackType==13)|(trackType==15) |(trackType==16)|(trackType==18)|(trackType==20)|(trackType==24) |(trackType==26)|(trackType==31)|(trackType==32)|(trackType==33) |(trackType==34)|(trackType==36)|(trackType==37) | (trackType==38) | (trackType==39) | (trackType==41))
                                        {
                                            if(!isEndConn)
                                            {
                                                if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                                {
                                                    // UPDATE current ds connA
                                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connA
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                                else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                                {
                                                    // UPDATE current ds connA
                                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connB
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                            }
                                            else
                                            {
                                                if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                                {
                                                    // UPDATE current ds connB
                                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connA
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                                else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                                {
                                                    // UPDATE current ds connB
                                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connb
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                            }
                                        }
                                        else
                                            return 0;
                                            break;
                                case 18:
                                if((trackType==1) |(trackType==11)|(trackType==12)|(trackType==13)|(trackType==14) |(trackType==16)|(trackType==17)|(trackType==19) |(trackType==23)|(trackType==25)|(trackType==31) | (trackType==32)|(trackType==33) |(trackType==34)|(trackType==35)|(trackType==37) | (trackType==38) | (trackType==40) | (trackType==42))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 19:
                                if((trackType==1) |(trackType==11)|(trackType==12)|(trackType==13)|(trackType==14) |(trackType==16)|(trackType==18)|(trackType==20) |(trackType==22)|(trackType==25)|(trackType==31) | (trackType==32)|(trackType==33) |(trackType==34)|(trackType==35)|(trackType==37) | (trackType==39) | (trackType==40) | (trackType==42))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 20:
                                if((trackType==1) |(trackType==11)|(trackType==12)|(trackType==13)|(trackType==15) |(trackType==16)|(trackType==17)|(trackType==19)|(trackType==21) |(trackType==26) | (trackType==31) | (trackType==32)|(trackType==33) |(trackType==34)|(trackType==36)|(trackType==38) | (trackType==39) | (trackType==40) | (trackType==41))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;

                                case 21:
                                if((trackType==2) |(trackType==11)|(trackType==13)|(trackType==14)|(trackType==15) |(trackType==16)|(trackType==20)|(trackType==23)|(trackType==24) | (trackType==26) |(trackType==27) | (trackType==28) | (trackType==29)|(trackType==30) |(trackType==36)|(trackType==38)|(trackType==39) | (trackType==41) | (trackType==42))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 22:
                                if((trackType==2) |(trackType==11)|(trackType==12)|(trackType==14)|(trackType==15) |(trackType==16)|(trackType==19)|(trackType==23)|(trackType==24) | (trackType==25) |(trackType==27) | (trackType==28) | (trackType==29)|(trackType==30) |(trackType==35)|(trackType==37)|(trackType==40) | (trackType==41) | (trackType==42))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 23:
                                if((trackType==2) |(trackType==11)|(trackType==12)|(trackType==14)|(trackType==15) |(trackType==16)|(trackType==18)|(trackType==21)|(trackType==22) | (trackType==25) |(trackType==27) | (trackType==28) | (trackType==29)|(trackType==30) |(trackType==35)|(trackType==36)|(trackType==37) | (trackType==40) | (trackType==42))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 24:
                                if((trackType==2) |(trackType==11)|(trackType==13)|(trackType==14)|(trackType==15) |(trackType==16)|(trackType==17)|(trackType==21)|(trackType==22) | (trackType==26) |(trackType==27) | (trackType==28) | (trackType==29)|(trackType==30) |(trackType==35)|(trackType==36)|(trackType==38) | (trackType==39) | (trackType==41))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 25:
                                if((trackType==11) |(trackType==12)|(trackType==14)|(trackType==18)|(trackType==19) |(trackType==22)|(trackType==23)|(trackType==25)|(trackType==35) | (trackType==37) |(trackType==40) | (trackType==42))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 26:
                                if((trackType==11) |(trackType==13)|(trackType==15)|(trackType==17)|(trackType==20) |(trackType==21)|(trackType==24)|(trackType==26)|(trackType==36) | (trackType==38) |(trackType==39) | (trackType==41))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                    case 27:
                                    if((trackType==2)|(trackType==27)|(trackType==28)|(trackType==29)|(trackType==30))
                                    {
                                        if(!isEndConn)
                                        {
                                            if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                            {
                                                // UPDATE current ds connA
                                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connA
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                            {
                                                // UPDATE current ds connA
                                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connB
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                            {
                                                // UPDATE current ds connA
                                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connC
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                        }
                                        else
                                        {
                                            if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                            {
                                                // UPDATE current ds connB
                                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connA
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                            {
                                                // UPDATE current ds connB
                                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connb
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                            {
                                                // UPDATE current ds connB
                                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connC
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                        }
                                    }
                                    else
                                        return 0;
                                        break;
                                case 28:
                                if((trackType==2)|(trackType==21)|(trackType==22)|(trackType==27)|(trackType==28)|(trackType==29)|(trackType==30))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connC
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connC
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                                case 29:
                                if((trackType==2)|(trackType==27)|(trackType==28)|(trackType==29)|(trackType==30))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connC
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connC
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                            case 30:
                            if((trackType==2)|(trackType==21)|(trackType==22)|(trackType==27)|(trackType==28)|(trackType==29)|(trackType==30))
                            {
                                if(!isEndConn)
                                {
                                    if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connA
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connB
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connC
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                }
                                else
                                {
                                    if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connA
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connb
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connC
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                }
                            }
                            else
                                return 0;
                                break;
                                case 31:
                                if((trackType==1)|(trackType==31)|(trackType==32)|(trackType==33)|(trackType==34))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connC
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connC
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                            case 32:
                            if((trackType==1)|(trackType==31)|(trackType==32)|(trackType==33)|(trackType==34))
                            {
                                if(!isEndConn)
                                {
                                    if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connA
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connB
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connC
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                }
                                else
                                {
                                    if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connA
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connb
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connC
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                }
                            }
                            else
                                return 0;
                                break;
                            case 33:
                            if((trackType==1)|(trackType==31)|(trackType==32)|(trackType==33)|(trackType==34))
                            {
                                if(!isEndConn)
                                {
                                    if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connA
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connB
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connC
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                }
                                else
                                {
                                    if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connA
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connb
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connC
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                }
                            }
                            else
                                return 0;
                                break;
                        case 34:
                        if((trackType==1)|(trackType==31)|(trackType==32)|(trackType==33)|(trackType==34))
                        {
                            if(!isEndConn)
                            {
                                if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                {
                                    // UPDATE current ds connA
                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connA
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                                else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                {
                                    // UPDATE current ds connA
                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connB
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                                else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                {
                                    // UPDATE current ds connA
                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connC
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                            }
                            else
                            {
                                if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                {
                                    // UPDATE current ds connB
                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connA
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                                else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                {
                                    // UPDATE current ds connB
                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connb
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                                else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                {
                                    // UPDATE current ds connB
                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connC
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                            }
                        }
                        else
                            return 0;
                            break;
                                case 35:
                                if((trackType==2)|(trackType==25))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connC
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connC
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;
                            case 36:
                            if((trackType==2)|(trackType==26))
                            {
                                if(!isEndConn)
                                {
                                    if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connA
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connB
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connC
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                }
                                else
                                {
                                    if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connA
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connb
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connC
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                }
                            }
                            else
                                return 0;
                                break;
                            case 37:
                            if((trackType==1)|(trackType==25))
                            {
                                if(!isEndConn)
                                {
                                    if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connA
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connB
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                    {
                                        // UPDATE current ds connA
                                        dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connC
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                }
                                else
                                {
                                    if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connA
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connb
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                    else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                    {
                                        // UPDATE current ds connB
                                        dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                        ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                        // UPDATE previous ds connC
                                        for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                        {
                                            if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                            {
                                                dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                            }
                                        }
                                        for(int j=0; j<=ctable->rowCount()-1; j++)
                                        {
                                            if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                            {
                                               ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                            }
                                        }
                                        connPoints.remove(i);
                                        gridscene->connPoints.remove(i);
                                        return 1;
                                    }
                                }
                            }
                            else
                                return 0;
                                break;
                        case 38:
                        if((trackType==1)|(trackType==26))
                        {
                            if(!isEndConn)
                            {
                                if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                {
                                    // UPDATE current ds connA
                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connA
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                                else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                {
                                    // UPDATE current ds connA
                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connB
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                                else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                {
                                    // UPDATE current ds connA
                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connC
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                            }
                            else
                            {
                                if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                {
                                    // UPDATE current ds connB
                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connA
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                                else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                {
                                    // UPDATE current ds connB
                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connb
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                                else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                {
                                    // UPDATE current ds connB
                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                    // UPDATE previous ds connC
                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                    {
                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                    connPoints.remove(i);
                                    gridscene->connPoints.remove(i);
                                    return 1;
                                }
                            }
                        }
                        else
                            return 0;
                            break;
                         case 39:
                                        if((trackType==1)|(trackType==26))
                                        {
                                            if(!isEndConn)
                                            {
                                                if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                                {
                                                    // UPDATE current ds connA
                                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connA
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                                else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                                {
                                                    // UPDATE current ds connA
                                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connB
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                                else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                                {
                                                    // UPDATE current ds connA
                                                    dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connC
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                            }
                                            else
                                            {
                                                if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                                {
                                                    // UPDATE current ds connB
                                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connA
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                                else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                                {
                                                    // UPDATE current ds connB
                                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connb
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                                else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                                {
                                                    // UPDATE current ds connB
                                                    dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                    ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                    // UPDATE previous ds connC
                                                    for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                    {
                                                        if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                        {
                                                            dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                        }
                                                    }
                                                    for(int j=0; j<=ctable->rowCount()-1; j++)
                                                    {
                                                        if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                        {
                                                           ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                        }
                                                    }
                                                    connPoints.remove(i);
                                                    gridscene->connPoints.remove(i);
                                                    return 1;
                                                }
                                            }
                                        }
                                        else
                                            return 0;
                                            break;
                                    case 40:
                                    if((trackType==1)|(trackType==25))
                                    {
                                        if(!isEndConn)
                                        {
                                            if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                            {
                                                // UPDATE current ds connA
                                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connA
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                            {
                                                // UPDATE current ds connA
                                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connB
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                            {
                                                // UPDATE current ds connA
                                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connC
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                        }
                                        else
                                        {
                                            if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                            {
                                                // UPDATE current ds connB
                                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connA
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                            {
                                                // UPDATE current ds connB
                                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connb
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                            {
                                                // UPDATE current ds connB
                                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connC
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                        }
                                    }
                                    else
                                        return 0;
                                        break;
                                    case 41:
                                    if((trackType==2)|(trackType==26))
                                    {
                                        if(!isEndConn)
                                        {
                                            if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                            {
                                                // UPDATE current ds connA
                                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connA
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                            {
                                                // UPDATE current ds connA
                                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connB
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                            {
                                                // UPDATE current ds connA
                                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connC
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                        }
                                        else
                                        {
                                            if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                            {
                                                // UPDATE current ds connB
                                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connA
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                            {
                                                // UPDATE current ds connB
                                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connb
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                            else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                            {
                                                // UPDATE current ds connB
                                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                                // UPDATE previous ds connC
                                                for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                                {
                                                    if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                    {
                                                        dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                    }
                                                }
                                                for(int j=0; j<=ctable->rowCount()-1; j++)
                                                {
                                                    if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                    {
                                                       ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                    }
                                                }
                                                connPoints.remove(i);
                                                gridscene->connPoints.remove(i);
                                                return 1;
                                            }
                                        }
                                    }
                                    else
                                        return 0;
                                        break;
                                case 42:
                                if((trackType==2)|(trackType==25))
                                {
                                    if(!isEndConn)
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection a of current and a of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text()== connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connB
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnC()=="1") //update connection a of current and b of previous
                                        {
                                            // UPDATE current ds connA
                                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connC
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        if(connPoints.at(i)->getconnA()=="1") //update connection b of current and a of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connA
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnA(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnB()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connb
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnB(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                        else if(connPoints.at(i)->getconnC()=="1") //update connection b of current and b of previous
                                        {
                                            // UPDATE current ds connB
                                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                            // UPDATE previous ds connC
                                            for(int j=0; j<=dsections.size()-1; j++)                                        //set ds connection of connPoint ds
                                            {
                                                if(dsections.at(j)->getds() == connPoints.at(i)->getDS())
                                                {
                                                    dsections.at(j)->setconnC(dsections.at(dsections.size()-1)->getds());
                                                }
                                            }
                                            for(int j=0; j<=ctable->rowCount()-1; j++)
                                            {
                                                if(ctable->verticalHeaderItem(j)->text() == connPoints.at(i)->getDS())
                                                {
                                                   ctable->setItem(j, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                                }
                                            }
                                            connPoints.remove(i);
                                            gridscene->connPoints.remove(i);
                                            return 1;
                                        }
                                    }
                                }
                                else
                                    return 0;
                                    break;

                    default:
                        break;
                }
            }
        }
        else // ////////////////////////Swicthes are being placed//////////////////////////////
        {
            int x = connPoints.at(i)->getPos().x();
            int y = connPoints.at(i)->getPos().y();
            switch(trackType)
            {
                case 27:
                    if( (!gridscene->itemAt(pos.x(),pos.y()-150,QTransform())) & (!gridscene->itemAt(pos.x()+50,pos.y()-150,QTransform())) &
                        (!gridscene->itemAt(pos.x(),pos.y()-100,QTransform())) & (!gridscene->itemAt(pos.x()+50,pos.y()-100,QTransform())) &
                        (!gridscene->itemAt(pos.x(),pos.y()-50,QTransform())) & (!gridscene->itemAt(pos.x()+50,pos.y()-50,QTransform())) &
                        (!gridscene->itemAt(pos.x()+50,pos.y(),QTransform())) )
                    {
                        // ////////////////Check B Connection///////////////////////////
                        if((pos.x() == x)&(pos.y()-150 == y))
                        {
                            int connType = connPoints.at(i)->getTrackType();
                            if((connType == 2)|(connType== 27) |(connType== 28)|(connType== 29)|(connType== 30))
                            {
                                // UPDATE current ds connB
                                dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                if(connPoints.at(i)->getconnA()=="1")
                                {
                                    // UPDATE previous ds connA at B branch
                                    for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int k=0; k<=ctable->rowCount()-1; k++)
                                    {
                                        if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                }
                                if(connPoints.at(i)->getconnB()=="1")
                                {
                                    // UPDATE previous ds connB at B branch
                                    for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int k=0; k<=ctable->rowCount()-1; k++)
                                    {
                                        if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                }
                                if(connPoints.at(i)->getconnC()=="1")
                                {
                                    // UPDATE previous ds connC at B branch
                                    for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int k=0; k<=ctable->rowCount()-1; k++)
                                    {
                                        if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                }
                                connPoints.remove(i);
                                gridscene->connPoints.remove(i);
                                i--;
                                switchConnB = 1;
                            }
                        }

                        // ////////////////Check C Connection////////////////////
                        if((pos.x()+50 == x)&(pos.y()-150 == y))
                        {
                            int connType = connPoints.at(i)->getTrackType();
                            if((connType == 2)|(connType== 27) |(connType== 28)|(connType== 29)|(connType== 30))
                            {

                                // UPDATE current ds connC
                                dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                if(connPoints.at(i)->getconnA()=="1")
                                {
                                    // UPDATE previous ds connA at C branch
                                    for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int k=0; k<=ctable->rowCount()-1; k++)
                                    {
                                        if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                }
                                if(connPoints.at(i)->getconnB()=="1")
                                {
                                    // UPDATE previous ds connB at C branch
                                    for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int k=0; k<=ctable->rowCount()-1; k++)
                                    {
                                        if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                }
                                if(connPoints.at(i)->getconnC()=="1")
                                {
                                    // UPDATE previous ds connC at C branch
                                    for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int k=0; k<=ctable->rowCount()-1; k++)
                                    {
                                        if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                }


                                connPoints.remove(i);
                                gridscene->connPoints.remove(i);
                                i--;
                                switchConnC = 1;
                            }
                        }

                        // ////////////////Check A Connection/////////////////////
                        if((pos.x() == x)&(pos.y() == y))
                        {
                            int connType = connPoints.at(i)->getTrackType();
                            if((connType == 2)|(connType == 27) |(connType == 28)|(connType == 29)|(connType == 30))
                            {

                                // UPDATE current ds connA
                                dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                                ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                                if(connPoints.at(i)->getconnA()=="1")
                                {
                                    // UPDATE previous ds connA at A branch
                                    for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int k=0; k<=ctable->rowCount()-1; k++)
                                    {
                                        if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                }
                                if(connPoints.at(i)->getconnB()=="1")
                                {
                                    // UPDATE previous ds connB at A branch
                                    for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int k=0; k<=ctable->rowCount()-1; k++)
                                    {
                                        if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                }
                                if(connPoints.at(i)->getconnC()=="1")
                                {
                                    // UPDATE previous ds connC at A branch
                                    for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                    {
                                        if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                        {
                                            dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                        }
                                    }
                                    for(int k=0; k<=ctable->rowCount()-1; k++)
                                    {
                                        if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                        {
                                           ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                        }
                                    }
                                }


                                connPoints.remove(i);
                                gridscene->connPoints.remove(i);
                                i--;
                                switchConnB = 1;
                            }
                        }

                        if(i==connPoints.size()-1)
                        {
                            if((!switchConnA)&(!switchConnB)&(!switchConnC))
                                return 2;
                            else
                                return 1;
                        }

                    }
                     else
                        return 0; //there was a track piece in one of the positions for the switch -> bad position
                          break;
            case 28:
                if( (!gridscene->itemAt(pos.x(),pos.y()+150,QTransform())) & (!gridscene->itemAt(pos.x()+50,pos.y()+150,QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()+100,QTransform())) & (!gridscene->itemAt(pos.x()+50,pos.y()+100,QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()+50,QTransform())) & (!gridscene->itemAt(pos.x()+50,pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x()+50,pos.y(),QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x() == x)&(pos.y()+150 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 27) |(connType== 28)|(connType== 29)|(connType== 30))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()+50 == x)&(pos.y()+150 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 27) |(connType== 28)|(connType== 29)|(connType== 30))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType == 27) |(connType == 28)|(connType == 29)|(connType == 30))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 29:
                if( (!gridscene->itemAt(pos.x(),pos.y()-150,QTransform())) & (!gridscene->itemAt(pos.x()-50,pos.y()-150,QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()-100,QTransform())) & (!gridscene->itemAt(pos.x()-50,pos.y()-100,QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()-50,QTransform())) & (!gridscene->itemAt(pos.x()-50,pos.y()-50,QTransform())) &
                    (!gridscene->itemAt(pos.x()-50,pos.y(),QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x() == x)&(pos.y()-150 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 27) |(connType== 28)|(connType== 29)|(connType== 30))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()-50 == x)&(pos.y()-150 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 27) |(connType== 28)|(connType== 29)|(connType== 30))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType == 27) |(connType == 28)|(connType == 29)|(connType == 30))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 30:
                if( (!gridscene->itemAt(pos.x(),pos.y()+150,QTransform())) & (!gridscene->itemAt(pos.x()-50,pos.y()+150,QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()+100,QTransform())) & (!gridscene->itemAt(pos.x()-50,pos.y()+100,QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()+50,QTransform())) & (!gridscene->itemAt(pos.x()-50,pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x()-50,pos.y(),QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x() == x)&(pos.y()+150 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 27) |(connType== 28)|(connType== 29)|(connType== 30))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()-50 == x)&(pos.y()+150 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 27) |(connType== 28)|(connType== 29)|(connType== 30))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType == 27) |(connType == 28)|(connType == 29)|(connType == 30))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 31:
                if( (!gridscene->itemAt(pos.x()+150,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()+150,pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x()+100,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()+100,pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x()+50,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()+50,pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()+50,QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x()+150 == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()+150 == x)&(pos.y()+50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 32:
                if( (!gridscene->itemAt(pos.x()-150,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()-150,pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x()-100,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()-100,pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x()-50,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()-50,pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()+50,QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x()-150 == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()-150 == x)&(pos.y()+50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 33:
                if( (!gridscene->itemAt(pos.x()+150,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()+150,pos.y()-50,QTransform())) &
                    (!gridscene->itemAt(pos.x()+100,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()+100,pos.y()-50,QTransform())) &
                    (!gridscene->itemAt(pos.x()+50,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()+50,pos.y()-50,QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()-50,QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x()+150 == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()+150 == x)&(pos.y()-50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 34:
                if( (!gridscene->itemAt(pos.x()-150,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()-150,pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x()-100,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()-100,pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x()-50,pos.y(),QTransform())) & (!gridscene->itemAt(pos.x()-50,pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()+50,QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x()-150 == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()-150 == x)&(pos.y()-50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 1)|(connType== 31) |(connType== 32)|(connType== 33)|(connType== 34))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 35:
                if( (!gridscene->itemAt(pos.x()-50,pos.y()-50,QTransform())) & (!gridscene->itemAt(pos.x(),pos.y()-50,QTransform())) &
                    (!gridscene->itemAt(pos.x()-50,pos.y(),QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x() == x)&(pos.y()-50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()-50 == x)&(pos.y()-50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 36:
                if( (!gridscene->itemAt(pos.x()+50,pos.y()-50,QTransform())) & (!gridscene->itemAt(pos.x(),pos.y()-50,QTransform())) &
                    (!gridscene->itemAt(pos.x()+50,pos.y(),QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x() == x)&(pos.y()-50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()+50 == x)&(pos.y()-50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 37:
                if( (!gridscene->itemAt(pos.x()-50,pos.y()-50,QTransform())) & (!gridscene->itemAt(pos.x()-50,pos.y(),QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()-50,QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x()-50 == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()-50 == x)&(pos.y()-50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 38:
                if( (!gridscene->itemAt(pos.x()-50,pos.y()-50,QTransform())) & (!gridscene->itemAt(pos.x()-50,pos.y(),QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()-50,QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x()-50 == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()-50 == x)&(pos.y()-50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 39:
                if( (!gridscene->itemAt(pos.x()-50,pos.y()+50,QTransform())) & (!gridscene->itemAt(pos.x()-50,pos.y(),QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()+50,QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x()-50 == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()-50 == x)&(pos.y()+50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 40:
                if( (!gridscene->itemAt(pos.x()+50,pos.y()+50,QTransform())) & (!gridscene->itemAt(pos.x()+50,pos.y(),QTransform())) &
                    (!gridscene->itemAt(pos.x(),pos.y()+50,QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x()+50 == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()+50 == x)&(pos.y()+50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 41:
                if( (!gridscene->itemAt(pos.x()-50,pos.y()+50,QTransform())) & (!gridscene->itemAt(pos.x(),pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x()-50,pos.y(),QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x() == x)&(pos.y()+50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()-50 == x)&(pos.y()+50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;
            case 42:
                if( (!gridscene->itemAt(pos.x()+50,pos.y()+50,QTransform())) & (!gridscene->itemAt(pos.x(),pos.y()+50,QTransform())) &
                    (!gridscene->itemAt(pos.x()+50,pos.y(),QTransform())) )
                {
                    // ////////////////Check B Connection///////////////////////////
                    if((pos.x() == x)&(pos.y()+50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {
                            // UPDATE current ds connB
                            dsections.at(dsections.size()-1)->setconnB(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 1, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at B branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    // ////////////////Check C Connection////////////////////
                    if((pos.x()+50 == x)&(pos.y()+50 == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connC
                            dsections.at(dsections.size()-1)->setconnC(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 2, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at C branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnC = 1;
                        }
                    }

                    // ////////////////Check A Connection/////////////////////
                    if((pos.x() == x)&(pos.y() == y))
                    {
                        int connType = connPoints.at(i)->getTrackType();
                        if((connType == 2)|(connType== 25))
                        {

                            // UPDATE current ds connA
                            dsections.at(dsections.size()-1)->setconnA(connPoints.at(i)->getDS());                      //set ds connection of current ds
                            ctable->setItem(dsections.size()-1, 0, new QTableWidgetItem(connPoints.at(i)->getDS()));    //update table

                            if(connPoints.at(i)->getconnA()=="1")
                            {
                                // UPDATE previous ds connA at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnA(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 0, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnB()=="1")
                            {
                                // UPDATE previous ds connB at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnB(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 1, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }
                            if(connPoints.at(i)->getconnC()=="1")
                            {
                                // UPDATE previous ds connC at A branch
                                for(int k=0; k<=dsections.size()-1; k++)                                        //set ds connection of connPoint ds
                                {
                                    if(dsections.at(k)->getds() == connPoints.at(i)->getDS())
                                    {
                                        dsections.at(k)->setconnC(dsections.at(dsections.size()-1)->getds());
                                    }
                                }
                                for(int k=0; k<=ctable->rowCount()-1; k++)
                                {
                                    if(ctable->verticalHeaderItem(k)->text()== connPoints.at(i)->getDS())
                                    {
                                       ctable->setItem(k, 2, new QTableWidgetItem(dsections.at(dsections.size()-1)->getds()));
                                    }
                                }
                            }


                            connPoints.remove(i);
                            gridscene->connPoints.remove(i);
                            i--;
                            switchConnB = 1;
                        }
                    }

                    if(i==connPoints.size()-1)
                    {
                        if((!switchConnA)&(!switchConnB)&(!switchConnC))
                            return 2;
                        else
                            return 1;
                    }

                }
                 else
                    return 0; //there was a track piece in one of the positions for the switch -> bad position
                      break;


                default:
                    break;
            }

        }
    }
    return 2;
}

//when second piece is placed this sets the opposite direction point(s) as a connection point for a detection section
void MainWindow::setDSConnPoints(QPointF pos, int trackType, int dsNum)
{
    connPointExists = 0;
    //if starting connection                            //if ending connection
    //Called on second piece and when                   //Called when a ds is saved or hits another connection
    //possPointA                                        //possPointA
    //possPointB                                        //possPointB
    //possPointC                                        //possPointC
    //possPointD                                        //possPointD
    //still have first piece values                     //are values of last piece placed
    //trackType is trackType of first piece             //trackType is trackType of last piece
    //pos is pos of second piece                        //pos is position of last piece placed

    switch(trackType)
                {
                    case 1:
                    if(isEndConn==0)
                    {
                        if(pos == possPointA)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                         }
                         else if(pos == possPointB)
                         {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                          }
                    }
                    else if(isEndConn==1)
                    {
                        if(!gridscene->itemAt(possPointB,QTransform()))
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                         }
                         else if (!gridscene->itemAt(possPointA,QTransform()))
                         {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                          }

                    }
                    else if(isEndConn==2)
                    {
                        if(!gridscene->itemAt(possPointB,QTransform()))
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                        else if (!gridscene->itemAt(possPointA,QTransform()))
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }

                    //no need for c and d on piece type 1 because possPointsC and D are null for this type piece, pos will never = null

                        break;
                    case 2:
                        if(isEndConn==0)
                        {
                            if(pos == possPointC)
                            {
                                TrackPiece *tp = new TrackPiece(trackType,possPointD);
                                tp->setDS(dsections.at(dsNum)->getds());
                                tp->setTrackType(trackType);
                                tp->setconnA("1");
                                connPoints.append(tp);
                                gridscene->connPoints.append(possPointD);
                                QString tempstring = "(";
                                tempstring.append(QString::number(possPointD.x()/50));
                                tempstring.append(",");
                                tempstring.append(QString::number(possPointD.y()/50));
                                tempstring.append(")");
                                dsections.at(dsNum)->setconnA(tempstring);
                                ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                             }
                             else if(pos == possPointD)
                             {
                                TrackPiece *tp = new TrackPiece(trackType,possPointC);
                                tp->setDS(dsections.at(dsNum)->getds());
                                tp->setTrackType(trackType);
                                tp->setconnA("1");
                                connPoints.append(tp);
                                gridscene->connPoints.append(possPointC);
                                QString tempstring = "(";
                                tempstring.append(QString::number(possPointC.x()/50));
                                tempstring.append(",");
                                tempstring.append(QString::number(possPointC.y()/50));
                                tempstring.append(")");
                                dsections.at(dsNum)->setconnA(tempstring);
                                ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                              }
                        }
                        else if(isEndConn==1)
                        {
                            if(!gridscene->itemAt(possPointD,QTransform()))
                            {
                                TrackPiece *tp = new TrackPiece(trackType,possPointD);
                                tp->setDS(dsections.at(dsNum)->getds());
                                tp->setTrackType(trackType);
                                tp->setconnB("1");
                                connPoints.append(tp);
                                gridscene->connPoints.append(possPointD);
                                QString tempstring = "(";
                                tempstring.append(QString::number(possPointD.x()/50));
                                tempstring.append(",");
                                tempstring.append(QString::number(possPointD.y()/50));
                                tempstring.append(")");
                                dsections.at(dsNum)->setconnB(tempstring);
                                ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                             }
                             else
                             {
                                TrackPiece *tp = new TrackPiece(trackType,possPointC);
                                tp->setDS(dsections.at(dsNum)->getds());
                                tp->setTrackType(trackType);
                                tp->setconnB("1");
                                connPoints.append(tp);
                                gridscene->connPoints.append(possPointC);
                                QString tempstring = "(";
                                tempstring.append(QString::number(possPointC.x()/50));
                                tempstring.append(",");
                                tempstring.append(QString::number(possPointC.y()/50));
                                tempstring.append(")");
                                dsections.at(dsNum)->setconnB(tempstring);
                                ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                              }

                        }
                        else if(isEndConn==2)
                        {
                            if(!gridscene->itemAt(possPointD,QTransform()))
                            {
                                TrackPiece *tp = new TrackPiece(trackType,possPointD);
                                tp->setDS(dsections.at(dsNum)->getds());
                                tp->setTrackType(trackType);
                                tp->setconnA("1");
                                connPoints.append(tp);
                                gridscene->connPoints.append(possPointD);
                                QString tempstring = "(";
                                tempstring.append(QString::number(possPointD.x()/50));
                                tempstring.append(",");
                                tempstring.append(QString::number(possPointD.y()/50));
                                tempstring.append(")");
                                dsections.at(dsNum)->setconnA(tempstring);
                                ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                             }
                             else
                             {
                                TrackPiece *tp = new TrackPiece(trackType,possPointC);
                                tp->setDS(dsections.at(dsNum)->getds());
                                tp->setTrackType(trackType);
                                tp->setconnA("1");
                                connPoints.append(tp);
                                gridscene->connPoints.append(possPointC);
                                QString tempstring = "(";
                                tempstring.append(QString::number(possPointC.x()/50));
                                tempstring.append(",");
                                tempstring.append(QString::number(possPointC.y()/50));
                                tempstring.append(")");
                                dsections.at(dsNum)->setconnA(tempstring);
                                ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                              }
                        }
                        break;
                case 11:
                if(isEndConn==0)
                {
                    if(pos == possPointA)  //pos = value of last pieces placed....possPoint is
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if( pos == possPointB)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointC)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointD)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                    }
                }
                else if(isEndConn==1)
                {
                    if(!gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                else if(isEndConn==2)
                {
                    if(!gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                break;
                case 12:
                if(isEndConn==0)
                {
                    if(pos == possPointA)  //pos = value of last pieces placed....possPoint is
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if( pos == possPointB)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointC)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointD)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                }
                else if(isEndConn==1)
                {
                    if(gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                else if(isEndConn==2)
                {
                    if(gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                break;
                case 13:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if( pos == possPointB)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointC)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointD)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                }
                else if(isEndConn==1)
                {
                    if(gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                else if(isEndConn==2)
                {
                    if(gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                break;
                case 14:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if( pos == possPointB)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointC)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointD)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                }
                else if(isEndConn==1)
                {
                    if(gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                else if(isEndConn==2)
                {
                    if(gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                break;
                case 15:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if( pos == possPointB)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointC)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointD)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                }
                else if(isEndConn==1)
                {
                    if(gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                else if(isEndConn==2)
                {
                    if(gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                break;
                case 16:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointC);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if( pos == possPointB)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointD);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointD);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointD.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointD.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointC)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointA);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    else if (pos == possPointD)
                    {
                        if(addCross)
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnB("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                        else
                        {
                            TrackPiece *tp = new TrackPiece(trackType,possPointB);
                            tp->setDS(dsections.at(dsNum)->getds());
                            tp->setTrackType(trackType);
                            tp->setconnA("1");
                            connPoints.append(tp);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                }
                else if(isEndConn==1)
                {
                    if(gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                else if(isEndConn==2)
                {
                    if(gridscene->itemAt(possPointA,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointC);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointD);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointD);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointD.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointD.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if(gridscene->itemAt(possPointC,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                    else if (gridscene->itemAt(possPointD,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                break;
                case 17:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if(pos == possPointB)
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                else if(isEndConn==1)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                      }

                }
                else if(isEndConn==2)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }

                }
                break;
                case 18:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if(pos == possPointB)
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                else if(isEndConn==1)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                      }

                }
                else if(isEndConn==2)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                break;
                case 19:
                if(isEndConn==0)
                {

                    if(pos == possPointA)
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if(pos == possPointB)
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }

                }
                else if(isEndConn==1)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                      }

                }
                else if(isEndConn==2)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                break;
                case 20:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if(pos == possPointB)
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                else if(isEndConn==1)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                      }

                }
                else if(isEndConn==2)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                break;
                case 21:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if(pos == possPointB)
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                else if(isEndConn==1)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                      }

                }
                else if(isEndConn==2)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                break;
                case 22:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if(pos == possPointB)
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                else if(isEndConn==1)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                      }

                }
                else if(isEndConn==2)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                break;
                case 23:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if(pos == possPointB)
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                else if(isEndConn==1)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                      }

                }
                else if(isEndConn==2)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                break;
                case 24:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if(pos == possPointB)
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                else if(isEndConn==1)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                      }

                }
                else if(isEndConn==2)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                break;
                case 25:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if(pos == possPointB)
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                else if(isEndConn==1)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                      }

                }
                else if(isEndConn==2)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                break;
                case 26:
                if(isEndConn==0)
                {
                    if(pos == possPointA)
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if(pos == possPointB)
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                else if(isEndConn==1)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnB("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                      }
                }
                else if(isEndConn==2)
                {
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        TrackPiece *tp = new TrackPiece(trackType,possPointB);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                     }
                     else if (!gridscene->itemAt(possPointA,QTransform()))
                     {
                        TrackPiece *tp = new TrackPiece(trackType,possPointA);
                        tp->setDS(dsections.at(dsNum)->getds());
                        tp->setTrackType(trackType);
                        tp->setconnA("1");
                        connPoints.append(tp);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                      }
                }
                break;






                case 27:
                    if(!gridscene->itemAt(possPointA,QTransform()))
                    {
                        for(int i=0; i<=connPoints.size()-1; i++)
                        {
                            if(connPoints.at(i)->getPos()==possPointA)
                                connPointExists = 1;
                        }
                        if(connPointExists==0)
                        {
                            TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                            tpa->setDS(dsections.at(dsNum)->getds());
                            tpa->setTrackType(trackType);
                            tpa->setconnA("1");
                            connPoints.append(tpa);
                            gridscene->connPoints.append(possPointA);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointA.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointA.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnA(tempstring);
                            ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                        }
                    }
                    if(!gridscene->itemAt(possPointB,QTransform()))
                    {
                        for(int i=0; i<=connPoints.size()-1; i++)
                        {
                            if(connPoints.at(i)->getPos()==possPointB)
                                connPointExists = 1;
                        }
                        if(connPointExists==0)
                        {
                            TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                            tpb->setDS(dsections.at(dsNum)->getds());
                            tpb->setTrackType(trackType);
                            tpb->setconnB("1");
                            connPoints.append(tpb);
                            gridscene->connPoints.append(possPointB);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointB.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointB.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnB(tempstring);
                            ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                        }
                    }
                    if(!gridscene->itemAt(possPointC,QTransform()))
                    {
                        for(int i=0; i<=connPoints.size()-1; i++)
                        {
                            if(connPoints.at(i)->getPos()==possPointC)
                                connPointExists = 1;
                        }
                        if(connPointExists==0)
                        {
                            TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                            tpc->setDS(dsections.at(dsNum)->getds());
                            tpc->setTrackType(trackType);
                            tpc->setconnC("1");
                            connPoints.append(tpc);
                            gridscene->connPoints.append(possPointC);
                            QString tempstring = "(";
                            tempstring.append(QString::number(possPointC.x()/50));
                            tempstring.append(",");
                            tempstring.append(QString::number(possPointC.y()/50));
                            tempstring.append(")");
                            dsections.at(dsNum)->setconnC(tempstring);
                            ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                        }
                    }
                    break;
            case 28:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 29:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 30:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 31:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 32:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 33:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 34:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 35:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 36:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 37:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 38:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 39:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 40:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 41:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;
            case 42:
                if(!gridscene->itemAt(possPointA,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointA)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpa = new TrackPiece(trackType,possPointA);
                        tpa->setDS(dsections.at(dsNum)->getds());
                        tpa->setTrackType(trackType);
                        tpa->setconnA("1");
                        connPoints.append(tpa);
                        gridscene->connPoints.append(possPointA);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointA.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointA.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnA(tempstring);
                        ctable->setItem(dsNum, 0, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointB,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointB)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpb = new TrackPiece(trackType,possPointB);
                        tpb->setDS(dsections.at(dsNum)->getds());
                        tpb->setTrackType(trackType);
                        tpb->setconnB("1");
                        connPoints.append(tpb);
                        gridscene->connPoints.append(possPointB);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointB.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointB.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnB(tempstring);
                        ctable->setItem(dsNum, 1, new QTableWidgetItem(tempstring));
                    }
                }
                if(!gridscene->itemAt(possPointC,QTransform()))
                {
                    for(int i=0; i<=connPoints.size()-1; i++)
                    {
                        if(connPoints.at(i)->getPos()==possPointC)
                            connPointExists = 1;
                    }
                    if(connPointExists==0)
                    {
                        TrackPiece *tpc = new TrackPiece(trackType,possPointC);
                        tpc->setDS(dsections.at(dsNum)->getds());
                        tpc->setTrackType(trackType);
                        tpc->setconnC("1");
                        connPoints.append(tpc);
                        gridscene->connPoints.append(possPointC);
                        QString tempstring = "(";
                        tempstring.append(QString::number(possPointC.x()/50));
                        tempstring.append(",");
                        tempstring.append(QString::number(possPointC.y()/50));
                        tempstring.append(")");
                        dsections.at(dsNum)->setconnC(tempstring);
                        ctable->setItem(dsNum, 2, new QTableWidgetItem(tempstring));
                    }
                }
                break;


                default:
                    break;
            }
}


// Used for updating the array that holds the current track pieces on the grid.
// When a piece is moved, the coordinates for that piece needs to be updated in the array.
// This deletes the piece that moved and adds it again with the new coordinates

void MainWindow::movedItem(QPointF origpos, QPointF newpos)
{   

    int itemtype = 0;
    QString pieceDS;
    QString switchID;
    QString pieceDSconnA;
    QString pieceDSconnB;
    QString pieceDSconnC;

    for(int i = 0; i <= trackpieces.size()-1; i++)
    {
        if(trackpieces.at(i)->getPos()==origpos)
        {
            itemtype = trackpieces.at(i)->getTrackType();

            pieceDS = trackpieces.at(i)->getDS();
            switchID = trackpieces.at(i)->getSwitchID();
            pieceDSconnA = trackpieces.at(i)->getconnA();
            pieceDSconnB = trackpieces.at(i)->getconnB();
            pieceDSconnC = trackpieces.at(i)->getconnC();

            trackpieces.at(i)->setPos(newpos);
        }
    }

    //Send DS info to DS statusBar
    DSidEdit->setText(pieceDS);
    switchIDEdit->setText(switchID);
    //connADSidEdit->setText(pieceDSconnA);
    //connBDSidEdit->setText(pieceDSconnB);
    //connCDSidEdit->setText(pieceDSconnC);

    //Sends Coordinates to StatusBar when item is moved/clicked
    QPointF pos;
    QString string;
    int x = 0;
    int y = 0;

    pos = newpos;
    x = pos.x()/50;
    y = pos.y()/50;
    string = "Item ";
    string.append(QString::number(itemtype));
    string.append(" (");
    string.append(QString::number(x));
    string.append(", ");
    string.append(QString::number(y));
    string.append(")");
    statusLabel->setText(string);
}

void MainWindow::selectItem(QPointF pos)
{
    int itemtype = 0;
    QString pieceDS;
    QString switchID;
    QString pieceDSconnA;
    QString pieceDSconnB;
    QString pieceDSconnC;

    for(int i = 0; i <= trackpieces.size()-1; i++)
    {
        if(trackpieces.at(i)->getPos()==pos)
        {
            itemtype = trackpieces.at(i)->getTrackType();

            pieceDS = trackpieces.at(i)->getDS();
            switchID = trackpieces.at(i)->getSwitchID();
            pieceDSconnA = trackpieces.at(i)->getconnA();
            pieceDSconnB = trackpieces.at(i)->getconnB();
            pieceDSconnC = trackpieces.at(i)->getconnC();

        }
    }

    //Send DS info to DS statusBar
    DSidEdit->setText(pieceDS);
    switchIDEdit->setText(switchID);
    //connADSidEdit->setText(pieceDSconnA);
    //connBDSidEdit->setText(pieceDSconnB);
    //connCDSidEdit->setText(pieceDSconnC);

    //Sends Coordinates to StatusBar when item is clicked
    QString string;
    int x = 0;
    int y = 0;

    x = pos.x()/50;
    y = pos.y()/50;
    string = "Item ";
    string.append(QString::number(itemtype));
    string.append(" (");
    string.append(QString::number(x));
    string.append(", ");
    string.append(QString::number(y));
    string.append(")");
    statusLabel->setText(string);
}

// Used for updating the array that holds the current track pieces on the grid.
// When a piece is deleted, it needs to be deleted from the array that holds the current pieces on the grid
void MainWindow::deleteItems(QList<QPointF> delPosList)
{

     for(int i = 0; i <= trackpieces.size()-1; i++)
     {
         if(!delPosList.isEmpty())
         {
             for(int j = 0; j <= delPosList.size()-1; j++)
             {
                if(trackpieces.at(i)->getPos() == delPosList.at(j))
                {
                    if((trackpieces.at(i)->getTrackType()>42)&(trackpieces.at(i)->getTrackType()<61))
                    {
                        gridscene->removeItem(gridscene->itemAt(delPosList.at(j),QTransform()));
                        trackpieces.remove(i);
                        gridscene->clearDeletedItemsList();
                    }
                }
             }
         }
     }
}

// Used for the paste hotkey. When user has initiated the paste by clicking, this creates a new track piece for each piece that was copied
// and also adds the new piece to the array that holds the current track pieces on the grid.
void MainWindow::pasteItems(QList<QPointF>itempos, QPointF pastepos)
{
    int x;
    int y;
    int offx;
    int offy;
    QPointF newItemPos;

    for(int i = 0; i<= itempos.size()-1; i++)
    {
        x = itempos.at(i).x();
        y = itempos.at(i).y();
        if(i==0)
        {
            offx = itempos.at(i).x();
            offy = itempos.at(i).y();
        }

        newItemPos.setX(pastepos.x() - (-x + offx));
        newItemPos.setY(pastepos.y() - (-y + offy));

        int itemtype = 0;

        for(int j = 0; j <= trackpieces.size()-1; j++)
        {
            if(trackpieces.at(j)->getPos()==itempos.at(i))
            {
                itemtype = trackpieces.at(j)->getTrackType();
            }
        }

        emit loadItem(itemtype,newItemPos);
                //qDebug()<<"Add Item: "<<itemtype<<newItemPos;

    }
    toolSelected = 0;
    gridscene->setToolSelected(0);
    this->setCursor(Qt::ArrowCursor);
}

// Tells the graphics scene that the user has equiped the copy tool
// and sets the cursor to a crosshair indicating to the user they can now paste
void MainWindow::setCopyTool()
{
    toolSelected = 999;
    gridscene->setToolSelected(999);
    this->setCursor(Qt::CrossCursor);
}

// Tells the graphics scene that the user has no tools equiped and to have mouse events act as normal.
// Also, sets the cursor back to the arrow indicating to the user they do not have a tool equiped
void MainWindow::clearToolSelected()
{
    toolSelected = 0;
    gridscene->setToolSelected(0);
    this->setCursor(Qt::ArrowCursor);
}

//These functions are not currently used, I added them for testing at early stages and have kept them until I know for sure I won't need them anymore.
void MainWindow::setCrossCursor()
{
    this->setCursor(Qt::CrossCursor);
}
void MainWindow::setArrowCursor()
{
    this->setCursor(Qt::ArrowCursor);
}


/***************************************** DISPLAY CORRECT SUBTOOLBAR **********************************************/
// Used for when user selects a track type category. Handles the logic for displaying the correct submenu of track pieces
// depending on which button is clicked.

//Straight Track Pieces Button Clicked
void MainWindow::straightToolActionSlot()
{
    if(!bumperToolGroupBox->isHidden())
    {
        bumperToolGroupBox->setHidden(true);
        straightToolGroupBox->setHidden(false);
    }
    else if(!cosmeticToolGroupBox->isHidden())
    {
        cosmeticToolGroupBox->setHidden(true);
        straightToolGroupBox->setHidden(false);
    }
    else if(!crossToolGroupBox->isHidden())
    {
        crossToolGroupBox->setHidden(true);
        straightToolGroupBox->setHidden(false);
    }
    else if(!curvedToolGroupBox->isHidden())
    {
        curvedToolGroupBox->setHidden(true);
        straightToolGroupBox->setHidden(false);
    }
    else if(!diagonalToolGroupBox->isHidden())
    {
        diagonalToolGroupBox->setHidden(true);
        straightToolGroupBox->setHidden(false);
    }
    else if(!switchToolGroupBox->isHidden())
    {
        switchToolGroupBox->setHidden(true);
        straightToolGroupBox->setHidden(false);
    }
    else if(!straightToolGroupBox->isHidden())
    {
        straightToolGroupBox->setHidden(true);
        //fakeGroupBox->setHidden(false);
    }
    else if(straightToolGroupBox->isHidden())
    {
        straightToolGroupBox->setHidden(false);
        //fakeGroupBox->setHidden(true);
    }
}

//Bumper Track Pieces Button Clicked
void MainWindow::bumperToolActionSlot()
{

    if(!straightToolGroupBox->isHidden())
        {
            straightToolGroupBox->setHidden(true);
            bumperToolGroupBox->setHidden(false);
        }
        else if(!cosmeticToolGroupBox->isHidden())
        {
            cosmeticToolGroupBox->setHidden(true);
            bumperToolGroupBox->setHidden(false);
        }
        else if(!crossToolGroupBox->isHidden())
        {
            crossToolGroupBox->setHidden(true);
            bumperToolGroupBox->setHidden(false);
        }
        else if(!curvedToolGroupBox->isHidden())
        {
            curvedToolGroupBox->setHidden(true);
            bumperToolGroupBox->setHidden(false);
        }
        else if(!diagonalToolGroupBox->isHidden())
        {
            diagonalToolGroupBox->setHidden(true);
            bumperToolGroupBox->setHidden(false);
        }
        else if(!switchToolGroupBox->isHidden())
        {
            switchToolGroupBox->setHidden(true);
            bumperToolGroupBox->setHidden(false);
        }
        else if(!bumperToolGroupBox->isHidden())
        {
            bumperToolGroupBox->setHidden(true);
            //fakeGroupBox->setHidden(false);
        }
        else if(bumperToolGroupBox->isHidden())
        {
            bumperToolGroupBox->setHidden(false);
            //fakeGroupBox->setHidden(true);
        }
}

//Curved Track Pieces Button Clicked
void MainWindow::curvedToolActionSlot()
{
    if(!straightToolGroupBox->isHidden())
    {
        straightToolGroupBox->setHidden(true);
        curvedToolGroupBox->setHidden(false);
    }
    else if(!cosmeticToolGroupBox->isHidden())
    {
        cosmeticToolGroupBox->setHidden(true);
        curvedToolGroupBox->setHidden(false);
    }
    else if(!crossToolGroupBox->isHidden())
    {
        crossToolGroupBox->setHidden(true);
        curvedToolGroupBox->setHidden(false);
    }
    else if(!diagonalToolGroupBox->isHidden())
    {
        diagonalToolGroupBox->setHidden(true);
        curvedToolGroupBox->setHidden(false);
    }
    else if(!switchToolGroupBox->isHidden())
    {
        switchToolGroupBox->setHidden(true);
        curvedToolGroupBox->setHidden(false);
    }
    else if(!bumperToolGroupBox->isHidden())
    {
        bumperToolGroupBox->setHidden(true);
        curvedToolGroupBox->setHidden(false);
    }
    else if(!curvedToolGroupBox->isHidden())
    {
        curvedToolGroupBox->setHidden(true);
        //fakeGroupBox->setHidden(false);
    }
    else if(curvedToolGroupBox->isHidden())
    {
        //fakeGroupBox->setHidden(true);
        curvedToolGroupBox->setHidden(false);

    }
}

//Switch Track Pieces Button Clicked
void MainWindow::switchToolActionSlot()
{
    if(!bumperToolGroupBox->isHidden())
    {
        bumperToolGroupBox->setHidden(true);
        switchToolGroupBox->setHidden(false);
    }
    else if(!cosmeticToolGroupBox->isHidden())
    {
        cosmeticToolGroupBox->setHidden(true);
        switchToolGroupBox->setHidden(false);
    }
    else if(!crossToolGroupBox->isHidden())
    {
        crossToolGroupBox->setHidden(true);
        switchToolGroupBox->setHidden(false);
    }
    else if(!curvedToolGroupBox->isHidden())
    {
        curvedToolGroupBox->setHidden(true);
        switchToolGroupBox->setHidden(false);
    }
    else if(!diagonalToolGroupBox->isHidden())
    {
        diagonalToolGroupBox->setHidden(true);
        switchToolGroupBox->setHidden(false);
    }
    else if(!straightToolGroupBox->isHidden())
    {
        straightToolGroupBox->setHidden(true);
        switchToolGroupBox->setHidden(false);
    }
    else if(!switchToolGroupBox->isHidden())
    {
        switchToolGroupBox->setHidden(true);
        //fakeGroupBox->setHidden(false);
    }
    else if(switchToolGroupBox->isHidden())
    {
        //fakeGroupBox->setHidden(true);
        switchToolGroupBox->setHidden(false);

    }
}

//Cross Track Pieces Button Clicked
void MainWindow::crossToolActionSlot()
{
    if(!bumperToolGroupBox->isHidden())
    {
        bumperToolGroupBox->setHidden(true);
        crossToolGroupBox->setHidden(false);
    }
    else if(!cosmeticToolGroupBox->isHidden())
    {
        cosmeticToolGroupBox->setHidden(true);
        crossToolGroupBox->setHidden(false);
    }
    else if(!curvedToolGroupBox->isHidden())
    {
        curvedToolGroupBox->setHidden(true);
        crossToolGroupBox->setHidden(false);
    }
    else if(!diagonalToolGroupBox->isHidden())
    {
        diagonalToolGroupBox->setHidden(true);
        crossToolGroupBox->setHidden(false);
    }
    else if(!switchToolGroupBox->isHidden())
    {
        switchToolGroupBox->setHidden(true);
        crossToolGroupBox->setHidden(false);
    }
    else if(!straightToolGroupBox->isHidden())
    {
        straightToolGroupBox->setHidden(true);
        crossToolGroupBox->setHidden(false);

    }
    else if(!crossToolGroupBox->isHidden())
    {
        crossToolGroupBox->setHidden(true);
        //fakeGroupBox->setHidden(false);
    }
    else if(crossToolGroupBox->isHidden())
    {
        //fakeGroupBox->setHidden(true);
        crossToolGroupBox->setHidden(false);

    }

}

//Diagonal Track Pieces Button Clicked
void MainWindow::diagonalToolActionSlot()
{
    if(!bumperToolGroupBox->isHidden())
    {
        bumperToolGroupBox->setHidden(true);
        diagonalToolGroupBox->setHidden(false);
    }
    else if(!cosmeticToolGroupBox->isHidden())
    {
        cosmeticToolGroupBox->setHidden(true);
        diagonalToolGroupBox->setHidden(false);
    }
    else if(!crossToolGroupBox->isHidden())
    {
        crossToolGroupBox->setHidden(true);
        diagonalToolGroupBox->setHidden(false);
    }
    else if(!curvedToolGroupBox->isHidden())
    {
        curvedToolGroupBox->setHidden(true);
        diagonalToolGroupBox->setHidden(false);
    }
    else if(!switchToolGroupBox->isHidden())
    {
        switchToolGroupBox->setHidden(true);
        diagonalToolGroupBox->setHidden(false);
    }
    else if(!straightToolGroupBox->isHidden())
    {
        straightToolGroupBox->setHidden(true);
        diagonalToolGroupBox->setHidden(false);
    }
    else if(!diagonalToolGroupBox->isHidden())
    {
        diagonalToolGroupBox->setHidden(true);
        //fakeGroupBox->setHidden(false);
    }
    else if(diagonalToolGroupBox->isHidden())
    {
        //fakeGroupBox->setHidden(true);
        diagonalToolGroupBox->setHidden(false);

    }

}

//Cosmetic Track Pieces Button Clicked
void MainWindow::cosmeticToolActionSlot()
{
    if(!bumperToolGroupBox->isHidden())
    {
        bumperToolGroupBox->setHidden(true);
        cosmeticToolGroupBox->setHidden(false);
    }
    else if(!crossToolGroupBox->isHidden())
    {
        crossToolGroupBox->setHidden(true);
        cosmeticToolGroupBox->setHidden(false);
    }
    else if(!curvedToolGroupBox->isHidden())
    {
        curvedToolGroupBox->setHidden(true);
        cosmeticToolGroupBox->setHidden(false);
    }
    else if(!diagonalToolGroupBox->isHidden())
    {
        diagonalToolGroupBox->setHidden(true);
        cosmeticToolGroupBox->setHidden(false);
    }
    else if(!switchToolGroupBox->isHidden())
    {
        switchToolGroupBox->setHidden(true);
        cosmeticToolGroupBox->setHidden(false);
    }
    else if(!straightToolGroupBox->isHidden())
    {
        straightToolGroupBox->setHidden(true);
        cosmeticToolGroupBox->setHidden(false);
    }
    else if(!cosmeticToolGroupBox->isHidden())
    {
        cosmeticToolGroupBox->setHidden(true);
        //fakeGroupBox->setHidden(false);
    }
    else if(cosmeticToolGroupBox->isHidden())
    {
        //fakeGroupBox->setHidden(true);
        cosmeticToolGroupBox->setHidden(false);

    }
}

// Used for when each individual track piece button is clicked.
// Sets toolSelected to the type of track piece the user selected.
// Sends the type of tool the user equiped to the graphics scene so it knows what type of track piece to create.
// Sets the cursor to a crosshair indicating to the user they can now use the equiped tool.
// Hides the submenu of the type of track pieces the user selected
// and shows the placeholder submenu to keep alignment - This feature may be removed depending on group opinion
/************************************** STRAIGHT TOOLBAR ********************************************/
void MainWindow::Straight1Slot()
{
    toolSelected = 1;
    gridscene->setToolSelected(1);
    this->setCursor(Qt::CrossCursor);
    //straightToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Straight2Slot()
{
    toolSelected = 2;
    gridscene->setToolSelected(2);
    this->setCursor(Qt::CrossCursor);
   // straightToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

/************************************** BUMPER TOOLBAR ********************************************/
void MainWindow::Bumper3Slot()
{
    toolSelected = 3;
    gridscene->setToolSelected(3);
    this->setCursor(Qt::CrossCursor);
    //bumperToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Bumper4Slot()
{
    toolSelected = 4;
    gridscene->setToolSelected(4);
    this->setCursor(Qt::CrossCursor);
    //bumperToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Bumper5Slot()
{
    toolSelected = 5;
    gridscene->setToolSelected(5);
    this->setCursor(Qt::CrossCursor);
   // bumperToolGroupBox->setHidden(true);
   // fakeGroupBox->setHidden(false);
}

void MainWindow::Bumper6Slot()
{
    toolSelected = 6;
    gridscene->setToolSelected(6);
    this->setCursor(Qt::CrossCursor);
   //bumperToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Bumper7Slot()
{
    toolSelected = 7;
    gridscene->setToolSelected(7);
    this->setCursor(Qt::CrossCursor);
    //bumperToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Bumper8Slot()
{
    toolSelected = 8;
    gridscene->setToolSelected(8);
    this->setCursor(Qt::CrossCursor);
    //bumperToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Bumper9Slot()
{
    toolSelected = 9;
    gridscene->setToolSelected(9);
    this->setCursor(Qt::CrossCursor);
    //bumperToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Bumper10Slot()
{
    toolSelected = 10;
    gridscene->setToolSelected(10);
    this->setCursor(Qt::CrossCursor);
    //bumperToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}


/************************************** CROSS TOOLBAR ********************************************/
void MainWindow::Cross11Slot()
{
    toolSelected = 11;
    gridscene->setToolSelected(11);
    this->setCursor(Qt::CrossCursor);
    //crossToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Cross12Slot()
{
    toolSelected = 12;
    gridscene->setToolSelected(12);
    this->setCursor(Qt::CrossCursor);
    //crossToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Cross13Slot()
{
    toolSelected = 13;
    gridscene->setToolSelected(13);
    this->setCursor(Qt::CrossCursor);
    //crossToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Cross14Slot()
{
    toolSelected = 14;
    gridscene->setToolSelected(14);
    this->setCursor(Qt::CrossCursor);
    //crossToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Cross15Slot()
{
    toolSelected = 15;
    gridscene->setToolSelected(15);
    this->setCursor(Qt::CrossCursor);
    //crossToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Cross16Slot()
{
    toolSelected = 16;
    gridscene->setToolSelected(16);
    this->setCursor(Qt::CrossCursor);
    //crossToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

/************************************** CURVED TOOLBAR ********************************************/
void MainWindow::Curve17Slot()
{
    toolSelected = 17;
    gridscene->setToolSelected(17);
    this->setCursor(Qt::CrossCursor);
    //curvedToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Curve18Slot()
{
    toolSelected = 18;
    gridscene->setToolSelected(18);
    this->setCursor(Qt::CrossCursor);
    //curvedToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Curve19Slot()
{
    toolSelected = 19;
    gridscene->setToolSelected(19);
    this->setCursor(Qt::CrossCursor);
    //curvedToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Curve20Slot()
{
    toolSelected = 20;
    gridscene->setToolSelected(20);
    this->setCursor(Qt::CrossCursor);
    //curvedToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Curve21Slot()
{
    toolSelected = 21;
    gridscene->setToolSelected(21);
    this->setCursor(Qt::CrossCursor);
    //curvedToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Curve22Slot()
{
    toolSelected = 22;
    gridscene->setToolSelected(22);
    this->setCursor(Qt::CrossCursor);
    //curvedToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Curve23Slot()
{
    toolSelected = 23;
    gridscene->setToolSelected(23);
    this->setCursor(Qt::CrossCursor);
    //curvedToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Curve24Slot()
{
    toolSelected = 24;
    gridscene->setToolSelected(24);
    this->setCursor(Qt::CrossCursor);
    //curvedToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

/************************************** DIAGONAL TOOLBAR ********************************************/

void MainWindow::Diagonal25Slot()
{
    toolSelected = 25;
    gridscene->setToolSelected(25);
    this->setCursor(Qt::CrossCursor);
    //diagonalToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Diagonal26Slot()
{
    toolSelected = 26;
    gridscene->setToolSelected(26);
    this->setCursor(Qt::CrossCursor);
    //diagonalToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}



/************************************** SWITCH TOOLBAR ********************************************/
void MainWindow::Switch27Slot()
{
    toolSelected = 27;
    gridscene->setToolSelected(27);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch28Slot()
{
    toolSelected = 28;
    gridscene->setToolSelected(28);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch29Slot()
{
    toolSelected = 29;
    gridscene->setToolSelected(29);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch30Slot()
{
    toolSelected = 30;
    gridscene->setToolSelected(30);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Switch31Slot()
{
    toolSelected = 31;
    gridscene->setToolSelected(31);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch32Slot()
{
    toolSelected = 32;
    gridscene->setToolSelected(32);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch33Slot()
{
    toolSelected = 33;
    gridscene->setToolSelected(33);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch34Slot()
{
    toolSelected = 34;
    gridscene->setToolSelected(34);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch35Slot()
{
    toolSelected = 35;
    gridscene->setToolSelected(35);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch36Slot()
{
    toolSelected = 36;
    gridscene->setToolSelected(36);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch37Slot()
{
    toolSelected = 37;
    gridscene->setToolSelected(37);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch38Slot()
{
    toolSelected = 38;
    gridscene->setToolSelected(38);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch39Slot()
{
    toolSelected = 39;
    gridscene->setToolSelected(39);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch40Slot()
{
    toolSelected = 40;
    gridscene->setToolSelected(40);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch41Slot()
{
    toolSelected = 41;
    gridscene->setToolSelected(41);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Switch42Slot()
{
    toolSelected = 42;
    gridscene->setToolSelected(42);
    this->setCursor(Qt::CrossCursor);
    //switchToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}


/************************************** COSMETIC TOOLBAR ********************************************/
void MainWindow::Corner43Slot()
{
    toolSelected = 43;
    gridscene->setToolSelected(43);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

void MainWindow::Corner44Slot()
{
    toolSelected = 44;
    gridscene->setToolSelected(44);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner45Slot()
{
    toolSelected = 45;
    gridscene->setToolSelected(45);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner46Slot()
{
    toolSelected = 46;
    gridscene->setToolSelected(46);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner47Slot()
{
    toolSelected = 47;
    gridscene->setToolSelected(47);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner48Slot()
{
    toolSelected = 48;
    gridscene->setToolSelected(48);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner49Slot()
{
    toolSelected = 49;
    gridscene->setToolSelected(49);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner50Slot()
{
    toolSelected = 50;
    gridscene->setToolSelected(50);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner51Slot()
{
    toolSelected = 51;
    gridscene->setToolSelected(51);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner52Slot()
{
    toolSelected = 52;
    gridscene->setToolSelected(52);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner53Slot()
{
    toolSelected = 53;
    gridscene->setToolSelected(53);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner54Slot()
{
    toolSelected = 54;
    gridscene->setToolSelected(54);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner55Slot()
{
    toolSelected = 55;
    gridscene->setToolSelected(55);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner56Slot()
{
    toolSelected = 56;
    gridscene->setToolSelected(56);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner57Slot()
{
    toolSelected = 57;
    gridscene->setToolSelected(57);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner58Slot()
{
    toolSelected = 58;
    gridscene->setToolSelected(58);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner59Slot()
{
    toolSelected = 59;
    gridscene->setToolSelected(59);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}
void MainWindow::Corner60Slot()
{
    toolSelected = 60;
    gridscene->setToolSelected(60);
    this->setCursor(Qt::CrossCursor);
    //cosmeticToolGroupBox->setHidden(true);
    //fakeGroupBox->setHidden(false);
}

MainWindow::~MainWindow()
{
    delete ui;
}


